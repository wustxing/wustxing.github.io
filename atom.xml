<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wustxing&#39;s blog</title>
  
  <subtitle>星的博客</subtitle>
  <link href="http://blog.ypintao.com/atom.xml" rel="self"/>
  
  <link href="http://blog.ypintao.com/"/>
  <updated>2025-09-25T03:44:35.306Z</updated>
  <id>http://blog.ypintao.com/</id>
  
  <author>
    <name>wustxing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vite注意事项</title>
    <link href="http://blog.ypintao.com/2025/03/01/tools/vite/"/>
    <id>http://blog.ypintao.com/2025/03/01/tools/vite/</id>
    <published>2025-03-01T04:00:00.000Z</published>
    <updated>2025-09-25T03:44:35.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vite-是如何实现快速开发的？它的原理是什么？"><a href="#Vite-是如何实现快速开发的？它的原理是什么？" class="headerlink" title="Vite 是如何实现快速开发的？它的原理是什么？"></a>Vite 是如何实现快速开发的？它的原理是什么？</h2><p>Vite的快速开发体验是通过以下原理实现的：</p><p>使用原生ES模块化，无需预打包。<br>利用服务端渲染（SSR）将源代码转换为浏览器可识别的模块。<br>在开发模式下，按需编译和提供模块，实现快速的冷启动和热模块替换（HMR）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vite-是如何实现快速开发的？它的原理是什么？&quot;&gt;&lt;a href=&quot;#Vite-是如何实现快速开发的？它的原理是什么？&quot; class=&quot;headerlink&quot; title=&quot;Vite 是如何实现快速开发的？它的原理是什么？&quot;&gt;&lt;/a&gt;Vite 是如何实现快速开发</summary>
      
    
    
    
    <category term="vite" scheme="http://blog.ypintao.com/categories/vite/"/>
    
    
    <category term="vite" scheme="http://blog.ypintao.com/tags/vite/"/>
    
  </entry>
  
  <entry>
    <title>webpack打包工具注意事项</title>
    <link href="http://blog.ypintao.com/2025/03/01/tools/webpack/"/>
    <id>http://blog.ypintao.com/2025/03/01/tools/webpack/</id>
    <published>2025-03-01T04:00:00.000Z</published>
    <updated>2025-09-25T03:42:56.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpack-的四个核心概念是什么？"><a href="#Webpack-的四个核心概念是什么？" class="headerlink" title="Webpack 的四个核心概念是什么？"></a>Webpack 的四个核心概念是什么？</h2><p>列举并简述 Webpack 的四大核心配置项。<br>概念描述<br>entry入口文件，指定 Webpack 开始构建的位置<br>output输出路径与文件名配置<br>loader处理非 JS 文件（如 CSS、图片、TypeScript）<br>plugin扩展 Webpack 功能（如压缩、优化、注入变量）</p><h2 id="如何配置多个入口（entry）？"><a href="#如何配置多个入口（entry）？" class="headerlink" title="如何配置多个入口（entry）？"></a>如何配置多个入口（entry）？</h2><p>配置 Webpack 同时打包两个独立页面（如 index 和 about 页面）。</p><h2 id="如何配置环境变量？"><a href="#如何配置环境变量？" class="headerlink" title="如何配置环境变量？"></a>如何配置环境变量？</h2><p> 在不同环境中注入不同的 API 地址。<br> 使用 DefinePlugin 定义全局变量。</p><h2 id="什么是-Tree-Shaking？如何启用？"><a href="#什么是-Tree-Shaking？如何启用？" class="headerlink" title="什么是 Tree Shaking？如何启用？"></a>什么是 Tree Shaking？如何启用？</h2><p> 只打包实际使用的代码，减少体积。<br> Tree Shaking 是通过 ES Module 静态分析删除未使用代码的技术。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">usedExports</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sideEffects&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何优化打包体积？"><a href="#如何优化打包体积？" class="headerlink" title="如何优化打包体积？"></a>如何优化打包体积？</h2><p>减少最终打包文件大小的方法有哪些？</p><p>使用 TerserPlugin 压缩 JS。<br>使用 MiniCssExtractPlugin 提取 CSS。<br>使用 SplitChunksPlugin 分包。<br>移除无用代码（Tree Shaking）。<br>使用 externals 排除第三方库（如 React）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title class_">TerserPlugin</span>()],</span><br><span class="line">  <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">    <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何配置-Webpack-构建多页应用（MPA）？"><a href="#如何配置-Webpack-构建多页应用（MPA）？" class="headerlink" title="如何配置 Webpack 构建多页应用（MPA）？"></a>如何配置 Webpack 构建多页应用（MPA）？</h2><p>同时打包多个 HTML 页面，每个页面对应一个入口文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">home</span>: <span class="string">&#x27;./src/home.js&#x27;</span>,</span><br><span class="line">    <span class="attr">about</span>: <span class="string">&#x27;./src/about.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">filename</span>: <span class="string">&#x27;home.html&#x27;</span>, <span class="attr">template</span>: <span class="string">&#x27;./src/home.html&#x27;</span>, <span class="attr">chunks</span>: [<span class="string">&#x27;home&#x27;</span>] &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="attr">filename</span>: <span class="string">&#x27;about.html&#x27;</span>, <span class="attr">template</span>: <span class="string">&#x27;./src/about.html&#x27;</span>, <span class="attr">chunks</span>: [<span class="string">&#x27;about&#x27;</span>] &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Webpack-的四个核心概念是什么？&quot;&gt;&lt;a href=&quot;#Webpack-的四个核心概念是什么？&quot; class=&quot;headerlink&quot; title=&quot;Webpack 的四个核心概念是什么？&quot;&gt;&lt;/a&gt;Webpack 的四个核心概念是什么？&lt;/h2&gt;&lt;p&gt;列举</summary>
      
    
    
    
    <category term="webpack" scheme="http://blog.ypintao.com/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://blog.ypintao.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>cocos小游戏开发</title>
    <link href="http://blog.ypintao.com/2025/01/01/cocos%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
    <id>http://blog.ypintao.com/2025/01/01/cocos%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/</id>
    <published>2025-01-01T04:00:00.000Z</published>
    <updated>2025-09-25T02:31:15.893Z</updated>
    
    
    
    
    <category term="cocos" scheme="http://blog.ypintao.com/categories/cocos/"/>
    
    
    <category term="cocos" scheme="http://blog.ypintao.com/tags/cocos/"/>
    
  </entry>
  
  <entry>
    <title>Vue2组件库开发</title>
    <link href="http://blog.ypintao.com/2024/06/01/vue2%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    <id>http://blog.ypintao.com/2024/06/01/vue2%E7%BB%84%E4%BB%B6%E5%BA%93/</id>
    <published>2024-06-01T04:00:00.000Z</published>
    <updated>2025-09-25T02:35:52.381Z</updated>
    
    <content type="html"><![CDATA[<p>Vue2组件库开发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Vue2组件库开发&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Vue2" scheme="http://blog.ypintao.com/categories/Vue2/"/>
    
    
    <category term="Vue2" scheme="http://blog.ypintao.com/tags/Vue2/"/>
    
  </entry>
  
  <entry>
    <title>Vue3重点</title>
    <link href="http://blog.ypintao.com/2024/05/01/vue3%E9%9D%A2%E8%AF%95/"/>
    <id>http://blog.ypintao.com/2024/05/01/vue3%E9%9D%A2%E8%AF%95/</id>
    <published>2024-05-01T04:00:00.000Z</published>
    <updated>2025-09-21T17:12:59.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-3-面试题集"><a href="#Vue-3-面试题集" class="headerlink" title="Vue 3 面试题集"></a>Vue 3 面试题集</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="1-Vue-3-相比-Vue-2-有哪些重大变化？"><a href="#1-Vue-3-相比-Vue-2-有哪些重大变化？" class="headerlink" title="1. Vue 3 相比 Vue 2 有哪些重大变化？"></a>1. Vue 3 相比 Vue 2 有哪些重大变化？</h3><p><strong>答案</strong>：</p><ul><li><strong>性能提升</strong>：Vue 3 重写了虚拟 DOM 实现，渲染性能提升约 1.3~2 倍，内存占用减少约 50%</li><li><strong>Composition API</strong>：新增组合式 API，提供更灵活的逻辑组织和复用方式</li><li><strong>TypeScript 支持</strong>：Vue 3 是用 TypeScript 重写的，提供了更好的类型推断</li><li><strong>Teleport 组件</strong>：允许将组件的内容传送到 DOM 的其他位置</li><li><strong>Fragments</strong>：组件可以有多个根节点</li><li><strong>Suspense</strong>：处理异步组件的新特性</li><li><strong>响应式系统升级</strong>：使用 ES6 的 Proxy 代替 Object.defineProperty，解决了 Vue 2 中的数组和对象响应式问题</li><li><strong>全局 API 改为应用实例调用</strong>：减少了全局污染</li><li><strong>更好的 Tree-shaking 支持</strong>：减小打包体积</li></ul><span id="more"></span><h3 id="2-什么是-Composition-API？它解决了什么问题？"><a href="#2-什么是-Composition-API？它解决了什么问题？" class="headerlink" title="2. 什么是 Composition API？它解决了什么问题？"></a>2. 什么是 Composition API？它解决了什么问题？</h3><p><strong>答案</strong>：<br>Composition API 是 Vue 3 引入的一种新的组件逻辑组织方式，它允许我们按照功能&#x2F;关注点组织代码，而不是按照选项（data、methods、computed 等）。</p><p><strong>解决的问题</strong>：</p><ul><li><strong>逻辑复用</strong>：相比于 Vue 2 的 mixins，Composition API 提供了更清晰、更灵活的逻辑复用方式</li><li><strong>更好的类型推断</strong>：对 TypeScript 的支持更好</li><li><strong>代码组织</strong>：相关功能的代码可以放在一起，而不是分散在不同的选项中</li><li><strong>避免命名冲突</strong>：不同功能模块可以在各自的作用域中定义变量，避免了 mixins 中的命名冲突问题</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue 2 的 Options API</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">age</span>: <span class="number">0</span> &#125;,</span><br><span class="line">      <span class="attr">posts</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">fetchUserData</span>(<span class="params"></span>) &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    <span class="title function_">fetchUserPosts</span>(<span class="params"></span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">userFullName</span>(<span class="params"></span>) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 3 的 Composition API</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 用户相关逻辑</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">age</span>: <span class="number">0</span> &#125;)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchUserData</span> = (<span class="params"></span>) =&gt; &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> userFullName = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 文章相关逻辑</span></span><br><span class="line">    <span class="keyword">const</span> posts = <span class="title function_">ref</span>([])</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchUserPosts</span> = (<span class="params"></span>) =&gt; &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">fetchUserData</span>()</span><br><span class="line">      <span class="title function_">fetchUserPosts</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      user,</span><br><span class="line">      posts,</span><br><span class="line">      userFullName,</span><br><span class="line">      fetchUserData,</span><br><span class="line">      fetchUserPosts</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ref-和-reactive-有什么区别？什么情况下使用它们？"><a href="#3-ref-和-reactive-有什么区别？什么情况下使用它们？" class="headerlink" title="3. ref 和 reactive 有什么区别？什么情况下使用它们？"></a>3. ref 和 reactive 有什么区别？什么情况下使用它们？</h3><p><strong>答案</strong>：<br>ref 和 reactive 都是用于创建响应式数据的 API，但它们有以下区别：</p><p><strong>ref</strong>：</p><ul><li>可以包装任何类型的值（基本类型和对象类型）</li><li>创建一个包含 <code>.value</code> 属性的响应式对象</li><li>在模板中使用时会自动解包（不需要 <code>.value</code>）</li><li>适合处理基本类型值（如字符串、数字、布尔值）</li></ul><p><strong>reactive</strong>：</p><ul><li>只能用于对象类型（包括数组和普通对象）</li><li>直接返回原始对象的响应式代理</li><li>不能用于基本类型值</li><li>不能被重新赋值（会破坏响应性）</li></ul><p><strong>使用场景</strong>：</p><ul><li>对于基本类型值（如 string、number、boolean），必须使用 ref</li><li>对于复杂对象，可以使用 reactive 或 ref</li><li>如果需要整体替换一个响应式对象，应该使用 ref</li><li>如果只需要修改对象的属性，可以使用 reactive</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 ref</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 0</span></span><br><span class="line">count.<span class="property">value</span>++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">value</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 reactive</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>) <span class="comment">// 0</span></span><br><span class="line">state.<span class="property">count</span>++</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state.<span class="property">count</span>) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ref 可以包装对象</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;)</span><br><span class="line">user.<span class="property">value</span>.<span class="property">age</span>++</span><br><span class="line"><span class="comment">// 或者整体替换</span></span><br><span class="line">user.<span class="property">value</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive 不能重新赋值</span></span><br><span class="line"><span class="keyword">const</span> user2 = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;)</span><br><span class="line">user2.<span class="property">age</span>++</span><br><span class="line"><span class="comment">// 下面这样会破坏响应性</span></span><br><span class="line"><span class="comment">// user2 = &#123; name: &#x27;Jane&#x27;, age: 25 &#125; // 错误用法</span></span><br></pre></td></tr></table></figure><h3 id="4-Vue-3-中的生命周期钩子有哪些变化？"><a href="#4-Vue-3-中的生命周期钩子有哪些变化？" class="headerlink" title="4. Vue 3 中的生命周期钩子有哪些变化？"></a>4. Vue 3 中的生命周期钩子有哪些变化？</h3><p><strong>答案</strong>：<br>Vue 3 中的生命周期钩子与 Vue 2 相比有以下变化：</p><ol><li><p><strong>命名变化</strong>：</p><ul><li><code>beforeCreate</code> 和 <code>created</code> 被 <code>setup()</code> 函数本身替代</li><li>其他钩子前缀改为 <code>on</code>，如 <code>mounted</code> 变为 <code>onMounted</code></li></ul></li><li><p><strong>使用方式</strong>：在 Composition API 中，生命周期钩子作为函数导入并在 <code>setup()</code> 中调用</p></li><li><p><strong>新增钩子</strong>：</p><ul><li><code>onRenderTracked</code>：当组件渲染过程中追踪到响应式依赖时调用</li><li><code>onRenderTriggered</code>：当响应式依赖触发组件重新渲染时调用</li></ul></li><li><p><strong>移除钩子</strong>：</p><ul><li><code>beforeDestroy</code> 改名为 <code>beforeUnmount</code></li><li><code>destroyed</code> 改名为 <code>unmounted</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; </span><br><span class="line">  onBeforeMount, </span><br><span class="line">  onMounted, </span><br><span class="line">  onBeforeUpdate, </span><br><span class="line">  onUpdated, </span><br><span class="line">  onBeforeUnmount, </span><br><span class="line">  onUnmounted,</span><br><span class="line">  onActivated,</span><br><span class="line">  onDeactivated,</span><br><span class="line">  onErrorCaptured</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件挂载前&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件挂载完成&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他生命周期钩子...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-什么是-Teleport？它解决了什么问题？"><a href="#5-什么是-Teleport？它解决了什么问题？" class="headerlink" title="5. 什么是 Teleport？它解决了什么问题？"></a>5. 什么是 Teleport？它解决了什么问题？</h3><p><strong>答案</strong>：<br>Teleport 是 Vue 3 新增的一个内置组件，它可以将组件的一部分 DOM 传送到组件 DOM 树之外的位置。</p><p><strong>解决的问题</strong>：</p><ul><li>解决了模态框、弹出菜单、通知等需要打破组件层次结构的 UI 元素的定位问题</li><li>避免了 CSS 样式（如 z-index、overflow、position）带来的限制</li><li>保持了组件的逻辑封装，同时允许 DOM 结构的灵活布局</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showModal = true&quot;</span>&gt;</span>打开模态框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 使用 Teleport 将模态框传送到 body 下 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;showModal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>模态框标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>模态框内容...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showModal = false&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> showModal = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123; showModal &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式系统"><a href="#响应式系统" class="headerlink" title="响应式系统"></a>响应式系统</h2><h3 id="6-Vue-3-的响应式系统是如何工作的？"><a href="#6-Vue-3-的响应式系统是如何工作的？" class="headerlink" title="6. Vue 3 的响应式系统是如何工作的？"></a>6. Vue 3 的响应式系统是如何工作的？</h3><p><strong>答案</strong>：<br>Vue 3 的响应式系统基于 ES6 的 Proxy 实现，主要工作流程如下：</p><ol><li><strong>创建响应式对象</strong>：通过 <code>reactive()</code> 或 <code>ref()</code> 创建响应式对象</li><li><strong>代理拦截</strong>：使用 Proxy 拦截对象的属性访问、修改等操作</li><li><strong>依赖追踪</strong>：当组件渲染或计算属性计算时，会访问响应式对象的属性，此时系统会记录这些依赖关系</li><li><strong>变更通知</strong>：当响应式对象的属性被修改时，Proxy 的 set 处理器会被触发，然后通知所有依赖于该属性的副作用（如组件重新渲染）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简化版的响应式系统实现原理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// 追踪依赖</span></span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="keyword">const</span> value = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">      <span class="comment">// 如果值是对象，则递归使其响应式</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">reactive</span>(value) : value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> oldValue = target[key]</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">      <span class="keyword">if</span> (oldValue !== value) &#123;</span><br><span class="line">        <span class="comment">// 触发更新</span></span><br><span class="line">        <span class="title function_">trigger</span>(target, key)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-Vue-3-中如何实现计算属性？"><a href="#7-Vue-3-中如何实现计算属性？" class="headerlink" title="7. Vue 3 中如何实现计算属性？"></a>7. Vue 3 中如何实现计算属性？</h3><p><strong>答案</strong>：<br>Vue 3 中使用 <code>computed()</code> 函数来创建计算属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> firstName = <span class="title function_">ref</span>(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> lastName = <span class="title function_">ref</span>(<span class="string">&#x27;Doe&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建只读计算属性</span></span><br><span class="line">    <span class="keyword">const</span> fullName = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName.value&#125;</span> <span class="subst">$&#123;lastName.value&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建可写计算属性</span></span><br><span class="line">    <span class="keyword">const</span> fullName2 = <span class="title function_">computed</span>(&#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName.value&#125;</span> <span class="subst">$&#123;lastName.value&#125;</span>`</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> names = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        firstName.<span class="property">value</span> = names[<span class="number">0</span>]</span><br><span class="line">        lastName.<span class="property">value</span> = names[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      firstName,</span><br><span class="line">      lastName,</span><br><span class="line">      fullName,</span><br><span class="line">      fullName2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算属性具有以下特点：</p><ul><li>基于其响应式依赖进行缓存</li><li>只有当依赖项变化时才会重新计算</li><li>返回一个只读的响应式引用</li><li>可以通过提供 get 和 set 函数创建可写的计算属性</li></ul><h3 id="8-watchEffect-和-watch-有什么区别？"><a href="#8-watchEffect-和-watch-有什么区别？" class="headerlink" title="8. watchEffect 和 watch 有什么区别？"></a>8. watchEffect 和 watch 有什么区别？</h3><p><strong>答案</strong>：<br><code>watchEffect</code> 和 <code>watch</code> 都用于侦听响应式数据的变化并执行副作用，但它们有以下区别：</p><p><strong>watchEffect</strong>：</p><ul><li>立即执行一次回调函数，并自动追踪其中的响应式依赖</li><li>当任何依赖项变化时重新执行回调</li><li>不需要明确指定要侦听的数据源</li><li>无法获取被侦听状态的前一个值</li></ul><p><strong>watch</strong>：</p><ul><li>默认情况下，只有在侦听的源数据变化时才执行回调</li><li>需要明确指定要侦听的数据源</li><li>可以访问被侦听状态的当前值和前一个值</li><li>支持侦听多个数据源</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch, watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;Vue&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// watchEffect 示例</span></span><br><span class="line">    <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Count is: <span class="subst">$&#123;count.value&#125;</span>, Name is: <span class="subst">$&#123;name.value&#125;</span>`</span>)</span><br><span class="line">      <span class="comment">// 自动追踪 count 和 name 的变化</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// watch 示例 - 侦听单个数据源</span></span><br><span class="line">    <span class="title function_">watch</span>(count, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Count changed from <span class="subst">$&#123;oldValue&#125;</span> to <span class="subst">$&#123;newValue&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// watch 示例 - 侦听多个数据源</span></span><br><span class="line">    <span class="title function_">watch</span>([count, name], <span class="function">(<span class="params">[newCount, newName], [oldCount, oldName]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Count: <span class="subst">$&#123;oldCount&#125;</span> -&gt; <span class="subst">$&#123;newCount&#125;</span>, Name: <span class="subst">$&#123;oldName&#125;</span> -&gt; <span class="subst">$&#123;newName&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// watch 示例 - 深度侦听</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;)</span><br><span class="line">    <span class="title function_">watch</span>(user, <span class="function">(<span class="params">newUser, oldUser</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User changed:&#x27;</span>, newUser, oldUser)</span><br><span class="line">    &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count,</span><br><span class="line">      name,</span><br><span class="line">      user</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="9-Vue-3-中组件之间有哪些通信方式？"><a href="#9-Vue-3-中组件之间有哪些通信方式？" class="headerlink" title="9. Vue 3 中组件之间有哪些通信方式？"></a>9. Vue 3 中组件之间有哪些通信方式？</h3><p><strong>答案</strong>：<br>Vue 3 中组件通信的主要方式包括：</p><ol><li><p><strong>Props 和 Events</strong>：</p><ul><li>父组件通过 props 向子组件传递数据</li><li>子组件通过 emits 向父组件发送事件</li></ul></li><li><p><strong>v-model</strong>：</p><ul><li>Vue 3 中的 v-model 可以使用自定义的 prop 和事件</li><li>可以在同一组件上使用多个 v-model</li></ul></li><li><p><strong>provide&#x2F;inject</strong>：</p><ul><li>适用于深层组件嵌套的场景</li><li>祖先组件通过 provide 提供数据，后代组件通过 inject 注入数据</li></ul></li><li><p><strong>Vuex&#x2F;Pinia</strong>：</p><ul><li>集中式状态管理</li><li>适用于复杂应用的全局状态管理</li></ul></li><li><p><strong>mitt&#x2F;tiny-emitter</strong>：</p><ul><li>事件总线，用于任意组件间通信</li><li>Vue 3 移除了 $on, $off 等事件 API，可以使用第三方库实现</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Props 和 Events</span></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">emit</span>(<span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;New message&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; handleClick &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;child-component </span><br><span class="line">  :message=<span class="string">&quot;parentMessage&quot;</span> </span><br><span class="line">  @update=<span class="string">&quot;parentMessage = $event&quot;</span> </span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// provide/inject</span></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> theme = <span class="title function_">ref</span>(<span class="string">&#x27;light&#x27;</span>)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;theme&#x27;</span>, theme) <span class="comment">// 提供响应式数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; theme &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件或后代组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> theme = <span class="title function_">inject</span>(<span class="string">&#x27;theme&#x27;</span>) <span class="comment">// 注入数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123; theme &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-Vue-3-中的-v-model-有什么变化？"><a href="#10-Vue-3-中的-v-model-有什么变化？" class="headerlink" title="10. Vue 3 中的 v-model 有什么变化？"></a>10. Vue 3 中的 v-model 有什么变化？</h3><p><strong>答案</strong>：<br>Vue 3 中的 v-model 相比 Vue 2 有以下变化：</p><ol><li><p><strong>默认 prop 和事件名称变化</strong>：</p><ul><li>Vue 2：prop 为 <code>value</code>，事件为 <code>input</code></li><li>Vue 3：prop 为 <code>modelValue</code>，事件为 <code>update:modelValue</code></li></ul></li><li><p><strong>支持多个 v-model</strong>：</p><ul><li>Vue 3 允许在同一组件上使用多个 v-model，每个绑定可以有不同的名称</li></ul></li><li><p><strong>移除 .sync 修饰符</strong>：</p><ul><li>Vue 3 中 v-model 可以替代 Vue 2 中的 .sync 修饰符</li></ul></li><li><p><strong>自定义 v-model 修饰符</strong>：</p><ul><li>Vue 3 支持自定义 v-model 修饰符</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基本用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:modelValue</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">update:modelValue</span>=<span class="string">&quot;searchText = $event&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多个 v-model --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user-form</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model:name</span>=<span class="string">&quot;userName&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model:age</span>=<span class="string">&quot;userAge&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user-form</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:name</span>=<span class="string">&quot;userName&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">update:name</span>=<span class="string">&quot;userName = $event&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:age</span>=<span class="string">&quot;userAge&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">update:age</span>=<span class="string">&quot;userAge = $event&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 带修饰符的 v-model --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model.capitalize</span>=<span class="string">&quot;searchText&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>组件实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单个 v-model</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">modelValue</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:modelValue&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleInput</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, e.<span class="property">target</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; handleInput &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个 v-model</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:name&#x27;</span>, <span class="string">&#x27;update:age&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">updateName</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">emit</span>(<span class="string">&#x27;update:name&#x27;</span>, name)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">updateAge</span> = (<span class="params">age</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">emit</span>(<span class="string">&#x27;update:age&#x27;</span>, age)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; updateName, updateAge &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义修饰符</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">modelValue</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">modelModifiers</span>: &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&#x27;update:modelValue&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, &#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleInput</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> value = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 应用修饰符</span></span><br><span class="line">      <span class="keyword">if</span> (props.<span class="property">modelModifiers</span>.<span class="property">capitalize</span>) &#123;</span><br><span class="line">        value = value.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + value.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="title function_">emit</span>(<span class="string">&#x27;update:modelValue&#x27;</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; handleInput &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="11-Vue-3-中如何优化性能？"><a href="#11-Vue-3-中如何优化性能？" class="headerlink" title="11. Vue 3 中如何优化性能？"></a>11. Vue 3 中如何优化性能？</h3><p><strong>答案</strong>：<br>Vue 3 中的性能优化方法包括：</p><ol><li><p><strong>使用 v-memo 减少不必要的重新渲染</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-memo</span>=<span class="string">&quot;[item.id === selected]&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 只有当 item.id === selected 变化时才会重新渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用 v-once 渲染静态内容</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 只渲染一次，之后不再更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用 computed 缓存计算结果</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filteredItems = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> items.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">price</span> &gt; <span class="number">100</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 shallowRef 和 shallowReactive 减少深层响应</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有 state 的顶层属性是响应式的</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">shallowReactive</span>(&#123;</span><br><span class="line">  <span class="attr">user</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">address</span>: &#123; <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span> &#125; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 defineAsyncComponent 异步加载组件</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AsyncComponent</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">() =&gt;</span> </span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./components/AsyncComponent.vue&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 KeepAlive 缓存组件实例</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用 Suspense 处理异步依赖</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">suspense</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-component</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loading-spinner</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suspense</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用虚拟列表渲染大量数据</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">virtual-list</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:items</span>=<span class="string">&quot;items&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:item-height</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-slot</span>=<span class="string">&quot;&#123; item &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">virtual-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="12-Vue-3-中如何实现自定义指令？"><a href="#12-Vue-3-中如何实现自定义指令？" class="headerlink" title="12. Vue 3 中如何实现自定义指令？"></a>12. Vue 3 中如何实现自定义指令？</h3><p><strong>答案</strong>：<br>Vue 3 中自定义指令的实现方式与 Vue 2 有所不同，主要变化在于钩子函数的名称与组件生命周期保持一致：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    el.<span class="title function_">focus</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="attr">focus</span>: &#123;</span><br><span class="line">      <span class="title function_">mounted</span>(<span class="params">el</span>) &#123;</span><br><span class="line">        el.<span class="title function_">focus</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vue 3 中自定义指令的钩子函数包括：</p><ul><li><code>created</code>：在绑定元素的 attribute 或事件监听器被应用之前调用</li><li><code>beforeMount</code>：在元素被插入到 DOM 之前调用</li><li><code>mounted</code>：在绑定元素的父组件被挂载后调用</li><li><code>beforeUpdate</code>：在包含组件的 VNode 更新之前调用</li><li><code>updated</code>：在包含组件的 VNode 及其子组件的 VNode 更新之后调用</li><li><code>beforeUnmount</code>：在绑定元素的父组件卸载之前调用</li><li><code>unmounted</code>：当指令与元素解除绑定且父组件已卸载时调用</li></ul><p>自定义指令的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">directive</span>(<span class="string">&#x27;my-directive&#x27;</span>, <span class="function">(<span class="params">el, binding, vnode, prevVnode</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// binding 包含以下属性：</span></span><br><span class="line">  <span class="comment">// value：传递给指令的值</span></span><br><span class="line">  <span class="comment">// oldValue：之前的值，仅在 beforeUpdate 和 updated 中可用</span></span><br><span class="line">  <span class="comment">// arg：传递给指令的参数，如 v-my-directive:arg</span></span><br><span class="line">  <span class="comment">// modifiers：包含修饰符的对象，如 v-my-directive.foo.bar 中，modifiers 为 &#123; foo: true, bar: true &#125;</span></span><br><span class="line">  <span class="comment">// instance：使用该指令的组件实例</span></span><br><span class="line">  <span class="comment">// dir：指令定义对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="工程化与生态"><a href="#工程化与生态" class="headerlink" title="工程化与生态"></a>工程化与生态</h2><h3 id="13-Vue-3-中如何使用-TypeScript？"><a href="#13-Vue-3-中如何使用-TypeScript？" class="headerlink" title="13. Vue 3 中如何使用 TypeScript？"></a>13. Vue 3 中如何使用 TypeScript？</h3><p><strong>答案</strong>：<br>Vue 3 对 TypeScript 有很好的支持，主要使用方式包括：</p><ol><li><p><strong>使用 defineComponent 包装组件选项</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>在 setup 函数中使用类型注解</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, ref, <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">count</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">number</span>&gt; = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">Ref</span>&lt;<span class="title class_">User</span>&gt; = <span class="title function_">ref</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123; count, user &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 defineProps 和 defineEmits</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="comment">// 使用运行时声明</span></span><br><span class="line"><span class="keyword">const</span> props = defineProps&lt;&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>?: <span class="built_in">number</span>;</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;update&#x27;</span>, <span class="attr">id</span>: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;delete&#x27;</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用默认值</span></span><br><span class="line"><span class="title function_">withDefaults</span>(defineProps&lt;&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>?: <span class="built_in">number</span>;</span><br><span class="line">&#125;&gt;(), &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>为 ref 和 reactive 提供类型</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 ref 提供类型</span></span><br><span class="line"><span class="keyword">const</span> user = ref&lt;<span class="title class_">User</span>&gt;(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 reactive 提供类型</span></span><br><span class="line"><span class="keyword">const</span> state = reactive&lt;&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">users</span>: <span class="title class_">User</span>[];</span><br><span class="line">&#125;&gt;(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">users</span>: []</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 PropType 定义复杂 prop 类型</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">User</span>&gt;,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">callback</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Function</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="function">(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="14-Vue-3-中如何使用-Pinia-进行状态管理？"><a href="#14-Vue-3-中如何使用-Pinia-进行状态管理？" class="headerlink" title="14. Vue 3 中如何使用 Pinia 进行状态管理？"></a>14. Vue 3 中如何使用 Pinia 进行状态管理？</h3><p><strong>答案</strong>：<br>Pinia 是 Vue 官方推荐的状态管理库，用于替代 Vuex。使用方法如下：</p><ol><li><p><strong>安装 Pinia</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure></li><li><p><strong>创建 Pinia 实例并挂载到应用</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>定义 Store</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stores/counter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是应用中 store 的唯一 ID</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// state</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Eduardo&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// getters</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// 使用 this 访问其他 getter</span></span><br><span class="line">    <span class="title function_">doubleCountPlusOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doubleCount</span> + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// actions</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">await</span> api.<span class="title function_">get</span>(<span class="string">&#x27;...&#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> = data.<span class="property">count</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>使用 Setup Stores</strong>（更简洁的语法）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// state</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;Eduardo&#x27;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// getters</span></span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// actions</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count.<span class="property">value</span>++</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123; count, name, doubleCount, increment &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>在组件中使用 Store</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; counter.count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Double count: &#123;&#123; counter.doubleCount &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;counter.increment()&quot;&gt;Increment&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment (extracted)&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/stores/counter&#x27;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">const counter = useCounterStore()</span><br><span class="line"></span><br><span class="line">// 解构 store 时保持响应性</span><br><span class="line">const &#123; count, doubleCount &#125; = storeToRefs(counter)</span><br><span class="line">// 直接解构 actions</span><br><span class="line">const &#123; increment &#125; = counter</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>修改 State</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式 1：直接修改</span></span><br><span class="line">counter.<span class="property">count</span>++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 2：使用 $patch 方法</span></span><br><span class="line">counter.$patch(&#123;</span><br><span class="line">  <span class="attr">count</span>: counter.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alex&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 3：使用 $patch 函数</span></span><br><span class="line">counter.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  state.<span class="property">count</span>++</span><br><span class="line">  state.<span class="property">name</span> = <span class="string">&#x27;Alex&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 4：使用 actions</span></span><br><span class="line">counter.<span class="title function_">increment</span>()</span><br></pre></td></tr></table></figure></li><li><p><strong>重置 State</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">counter.$reset()</span><br></pre></td></tr></table></figure></li></ol><h3 id="15-Vue-3-中的-script-setup-语法有什么优势？"><a href="#15-Vue-3-中的-script-setup-语法有什么优势？" class="headerlink" title="15. Vue 3 中的 script setup 语法有什么优势？"></a>15. Vue 3 中的 script setup 语法有什么优势？</h3><p><strong>答案</strong>：<br><code>&lt;script setup&gt;</code> 是 Vue 3.2 引入的编译时语法糖，它有以下优势：</p><ol><li><p><strong>更少的样板代码</strong>：</p><ul><li>不需要返回要暴露给模板的变量</li><li>导入的组件自动注册，无需在 components 选项中声明</li></ul></li><li><p><strong>更好的性能</strong>：</p><ul><li>编译时优化，减少运行时开销</li><li>模板中的变量访问不需要通过代理</li></ul></li><li><p><strong>更好的 TypeScript 支持</strong>：</p><ul><li>直接在 <code>&lt;script setup&gt;</code> 中使用 TypeScript</li><li>使用 defineProps 和 defineEmits 获得完整的类型推断</li></ul></li><li><p><strong>更好的 IDE 支持</strong>：</p><ul><li>更好的自动补全</li><li>更准确的类型检查</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">import MyComponent from &#x27;./MyComponent.vue&#x27; // 自动注册</span><br><span class="line"></span><br><span class="line">// 声明响应式状态</span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">// 计算属性</span><br><span class="line">const doubleCount = computed(() =&gt; count.value * 2)</span><br><span class="line"></span><br><span class="line">// 方法</span><br><span class="line">function increment() &#123;</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生命周期钩子</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;Component mounted&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 直接导入并使用组件，无需注册</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;Count: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Double count: &#123;&#123; doubleCount &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;</span><br><span class="line">    &lt;MyComponent /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>使用 defineProps 和 defineEmits：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 声明 props</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  title: String,</span><br><span class="line">  likes: &#123;</span><br><span class="line">    type: Number,</span><br><span class="line">    default: 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 声明 emits</span><br><span class="line">const emit = defineEmits([&#x27;update&#x27;, &#x27;delete&#x27;])</span><br><span class="line"></span><br><span class="line">// 使用 emit</span><br><span class="line">function handleClick() &#123;</span><br><span class="line">  emit(&#x27;update&#x27;, 123)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用 TypeScript：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 使用类型声明 props</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  title: string;</span><br><span class="line">  likes?: number;</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">// 使用类型声明 emits</span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &#x27;update&#x27;, id: number): void;</span><br><span class="line">  (e: &#x27;delete&#x27;): void;</span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="适合快速熟悉-Vue-3-的-GitHub-项目"><a href="#适合快速熟悉-Vue-3-的-GitHub-项目" class="headerlink" title="适合快速熟悉 Vue 3 的 GitHub 项目"></a>适合快速熟悉 Vue 3 的 GitHub 项目</h2><p>以下是一些优质的 Vue 3 项目，可以帮助你快速熟悉 Vue 3 的各种特性和最佳实践：</p><ol><li><p><strong>Vue 3 官方示例</strong>：</p><ul><li>链接：<a href="https://github.com/vuejs/vue-next-examples">https://github.com/vuejs/vue-next-examples</a></li><li>描述：Vue 团队提供的 Vue 3 示例集合，涵盖了各种 API 的使用方法</li></ul></li><li><p><strong>Hoppscotch</strong>：</p><ul><li>链接：<a href="https://github.com/hoppscotch/hoppscotch">https://github.com/hoppscotch/hoppscotch</a></li><li>描述：开源的 API 开发生态系统，使用 Vue 3 + TypeScript 构建，拥有 55K+ stars</li></ul></li><li><p><strong>VueUse</strong>：</p><ul><li>链接：<a href="https://github.com/vueuse/vueuse">https://github.com/vueuse/vueuse</a></li><li>描述：Vue Composition API 的实用工具集合，包含大量可复用的组合式函数</li></ul></li><li><p><strong>Element Plus</strong>：</p><ul><li>链接：<a href="https://github.com/element-plus/element-plus">https://github.com/element-plus/element-plus</a></li><li>描述：基于 Vue 3 的桌面端组件库</li></ul></li><li><p><strong>Vite</strong>：</p><ul><li>链接：<a href="https://github.com/vitejs/vite">https://github.com/vitejs/vite</a></li><li>描述：下一代前端构建工具，由 Vue 作者尤雨溪创建，与 Vue 3 配合使用效果最佳</li></ul></li><li><p><strong>Vue 3 Instagram Clone</strong>：</p><ul><li>链接：<a href="https://github.com/selemondev/8-Awesome-Vue-Projects">https://github.com/selemondev/8-Awesome-Vue-Projects</a></li><li>描述：使用 Vue 3、Pinia、TailwindCSS 和 Firebase 构建的 Instagram 克隆项目</li></ul></li><li><p><strong>Vue 3 Whatsapp Clone</strong>：</p><ul><li>链接：<a href="https://github.com/selemondev/8-Awesome-Vue-Projects">https://github.com/selemondev/8-Awesome-Vue-Projects</a></li><li>描述：使用 Vue 3、Pinia、TailwindCSS 和 Firebase 构建的 Whatsapp 克隆项目</li></ul></li><li><p><strong>Vue 3 Netflix Clone</strong>：</p><ul><li>链接：<a href="https://github.com/selemondev/8-Awesome-Vue-Projects">https://github.com/selemondev/8-Awesome-Vue-Projects</a></li><li>描述：使用 Vue 3、Supabase、Pinia 和 TailwindCSS 构建的 Netflix 克隆项目</li></ul></li><li><p><strong>Elk</strong>：</p><ul><li>链接：<a href="https://github.com/elk-zone/elk">https://github.com/elk-zone/elk</a></li><li>描述：一个 Mastodon 网页客户端，使用 Vue 3 和 Nuxt 3 构建</li></ul></li><li><p><strong>Pinia</strong>：</p><ul><li>链接：<a href="https://github.com/vuejs/pinia">https://github.com/vuejs/pinia</a></li><li>描述：Vue 官方推荐的状态管理库，了解其源码有助于深入理解 Vue 3 的响应式系统</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue-3-面试题集&quot;&gt;&lt;a href=&quot;#Vue-3-面试题集&quot; class=&quot;headerlink&quot; title=&quot;Vue 3 面试题集&quot;&gt;&lt;/a&gt;Vue 3 面试题集&lt;/h1&gt;&lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h2&gt;&lt;h3 id=&quot;1-Vue-3-相比-Vue-2-有哪些重大变化？&quot;&gt;&lt;a href=&quot;#1-Vue-3-相比-Vue-2-有哪些重大变化？&quot; class=&quot;headerlink&quot; title=&quot;1. Vue 3 相比 Vue 2 有哪些重大变化？&quot;&gt;&lt;/a&gt;1. Vue 3 相比 Vue 2 有哪些重大变化？&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;答案&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能提升&lt;/strong&gt;：Vue 3 重写了虚拟 DOM 实现，渲染性能提升约 1.3~2 倍，内存占用减少约 50%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composition API&lt;/strong&gt;：新增组合式 API，提供更灵活的逻辑组织和复用方式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TypeScript 支持&lt;/strong&gt;：Vue 3 是用 TypeScript 重写的，提供了更好的类型推断&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teleport 组件&lt;/strong&gt;：允许将组件的内容传送到 DOM 的其他位置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fragments&lt;/strong&gt;：组件可以有多个根节点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Suspense&lt;/strong&gt;：处理异步组件的新特性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;响应式系统升级&lt;/strong&gt;：使用 ES6 的 Proxy 代替 Object.defineProperty，解决了 Vue 2 中的数组和对象响应式问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局 API 改为应用实例调用&lt;/strong&gt;：减少了全局污染&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更好的 Tree-shaking 支持&lt;/strong&gt;：减小打包体积&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue3重点" scheme="http://blog.ypintao.com/categories/Vue3%E9%87%8D%E7%82%B9/"/>
    
    
    <category term="Vue3重点" scheme="http://blog.ypintao.com/tags/Vue3%E9%87%8D%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Vue 3 源码解读</title>
    <link href="http://blog.ypintao.com/2024/04/01/vue3%E6%BA%90%E7%A0%81/"/>
    <id>http://blog.ypintao.com/2024/04/01/vue3%E6%BA%90%E7%A0%81/</id>
    <published>2024-04-01T04:00:00.000Z</published>
    <updated>2025-09-21T17:11:41.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>Vue 3的源码采用monorepo的方式组织，使用pnpm进行包管理，主要包含以下核心模块：</p><ul><li><strong>reactivity</strong>: 响应式系统</li><li><strong>runtime-core</strong>: 与平台无关的运行时核心</li><li><strong>runtime-dom</strong>: 浏览器平台特定的运行时</li><li><strong>compiler-core</strong>: 与平台无关的编译器核心</li><li><strong>compiler-dom</strong>: 浏览器平台特定的编译器实现</li><li><strong>compiler-sfc</strong>: 单文件组件(.vue文件)编译器</li><li><strong>shared</strong>: 共享工具函数</li><li><strong>vue</strong>: 完整版本，包含运行时和编译器</li></ul><span id="more"></span><h2 id="一、响应式系统-reactivity"><a href="#一、响应式系统-reactivity" class="headerlink" title="一、响应式系统 (reactivity)"></a>一、响应式系统 (reactivity)</h2><p>Vue 3的响应式系统是整个框架的核心，它基于ES6的Proxy实现，相比Vue 2使用的Object.defineProperty有了质的飞跃。</p><h3 id="1-1-核心API实现原理"><a href="#1-1-核心API实现原理" class="headerlink" title="1.1 核心API实现原理"></a>1.1 核心API实现原理</h3><h4 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h4><p><code>reactive</code>函数是创建响应式对象的主要入口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/reactivity/src/reactive.ts (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target: object</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果是只读对象，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isReadonly</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建响应式代理</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactiveObject</span>(</span><br><span class="line">    target,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    mutableHandlers,</span><br><span class="line">    mutableCollectionHandlers,</span><br><span class="line">    reactiveMap</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: Target,</span></span><br><span class="line"><span class="params">  isReadonly: boolean,</span></span><br><span class="line"><span class="params">  baseHandlers: ProxyHandler&lt;any&gt;,</span></span><br><span class="line"><span class="params">  collectionHandlers: ProxyHandler&lt;any&gt;,</span></span><br><span class="line"><span class="params">  proxyMap: <span class="built_in">WeakMap</span>&lt;Target, any&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果目标不是对象，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果已经是响应式对象，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    target[<span class="title class_">ReactiveFlags</span>.<span class="property">RAW</span>] &amp;&amp;</span><br><span class="line">    !(isReadonly &amp;&amp; target[<span class="title class_">ReactiveFlags</span>.<span class="property">IS_REACTIVE</span>])</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 检查缓存中是否已存在对应的代理</span></span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取目标的类型</span></span><br><span class="line">  <span class="keyword">const</span> targetType = <span class="title function_">getTargetType</span>(target)</span><br><span class="line">  <span class="comment">// 如果目标类型无效，直接返回原对象</span></span><br><span class="line">  <span class="keyword">if</span> (targetType === <span class="title class_">TargetType</span>.<span class="property">INVALID</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 根据目标类型选择不同的handlers</span></span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    targetType === <span class="title class_">TargetType</span>.<span class="property">COLLECTION</span> ? collectionHandlers : baseHandlers</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 缓存代理对象</span></span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h4><p><code>effect</code>函数用于注册副作用函数，当响应式数据变化时会自动执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/reactivity/src/effect.ts (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> effect&lt;T = any&gt;(</span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> T,</span><br><span class="line">  options?: <span class="title class_">ReactiveEffectOptions</span></span><br><span class="line">): <span class="title class_">ReactiveEffectRunner</span> &#123;</span><br><span class="line">  <span class="comment">// 如果fn已经是一个effect函数，获取原始函数</span></span><br><span class="line">  <span class="keyword">if</span> ((fn <span class="keyword">as</span> <span class="title class_">ReactiveEffectRunner</span>).<span class="property">effect</span>) &#123;</span><br><span class="line">    fn = (fn <span class="keyword">as</span> <span class="title class_">ReactiveEffectRunner</span>).<span class="property">effect</span>.<span class="property">fn</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建响应式effect</span></span><br><span class="line">  <span class="keyword">const</span> _effect = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(fn)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 合并选项</span></span><br><span class="line">  <span class="keyword">if</span> (options) &#123;</span><br><span class="line">    <span class="title function_">extend</span>(_effect, options)</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">scope</span>) <span class="title function_">recordEffectScope</span>(_effect, options.<span class="property">scope</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果不是懒执行，立即运行</span></span><br><span class="line">  <span class="keyword">if</span> (!options || !options.<span class="property">lazy</span>) &#123;</span><br><span class="line">    _effect.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回绑定了this的run函数</span></span><br><span class="line">  <span class="keyword">const</span> runner = _effect.<span class="property">run</span>.<span class="title function_">bind</span>(_effect) <span class="keyword">as</span> <span class="title class_">ReactiveEffectRunner</span></span><br><span class="line">  runner.<span class="property">effect</span> = _effect</span><br><span class="line">  <span class="keyword">return</span> runner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveEffect</span>&lt;T = any&gt; &#123;</span><br><span class="line">  active = <span class="literal">true</span></span><br><span class="line">  <span class="attr">deps</span>: <span class="title class_">Dep</span>[] = []</span><br><span class="line">  <span class="attr">parent</span>: <span class="title class_">ReactiveEffect</span> | <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    public fn: () =&gt; T,</span></span><br><span class="line"><span class="params">    public scheduler: EffectScheduler | <span class="literal">null</span> = <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    scope?: EffectScope</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="title function_">recordEffectScope</span>(<span class="variable language_">this</span>, scope)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">active</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 设置当前活动的effect</span></span><br><span class="line">      activeEffect = <span class="variable language_">this</span></span><br><span class="line">      <span class="comment">// 执行函数前，将其标记为允许追踪</span></span><br><span class="line">      trackOpBit = <span class="number">1</span> &lt;&lt; ++effectTrackDepth</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果嵌套深度小于最大值，使用位操作追踪</span></span><br><span class="line">      <span class="keyword">if</span> (effectTrackDepth &lt;= maxMarkerBits) &#123;</span><br><span class="line">        <span class="title function_">initDepMarkers</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否则清除所有依赖</span></span><br><span class="line">        <span class="title function_">cleanupEffect</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 执行函数，此时会触发代理的getter，从而收集依赖</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 恢复状态</span></span><br><span class="line">      <span class="keyword">if</span> (effectTrackDepth &lt;= maxMarkerBits) &#123;</span><br><span class="line">        <span class="title function_">finalizeDepMarkers</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      trackOpBit = <span class="number">1</span> &lt;&lt; --effectTrackDepth</span><br><span class="line">      activeEffect = <span class="variable language_">this</span>.<span class="property">parent</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">active</span>) &#123;</span><br><span class="line">      <span class="title function_">cleanupEffect</span>(<span class="variable language_">this</span>)</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">onStop</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">onStop</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">active</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><p><code>ref</code>函数用于创建基本类型的响应式引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/reactivity/src/ref.ts (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value?: unknown</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRef</span>(value, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRef</span>(<span class="params">rawValue: unknown, shallow: boolean</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果已经是ref，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(rawValue)) &#123;</span><br><span class="line">    <span class="keyword">return</span> rawValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(rawValue, shallow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  private <span class="attr">_value</span>: T</span><br><span class="line">  private <span class="attr">_rawValue</span>: T</span><br><span class="line">  </span><br><span class="line">  public dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span></span><br><span class="line">  public readonly __v_isRef = <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, public readonly __v_isShallow: boolean</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = __v_isShallow ? value : <span class="title function_">toRaw</span>(value)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = __v_isShallow ? value : <span class="title function_">toReactive</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="comment">// 追踪依赖</span></span><br><span class="line">    <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取原始值进行比较</span></span><br><span class="line">    newVal = <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> ? newVal : <span class="title function_">toRaw</span>(newVal)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newVal</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> ? newVal : <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">      <span class="comment">// 触发更新</span></span><br><span class="line">      <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>, newVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-依赖收集与触发更新"><a href="#1-2-依赖收集与触发更新" class="headerlink" title="1.2 依赖收集与触发更新"></a>1.2 依赖收集与触发更新</h3><p>Vue 3的响应式系统核心在于依赖收集(track)和触发更新(trigger)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/reactivity/src/effect.ts (简化版)</span></span><br><span class="line"><span class="comment">// 依赖收集</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target: object, type: TrackOpTypes, key: unknown</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldTrack &amp;&amp; activeEffect) &#123;</span><br><span class="line">    <span class="comment">// 获取target对应的依赖Map</span></span><br><span class="line">    <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">    <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">      targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取key对应的依赖集合</span></span><br><span class="line">    <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">      depsMap.<span class="title function_">set</span>(key, (dep = <span class="title function_">createDep</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 收集依赖</span></span><br><span class="line">    <span class="title function_">trackEffects</span>(dep)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: object,</span></span><br><span class="line"><span class="params">  type: TriggerOpTypes,</span></span><br><span class="line"><span class="params">  key?: unknown,</span></span><br><span class="line"><span class="params">  newValue?: unknown,</span></span><br><span class="line"><span class="params">  oldValue?: unknown,</span></span><br><span class="line"><span class="params">  oldTarget?: <span class="built_in">Map</span>&lt;unknown, unknown&gt; | <span class="built_in">Set</span>&lt;unknown&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取target对应的依赖Map</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="comment">// 没有依赖，直接返回</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 收集需要触发的effects</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">deps</span>: (<span class="title class_">Dep</span> | <span class="literal">undefined</span>)[] = []</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 根据操作类型收集相关依赖</span></span><br><span class="line">  <span class="keyword">if</span> (type === <span class="title class_">TriggerOpTypes</span>.<span class="property">CLEAR</span>) &#123;</span><br><span class="line">    <span class="comment">// 清除操作，触发所有依赖</span></span><br><span class="line">    deps = [...depsMap.<span class="title function_">values</span>()]</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">&#x27;length&#x27;</span> &amp;&amp; <span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">    <span class="comment">// 数组length变化</span></span><br><span class="line">    depsMap.<span class="title function_">forEach</span>(<span class="function">(<span class="params">dep, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;length&#x27;</span> || key &gt;= (newValue <span class="keyword">as</span> number)) &#123;</span><br><span class="line">        deps.<span class="title function_">push</span>(dep)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 普通属性变化</span></span><br><span class="line">    <span class="keyword">if</span> (key !== <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">      deps.<span class="title function_">push</span>(depsMap.<span class="title function_">get</span>(key))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据操作类型添加额外依赖</span></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">TriggerOpTypes</span>.<span class="property">ADD</span>:</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">          deps.<span class="title function_">push</span>(depsMap.<span class="title function_">get</span>(<span class="variable constant_">ITERATE_KEY</span>))</span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_">isMap</span>(target)) &#123;</span><br><span class="line">            deps.<span class="title function_">push</span>(depsMap.<span class="title function_">get</span>(<span class="variable constant_">MAP_KEY_ITERATE_KEY</span>))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isIntegerKey</span>(key)) &#123;</span><br><span class="line">          <span class="comment">// 数组索引添加，触发length相关依赖</span></span><br><span class="line">          deps.<span class="title function_">push</span>(depsMap.<span class="title function_">get</span>(<span class="string">&#x27;length&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">TriggerOpTypes</span>.<span class="property">DELETE</span>:</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">isArray</span>(target)) &#123;</span><br><span class="line">          deps.<span class="title function_">push</span>(depsMap.<span class="title function_">get</span>(<span class="variable constant_">ITERATE_KEY</span>))</span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_">isMap</span>(target)) &#123;</span><br><span class="line">            deps.<span class="title function_">push</span>(depsMap.<span class="title function_">get</span>(<span class="variable constant_">MAP_KEY_ITERATE_KEY</span>))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="title class_">TriggerOpTypes</span>.<span class="property">SET</span>:</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isMap</span>(target)) &#123;</span><br><span class="line">          deps.<span class="title function_">push</span>(depsMap.<span class="title function_">get</span>(<span class="variable constant_">ITERATE_KEY</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 触发收集的effects</span></span><br><span class="line">  <span class="keyword">if</span> (deps.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (deps[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="title function_">triggerEffects</span>(deps[<span class="number">0</span>])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">effects</span>: <span class="title class_">ReactiveEffect</span>[] = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> dep <span class="keyword">of</span> deps) &#123;</span><br><span class="line">      <span class="keyword">if</span> (dep) &#123;</span><br><span class="line">        effects.<span class="title function_">push</span>(...dep)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">triggerEffects</span>(<span class="title function_">createDep</span>(effects))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、组件系统与渲染机制"><a href="#二、组件系统与渲染机制" class="headerlink" title="二、组件系统与渲染机制"></a>二、组件系统与渲染机制</h2><p>Vue 3的组件系统是构建用户界面的核心，它基于虚拟DOM实现高效的渲染。</p><h3 id="2-1-虚拟DOM-VNode"><a href="#2-1-虚拟DOM-VNode" class="headerlink" title="2.1 虚拟DOM (VNode)"></a>2.1 虚拟DOM (VNode)</h3><p>VNode是Vue中虚拟DOM节点的表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/runtime-core/src/vnode.ts (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createVNode = (</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">VNodeTypes</span>,</span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">VNodeProps</span> | <span class="literal">null</span> = <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">children</span>: unknown = <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">patchFlag</span>: number = <span class="number">0</span>,</span><br><span class="line">  <span class="attr">dynamicProps</span>: string[] | <span class="literal">null</span> = <span class="literal">null</span>,</span><br><span class="line">  isBlockNode = <span class="literal">false</span></span><br><span class="line">): <span class="function"><span class="params">VNode</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理class和style规范化</span></span><br><span class="line">  <span class="keyword">if</span> (props) &#123;</span><br><span class="line">    <span class="comment">// 规范化class</span></span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">class</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      props.<span class="property">class</span> = <span class="title function_">normalizeClass</span>(props.<span class="property">class</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 规范化style</span></span><br><span class="line">    <span class="keyword">if</span> (props.<span class="property">style</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">      props.<span class="property">style</span> = <span class="title function_">normalizeStyle</span>(props.<span class="property">style</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 根据type类型确定shapeFlag</span></span><br><span class="line">  <span class="keyword">const</span> shapeFlag = <span class="title function_">isString</span>(type)</span><br><span class="line">    ? <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span></span><br><span class="line">    : <span class="title function_">isObject</span>(type)</span><br><span class="line">    ? <span class="title class_">ShapeFlags</span>.<span class="property">STATEFUL_COMPONENT</span></span><br><span class="line">    : <span class="title function_">isFunction</span>(type)</span><br><span class="line">    ? <span class="title class_">ShapeFlags</span>.<span class="property">FUNCTIONAL_COMPONENT</span></span><br><span class="line">    : <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建VNode对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createBaseVNode</span>(</span><br><span class="line">    type,</span><br><span class="line">    props,</span><br><span class="line">    children,</span><br><span class="line">    patchFlag,</span><br><span class="line">    dynamicProps,</span><br><span class="line">    shapeFlag,</span><br><span class="line">    isBlockNode,</span><br><span class="line">    <span class="literal">true</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-组件实例创建与生命周期"><a href="#2-2-组件实例创建与生命周期" class="headerlink" title="2.2 组件实例创建与生命周期"></a>2.2 组件实例创建与生命周期</h3><p>组件实例的创建过程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/runtime-core/src/component.ts (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createComponentInstance</span>(<span class="params"></span></span><br><span class="line"><span class="params">  vnode: VNode,</span></span><br><span class="line"><span class="params">  parent: ComponentInternalInstance | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  suspense: SuspenseBoundary | <span class="literal">null</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取组件类型和上下文</span></span><br><span class="line">  <span class="keyword">const</span> type = vnode.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">ConcreteComponent</span></span><br><span class="line">  <span class="keyword">const</span> appContext = (parent ? parent.<span class="property">appContext</span> : vnode.<span class="property">appContext</span>) || emptyAppContext</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建组件实例对象</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">instance</span>: <span class="title class_">ComponentInternalInstance</span> = &#123;</span><br><span class="line">    <span class="attr">uid</span>: uid++,</span><br><span class="line">    vnode,</span><br><span class="line">    type,</span><br><span class="line">    parent,</span><br><span class="line">    appContext,</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">null</span>!, <span class="comment">// 稍后设置</span></span><br><span class="line">    <span class="attr">next</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">subTree</span>: <span class="literal">null</span>!, <span class="comment">// 稍后设置</span></span><br><span class="line">    <span class="attr">effect</span>: <span class="literal">null</span>!,</span><br><span class="line">    <span class="attr">update</span>: <span class="literal">null</span>!, <span class="comment">// 稍后设置</span></span><br><span class="line">    <span class="attr">scope</span>: <span class="keyword">new</span> <span class="title class_">EffectScope</span>(<span class="literal">true</span> <span class="comment">/* detached */</span>),</span><br><span class="line">    <span class="attr">render</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">proxy</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">exposed</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">exposeProxy</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">withProxy</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">provides</span>: parent ? parent.<span class="property">provides</span> : <span class="title class_">Object</span>.<span class="title function_">create</span>(appContext.<span class="property">provides</span>),</span><br><span class="line">    <span class="attr">accessCache</span>: <span class="literal">null</span>!,</span><br><span class="line">    <span class="attr">renderCache</span>: [],</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 组件状态</span></span><br><span class="line">    <span class="attr">components</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">directives</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">propsOptions</span>: <span class="title function_">normalizePropsOptions</span>(type, appContext),</span><br><span class="line">    <span class="attr">emitsOptions</span>: <span class="title function_">normalizeEmitsOptions</span>(type, appContext),</span><br><span class="line">    <span class="attr">emit</span>: <span class="literal">null</span>!, <span class="comment">// 稍后设置</span></span><br><span class="line">    <span class="attr">emitted</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">propsDefaults</span>: <span class="variable constant_">EMPTY_OBJ</span>,</span><br><span class="line">    <span class="attr">inheritAttrs</span>: type.<span class="property">inheritAttrs</span>,</span><br><span class="line">    <span class="attr">ctx</span>: <span class="variable constant_">EMPTY_OBJ</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="variable constant_">EMPTY_OBJ</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="variable constant_">EMPTY_OBJ</span>,</span><br><span class="line">    <span class="attr">attrs</span>: <span class="variable constant_">EMPTY_OBJ</span>,</span><br><span class="line">    <span class="attr">slots</span>: <span class="variable constant_">EMPTY_OBJ</span>,</span><br><span class="line">    <span class="attr">refs</span>: <span class="variable constant_">EMPTY_OBJ</span>,</span><br><span class="line">    <span class="attr">setupState</span>: <span class="variable constant_">EMPTY_OBJ</span>,</span><br><span class="line">    <span class="attr">setupContext</span>: <span class="literal">null</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生命周期钩子</span></span><br><span class="line">    suspense,</span><br><span class="line">    <span class="attr">suspenseId</span>: suspense ? suspense.<span class="property">pendingId</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="attr">asyncDep</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">asyncResolved</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">isMounted</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">isUnmounted</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">isDeactivated</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">bc</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">c</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">bm</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">m</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">bu</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">u</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">um</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">bum</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">da</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">rtg</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">rtc</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">ec</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">sp</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 开发环境下使用代理对象作为上下文</span></span><br><span class="line">  instance.<span class="property">ctx</span> = &#123; <span class="attr">_</span>: instance &#125;</span><br><span class="line">  instance.<span class="property">root</span> = parent ? parent.<span class="property">root</span> : instance</span><br><span class="line">  instance.<span class="property">emit</span> = emit.<span class="title function_">bind</span>(<span class="literal">null</span>, instance)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-组件挂载与更新"><a href="#2-3-组件挂载与更新" class="headerlink" title="2.3 组件挂载与更新"></a>2.3 组件挂载与更新</h3><p>组件的挂载和更新过程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/runtime-core/src/renderer.ts (简化版)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mountComponent</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  initialVNode: VNode,</span></span><br><span class="line"><span class="params">  container: RendererElement,</span></span><br><span class="line"><span class="params">  anchor: RendererNode | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  isSVG: boolean,</span></span><br><span class="line"><span class="params">  optimized: boolean</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 创建组件实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = (initialVNode.<span class="property">component</span> = <span class="title function_">createComponentInstance</span>(</span><br><span class="line">    initialVNode,</span><br><span class="line">    parentComponent,</span><br><span class="line">    parentSuspense</span><br><span class="line">  ))</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置组件实例</span></span><br><span class="line">  <span class="title function_">setupComponent</span>(instance)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置并运行带有副作用的渲染函数</span></span><br><span class="line">  <span class="title function_">setupRenderEffect</span>(</span><br><span class="line">    instance,</span><br><span class="line">    initialVNode,</span><br><span class="line">    container,</span><br><span class="line">    anchor,</span><br><span class="line">    parentSuspense,</span><br><span class="line">    isSVG,</span><br><span class="line">    optimized</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setupRenderEffect</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  instance: ComponentInternalInstance,</span></span><br><span class="line"><span class="params">  initialVNode: VNode,</span></span><br><span class="line"><span class="params">  container: RendererElement,</span></span><br><span class="line"><span class="params">  anchor: RendererNode | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  isSVG: boolean,</span></span><br><span class="line"><span class="params">  optimized: boolean</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">componentUpdateFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance.<span class="property">isMounted</span>) &#123;</span><br><span class="line">      <span class="comment">// 挂载组件</span></span><br><span class="line">      <span class="keyword">const</span> &#123; bm, m, parent &#125; = instance</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// beforeMount 钩子</span></span><br><span class="line">      <span class="keyword">if</span> (bm) &#123;</span><br><span class="line">        <span class="title function_">invokeArrayFns</span>(bm)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 渲染组件子树</span></span><br><span class="line">      <span class="keyword">const</span> subTree = (instance.<span class="property">subTree</span> = <span class="title function_">renderComponentRoot</span>(instance))</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 挂载子树</span></span><br><span class="line">      <span class="title function_">patch</span>(</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        subTree,</span><br><span class="line">        container,</span><br><span class="line">        anchor,</span><br><span class="line">        instance,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG</span><br><span class="line">      )</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 设置元素引用</span></span><br><span class="line">      initialVNode.<span class="property">el</span> = subTree.<span class="property">el</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// mounted 钩子</span></span><br><span class="line">      <span class="keyword">if</span> (m) &#123;</span><br><span class="line">        <span class="title function_">queuePostRenderEffect</span>(m, parentSuspense)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 标记为已挂载</span></span><br><span class="line">      instance.<span class="property">isMounted</span> = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 更新组件</span></span><br><span class="line">      <span class="keyword">let</span> &#123; next, bu, u, parent, vnode &#125; = instance</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果有待更新的VNode</span></span><br><span class="line">      <span class="keyword">if</span> (next) &#123;</span><br><span class="line">        next.<span class="property">el</span> = vnode.<span class="property">el</span></span><br><span class="line">        <span class="title function_">updateComponentPreRender</span>(instance, next, optimized)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next = vnode</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// beforeUpdate 钩子</span></span><br><span class="line">      <span class="keyword">if</span> (bu) &#123;</span><br><span class="line">        <span class="title function_">invokeArrayFns</span>(bu)</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 渲染新的子树</span></span><br><span class="line">      <span class="keyword">const</span> nextTree = <span class="title function_">renderComponentRoot</span>(instance)</span><br><span class="line">      <span class="keyword">const</span> prevTree = instance.<span class="property">subTree</span></span><br><span class="line">      instance.<span class="property">subTree</span> = nextTree</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 更新子树</span></span><br><span class="line">      <span class="title function_">patch</span>(</span><br><span class="line">        prevTree,</span><br><span class="line">        nextTree,</span><br><span class="line">        <span class="title function_">hostParentNode</span>(prevTree.<span class="property">el</span>!)!,</span><br><span class="line">        <span class="title function_">getNextHostNode</span>(prevTree),</span><br><span class="line">        instance,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG</span><br><span class="line">      )</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 更新引用</span></span><br><span class="line">      next.<span class="property">el</span> = nextTree.<span class="property">el</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// updated 钩子</span></span><br><span class="line">      <span class="keyword">if</span> (u) &#123;</span><br><span class="line">        <span class="title function_">queuePostRenderEffect</span>(u, parentSuspense)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建响应式effect</span></span><br><span class="line">  <span class="keyword">const</span> effect = (instance.<span class="property">effect</span> = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(</span><br><span class="line">    componentUpdateFn,</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">queueJob</span>(update),</span><br><span class="line">    instance.<span class="property">scope</span></span><br><span class="line">  ))</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 组件更新函数</span></span><br><span class="line">  <span class="keyword">const</span> update = (instance.<span class="property">update</span> = <span class="function">() =&gt;</span> effect.<span class="title function_">run</span>())</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行更新</span></span><br><span class="line">  <span class="title function_">update</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、Composition-API-实现"><a href="#三、Composition-API-实现" class="headerlink" title="三、Composition API 实现"></a>三、Composition API 实现</h2><p>Composition API是Vue 3的一大特色，它提供了一种更灵活的组织组件逻辑的方式。</p><h3 id="3-1-setup函数"><a href="#3-1-setup函数" class="headerlink" title="3.1 setup函数"></a>3.1 setup函数</h3><p><code>setup</code>函数是Composition API的入口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/runtime-core/src/component.ts (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setupComponent</span>(<span class="params"></span></span><br><span class="line"><span class="params">  instance: ComponentInternalInstance,</span></span><br><span class="line"><span class="params">  isSSR = <span class="literal">false</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; props, children &#125; = instance.<span class="property">vnode</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 处理props</span></span><br><span class="line">  <span class="title function_">initProps</span>(instance, props, isSSR)</span><br><span class="line">  <span class="comment">// 处理slots</span></span><br><span class="line">  <span class="title function_">initSlots</span>(instance, children)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置有状态的组件</span></span><br><span class="line">  <span class="keyword">const</span> setupResult = <span class="title function_">setupStatefulComponent</span>(instance, isSSR)</span><br><span class="line">  <span class="keyword">return</span> setupResult</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setupStatefulComponent</span>(<span class="params"></span></span><br><span class="line"><span class="params">  instance: ComponentInternalInstance,</span></span><br><span class="line"><span class="params">  isSSR: boolean</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Component</span> = instance.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">ComponentOptions</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建渲染上下文代理</span></span><br><span class="line">  instance.<span class="property">proxy</span> = <span class="title function_">markRaw</span>(<span class="keyword">new</span> <span class="title class_">Proxy</span>(instance.<span class="property">ctx</span>, <span class="title class_">PublicInstanceProxyHandlers</span>))</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取setup函数</span></span><br><span class="line">  <span class="keyword">const</span> &#123; setup &#125; = <span class="title class_">Component</span></span><br><span class="line">  <span class="keyword">if</span> (setup) &#123;</span><br><span class="line">    <span class="comment">// 创建setup上下文</span></span><br><span class="line">    <span class="keyword">const</span> setupContext = (instance.<span class="property">setupContext</span> =</span><br><span class="line">      setup.<span class="property">length</span> &gt; <span class="number">1</span> ? <span class="title function_">createSetupContext</span>(instance) : <span class="literal">null</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置当前实例</span></span><br><span class="line">    <span class="title function_">setCurrentInstance</span>(instance)</span><br><span class="line">    <span class="comment">// 暂停依赖收集</span></span><br><span class="line">    <span class="title function_">pauseTracking</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用setup函数</span></span><br><span class="line">    <span class="keyword">const</span> setupResult = <span class="title function_">callWithErrorHandling</span>(</span><br><span class="line">      setup,</span><br><span class="line">      instance,</span><br><span class="line">      <span class="title class_">ErrorCodes</span>.<span class="property">SETUP_FUNCTION</span>,</span><br><span class="line">      [instance.<span class="property">props</span>, setupContext]</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 恢复依赖收集</span></span><br><span class="line">    <span class="title function_">resetTracking</span>()</span><br><span class="line">    <span class="comment">// 清除当前实例</span></span><br><span class="line">    <span class="title function_">unsetCurrentInstance</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理setup返回值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isPromise</span>(setupResult)) &#123;</span><br><span class="line">      <span class="comment">// 异步setup</span></span><br><span class="line">      setupResult.<span class="title function_">then</span>(unsetCurrentInstance, unsetCurrentInstance)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (isSSR) &#123;</span><br><span class="line">        <span class="comment">// 服务端渲染处理</span></span><br><span class="line">        <span class="keyword">return</span> setupResult</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">(<span class="params">resolvedResult</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">handleSetupResult</span>(instance, resolvedResult, isSSR)</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">handleError</span>(e, instance, <span class="title class_">ErrorCodes</span>.<span class="property">SETUP_FUNCTION</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 客户端异步组件处理</span></span><br><span class="line">        instance.<span class="property">asyncDep</span> = setupResult</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 同步setup</span></span><br><span class="line">      <span class="title function_">handleSetupResult</span>(instance, setupResult, isSSR)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 无setup函数，完成组件设置</span></span><br><span class="line">    <span class="title function_">finishComponentSetup</span>(instance, isSSR)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-核心Composition-API实现"><a href="#3-2-核心Composition-API实现" class="headerlink" title="3.2 核心Composition API实现"></a>3.2 核心Composition API实现</h3><h4 id="ref和reactive"><a href="#ref和reactive" class="headerlink" title="ref和reactive"></a>ref和reactive</h4><p>前面已经介绍过，这里不再重复。</p><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><p><code>computed</code>函数用于创建计算属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/reactivity/src/computed.ts (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> computed&lt;T&gt;(</span><br><span class="line">  <span class="attr">getterOrOptions</span>: <span class="title class_">ComputedGetter</span>&lt;T&gt; | <span class="title class_">WritableComputedOptions</span>&lt;T&gt;,</span><br><span class="line">  debugOptions?: <span class="title class_">DebuggerOptions</span>,</span><br><span class="line">  isSSR = <span class="literal">false</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">getter</span>: <span class="title class_">ComputedGetter</span>&lt;T&gt;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">setter</span>: <span class="title class_">ComputedSetter</span>&lt;T&gt;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 规范化参数</span></span><br><span class="line">  <span class="keyword">const</span> onlyGetter = <span class="title function_">isFunction</span>(getterOrOptions)</span><br><span class="line">  <span class="keyword">if</span> (onlyGetter) &#123;</span><br><span class="line">    getter = getterOrOptions</span><br><span class="line">    setter = <span class="variable constant_">NOOP</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getter = getterOrOptions.<span class="property">get</span></span><br><span class="line">    setter = getterOrOptions.<span class="property">set</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建计算属性实例</span></span><br><span class="line">  <span class="keyword">const</span> cRef = <span class="keyword">new</span> <span class="title class_">ComputedRefImpl</span>(getter, setter, onlyGetter || !setter, isSSR)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> cRef <span class="keyword">as</span> any</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputedRefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  public dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span></span><br><span class="line">  </span><br><span class="line">  private _value!: T</span><br><span class="line">  public readonly <span class="attr">effect</span>: <span class="title class_">ReactiveEffect</span>&lt;T&gt;</span><br><span class="line">  </span><br><span class="line">  public readonly __v_isRef = <span class="literal">true</span></span><br><span class="line">  public readonly [<span class="title class_">ReactiveFlags</span>.<span class="property">IS_READONLY</span>]: boolean = <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  public _dirty = <span class="literal">true</span></span><br><span class="line">  public <span class="attr">_cacheable</span>: boolean</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    getter: ComputedGetter&lt;T&gt;,</span></span><br><span class="line"><span class="params">    private readonly _setter: ComputedSetter&lt;T&gt;,</span></span><br><span class="line"><span class="params">    isReadonly: boolean,</span></span><br><span class="line"><span class="params">    isSSR: boolean</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="comment">// 创建effect</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span> = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 当依赖变化时，标记为脏</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 触发更新</span></span><br><span class="line">        <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="property">computed</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="property">active</span> = <span class="variable language_">this</span>.<span class="property">_cacheable</span> = !isSSR</span><br><span class="line">    <span class="variable language_">this</span>[<span class="title class_">ReactiveFlags</span>.<span class="property">IS_READONLY</span>] = isReadonly</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="comment">// 如果是可缓存的，且有依赖追踪</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="title function_">toRaw</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="comment">// 追踪依赖</span></span><br><span class="line">    <span class="title function_">trackRefValue</span>(self)</span><br><span class="line">    <span class="comment">// 如果脏或者不可缓存，重新计算</span></span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">_dirty</span> || !self.<span class="property">_cacheable</span>) &#123;</span><br><span class="line">      self.<span class="property">_dirty</span> = <span class="literal">false</span></span><br><span class="line">      self.<span class="property">_value</span> = self.<span class="property">effect</span>.<span class="title function_">run</span>()!</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> self.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_setter</span>(newValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="watch和watchEffect"><a href="#watch和watchEffect" class="headerlink" title="watch和watchEffect"></a>watch和watchEffect</h4><p><code>watch</code>和<code>watchEffect</code>用于监听响应式数据变化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/runtime-core/src/apiWatch.ts (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> watch&lt;T = any, <span class="title class_">Immediate</span> <span class="keyword">extends</span> <span class="title class_">Readonly</span>&lt;boolean&gt; = <span class="literal">false</span>&gt;(</span><br><span class="line">  <span class="attr">source</span>: T | <span class="title class_">WatchSource</span>&lt;T&gt;,</span><br><span class="line">  <span class="attr">cb</span>: any,</span><br><span class="line">  options?: <span class="title class_">WatchOptions</span>&lt;<span class="title class_">Immediate</span>&gt;</span><br><span class="line">): <span class="title class_">WatchStopHandle</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doWatch</span>(source <span class="keyword">as</span> any, cb, options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">watchEffect</span>(<span class="params"></span></span><br><span class="line"><span class="params">  effect: WatchEffect,</span></span><br><span class="line"><span class="params">  options?: WatchOptionsBase</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">WatchStopHandle</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doWatch</span>(effect, <span class="literal">null</span>, options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doWatch</span>(<span class="params"></span></span><br><span class="line"><span class="params">  source: WatchSource | WatchSource[] | WatchEffect | object,</span></span><br><span class="line"><span class="params">  cb: WatchCallback | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  &#123; immediate, deep, flush, onTrack, onTrigger &#125;: WatchOptions = EMPTY_OBJ</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">WatchStopHandle</span> &#123;</span><br><span class="line">  <span class="comment">// 处理source</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">getter</span>: <span class="function">() =&gt;</span> any</span><br><span class="line">  <span class="keyword">let</span> forceTrigger = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> isMultiSource = <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(source)) &#123;</span><br><span class="line">    <span class="comment">// ref类型</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> source.<span class="property">value</span></span><br><span class="line">    forceTrigger = <span class="title function_">isShallow</span>(source)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isReactive</span>(source)) &#123;</span><br><span class="line">    <span class="comment">// reactive类型</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> source</span><br><span class="line">    deep = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isArray</span>(source)) &#123;</span><br><span class="line">    <span class="comment">// 数组类型</span></span><br><span class="line">    isMultiSource = <span class="literal">true</span></span><br><span class="line">    forceTrigger = source.<span class="title function_">some</span>(<span class="function"><span class="params">s</span> =&gt;</span> <span class="title function_">isReactive</span>(s) || <span class="title function_">isShallow</span>(s))</span><br><span class="line">    getter = <span class="function">() =&gt;</span></span><br><span class="line">      source.<span class="title function_">map</span>(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isRef</span>(s)) &#123;</span><br><span class="line">          <span class="keyword">return</span> s.<span class="property">value</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isReactive</span>(s)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">traverse</span>(s)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(s)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">callWithErrorHandling</span>(s, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_GETTER</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> s</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(source)) &#123;</span><br><span class="line">    <span class="comment">// 函数类型</span></span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="comment">// watch(getter, cb)</span></span><br><span class="line">      getter = <span class="function">() =&gt;</span></span><br><span class="line">        <span class="title function_">callWithErrorHandling</span>(source, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_GETTER</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// watchEffect</span></span><br><span class="line">      getter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance &amp;&amp; instance.<span class="property">isUnmounted</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cleanup) &#123;</span><br><span class="line">          <span class="title function_">cleanup</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callWithAsyncErrorHandling</span>(</span><br><span class="line">          source,</span><br><span class="line">          instance,</span><br><span class="line">          <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_CALLBACK</span>,</span><br><span class="line">          [onCleanup]</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 无效source</span></span><br><span class="line">    getter = <span class="variable constant_">NOOP</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 处理deep选项</span></span><br><span class="line">  <span class="keyword">if</span> (cb &amp;&amp; deep) &#123;</span><br><span class="line">    <span class="keyword">const</span> baseGetter = getter</span><br><span class="line">    getter = <span class="function">() =&gt;</span> <span class="title function_">traverse</span>(<span class="title function_">baseGetter</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 清理函数</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">cleanup</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">onCleanup</span>: <span class="title class_">OnCleanup</span> = <span class="function">(<span class="params">fn: () =&gt; <span class="keyword">void</span></span>) =&gt;</span> &#123;</span><br><span class="line">    cleanup = effect.<span class="property">onStop</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">callWithErrorHandling</span>(fn, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_CLEANUP</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 旧值</span></span><br><span class="line">  <span class="keyword">let</span> oldValue = isMultiSource</span><br><span class="line">    ? <span class="keyword">new</span> <span class="title class_">Array</span>((source <span class="keyword">as</span> []).<span class="property">length</span>).<span class="title function_">fill</span>(<span class="variable constant_">INITIAL_WATCHER_VALUE</span>)</span><br><span class="line">    : <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 调度器函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">job</span>: <span class="title class_">SchedulerJob</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!effect.<span class="property">active</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="comment">// watch(source, cb)</span></span><br><span class="line">      <span class="keyword">const</span> newValue = effect.<span class="title function_">run</span>()</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        deep ||</span><br><span class="line">        forceTrigger ||</span><br><span class="line">        (isMultiSource</span><br><span class="line">          ? (newValue <span class="keyword">as</span> any[]).<span class="title function_">some</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span></span><br><span class="line">              <span class="title function_">hasChanged</span>(v, (oldValue <span class="keyword">as</span> any[])[i])</span><br><span class="line">            )</span><br><span class="line">          : <span class="title function_">hasChanged</span>(newValue, oldValue))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// 清理旧的副作用</span></span><br><span class="line">        <span class="keyword">if</span> (cleanup) &#123;</span><br><span class="line">          <span class="title function_">cleanup</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用回调</span></span><br><span class="line">        <span class="title function_">callWithAsyncErrorHandling</span>(cb, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_CALLBACK</span>, [</span><br><span class="line">          newValue,</span><br><span class="line">          oldValue === <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line">            ? <span class="literal">undefined</span></span><br><span class="line">            : isMultiSource &amp;&amp; oldValue[<span class="number">0</span>] === <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line">            ? []</span><br><span class="line">            : oldValue,</span><br><span class="line">          onCleanup</span><br><span class="line">        ])</span><br><span class="line">        <span class="comment">// 更新旧值</span></span><br><span class="line">        oldValue = newValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// watchEffect</span></span><br><span class="line">      effect.<span class="title function_">run</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置调度器优先级</span></span><br><span class="line">  job.<span class="property">allowRecurse</span> = !!cb</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 根据flush选项设置调度器</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">scheduler</span>: <span class="title class_">EffectScheduler</span></span><br><span class="line">  <span class="keyword">if</span> (flush === <span class="string">&#x27;sync&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 同步调度</span></span><br><span class="line">    scheduler = job <span class="keyword">as</span> any</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flush === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 后置调度（组件更新后）</span></span><br><span class="line">    scheduler = <span class="function">() =&gt;</span> <span class="title function_">queuePostRenderEffect</span>(job, instance &amp;&amp; instance.<span class="property">suspense</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 默认：&#x27;pre&#x27;，前置调度（组件更新前）</span></span><br><span class="line">    job.<span class="property">pre</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (instance) job.<span class="property">id</span> = instance.<span class="property">uid</span></span><br><span class="line">    scheduler = <span class="function">() =&gt;</span> <span class="title function_">queueJob</span>(job)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建effect</span></span><br><span class="line">  <span class="keyword">const</span> effect = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter, scheduler)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 初始运行</span></span><br><span class="line">  <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="title function_">job</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      oldValue = effect.<span class="title function_">run</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flush === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">queuePostRenderEffect</span>(</span><br><span class="line">      effect.<span class="property">run</span>.<span class="title function_">bind</span>(effect),</span><br><span class="line">      instance &amp;&amp; instance.<span class="property">suspense</span></span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    effect.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 返回停止函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    effect.<span class="title function_">stop</span>()</span><br><span class="line">    <span class="keyword">if</span> (instance &amp;&amp; instance.<span class="property">scope</span>) &#123;</span><br><span class="line">      <span class="title function_">remove</span>(instance.<span class="property">scope</span>.<span class="property">effects</span>!, effect)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、编译优化"><a href="#四、编译优化" class="headerlink" title="四、编译优化"></a>四、编译优化</h2><p>Vue 3在编译阶段引入了许多优化，提高了渲染性能。</p><h3 id="4-1-静态提升"><a href="#4-1-静态提升" class="headerlink" title="4.1 静态提升"></a>4.1 静态提升</h3><p>静态提升是指将静态节点提升到渲染函数之外，避免重复创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译前的模板</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span>&gt;</span>Static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; dynamic &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 2编译后的渲染函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;static&#x27;</span> &#125;, <span class="string">&#x27;Static&#x27;</span>),</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="variable language_">this</span>.<span class="property">dynamic</span>)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 3编译后的渲染函数（带静态提升）</span></span><br><span class="line"><span class="keyword">const</span> hoisted = <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;static&#x27;</span> &#125;, <span class="string">&#x27;Static&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    hoisted,</span><br><span class="line">    <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, ctx.<span class="property">dynamic</span>)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-补丁标记-PatchFlags"><a href="#4-2-补丁标记-PatchFlags" class="headerlink" title="4.2 补丁标记 (PatchFlags)"></a>4.2 补丁标记 (PatchFlags)</h3><p>补丁标记用于标识动态内容的类型，优化更新性能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译前的模板</span></span><br><span class="line">&lt;div id=<span class="string">&quot;foo&quot;</span> :<span class="keyword">class</span>=<span class="string">&quot;cls&quot;</span>&gt;&#123;&#123; text &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 3编译后的渲染函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, </span><br><span class="line">    &#123; </span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;foo&#x27;</span>, </span><br><span class="line">      <span class="attr">class</span>: ctx.<span class="property">cls</span> <span class="comment">// 动态class</span></span><br><span class="line">    &#125;, </span><br><span class="line">    ctx.<span class="property">text</span>,       <span class="comment">// 动态文本</span></span><br><span class="line">    <span class="title class_">PatchFlags</span>.<span class="property">CLASS</span> | <span class="title class_">PatchFlags</span>.<span class="property">TEXT</span> <span class="comment">// 补丁标记</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-块树-Block-Tree"><a href="#4-3-块树-Block-Tree" class="headerlink" title="4.3 块树 (Block Tree)"></a>4.3 块树 (Block Tree)</h3><p>块树是Vue 3引入的新概念，用于跟踪动态子节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译前的模板</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>Conditional<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 3编译后的渲染函数（简化）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createBlock</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, [</span><br><span class="line">    <span class="title function_">createVNode</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Static&#x27;</span>),</span><br><span class="line">    (ctx.<span class="property">show</span>)</span><br><span class="line">      ? <span class="title function_">createVNode</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Conditional&#x27;</span>, <span class="title class_">PatchFlags</span>.<span class="property">DYNAMIC</span>)</span><br><span class="line">      : <span class="title function_">createCommentVNode</span>(<span class="string">&#x27;v-if&#x27;</span>),</span><br><span class="line">    <span class="title function_">renderList</span>(ctx.<span class="property">list</span>, <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">createVNode</span>(<span class="string">&#x27;div&#x27;</span>, <span class="literal">null</span>, item, <span class="title class_">PatchFlags</span>.<span class="property">TEXT</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ], <span class="title class_">PatchFlags</span>.<span class="property">STABLE_FRAGMENT</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Vue 3源码的核心亮点：</p><ol><li><strong>响应式系统</strong>：基于Proxy的全新响应式系统，提供了更好的性能和更完整的响应式覆盖</li><li><strong>组合式API</strong>：提供了更灵活的逻辑组织方式，解决了选项式API的限制</li><li><strong>编译优化</strong>：静态提升、补丁标记、块树等优化大幅提升了渲染性能</li><li><strong>TypeScript支持</strong>：源码完全用TypeScript重写，提供了更好的类型推导</li><li><strong>模块化设计</strong>：采用monorepo管理，各个模块可以独立使用</li></ol><p>Vue 3的源码设计体现了现代前端框架的最佳实践，通过深入理解其实现原理，可以更好地使用Vue 3进行开发。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;p&gt;Vue 3的源码采用monorepo的方式组织，使用pnpm进行包管理，主要包含以下核心模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reactivity&lt;/strong&gt;: 响应式系统&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;runtime-core&lt;/strong&gt;: 与平台无关的运行时核心&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;runtime-dom&lt;/strong&gt;: 浏览器平台特定的运行时&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compiler-core&lt;/strong&gt;: 与平台无关的编译器核心&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compiler-dom&lt;/strong&gt;: 浏览器平台特定的编译器实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compiler-sfc&lt;/strong&gt;: 单文件组件(.vue文件)编译器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shared&lt;/strong&gt;: 共享工具函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vue&lt;/strong&gt;: 完整版本，包含运行时和编译器&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Vue 3 源码解读" scheme="http://blog.ypintao.com/categories/Vue-3-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
    
    <category term="Vue 3 源码解读" scheme="http://blog.ypintao.com/tags/Vue-3-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>webpack 插件如何编写</title>
    <link href="http://blog.ypintao.com/2024/04/01/webpack%20%E6%8F%92%E4%BB%B6%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99/"/>
    <id>http://blog.ypintao.com/2024/04/01/webpack%20%E6%8F%92%E4%BB%B6%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99/</id>
    <published>2024-04-01T04:00:00.000Z</published>
    <updated>2025-09-25T01:26:55.687Z</updated>
    
    <content type="html"><![CDATA[<p>编写 Webpack 插件可以帮助你在 Webpack 构建过程中添加自定义行为。Webpack 插件是一个具有 apply 方法的 JavaScript 对象。这个 apply 方法会在 Webpack 编译器实例上被调用，并且你可以通过这个方法来访问 Webpack 的编译器对象，从而在特定的编译阶段插入自定义逻辑。   下面是一个简单的步骤指南和示例代码，帮助你编写一个基本的 Webpack 插件。<br>步骤指南<br>创建插件对象：创建一个 JavaScript 对象，并定义一个 apply 方法。<br>访问编译器对象：在 apply 方法中，通过参数访问 Webpack 编译器对象。<br>绑定钩子：使用编译器对象提供的钩子来绑定你的插件逻辑。<br>导出插件：将你的插件对象导出，以便在 Webpack 配置中使用。<br>示例代码<br>假设我们要编写一个简单的插件，在 Webpack 构建完成后输出一条消息到控制台。<br>创建插件文件   首先，创建一个文件 MyWebpackPlugin.js，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;./MyWebpackPlugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MyWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;自定义构建消息：构建成功！&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>详细说明<br>插件对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyWebpackPlugin</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">    compiler.<span class="property">hooks</span>.<span class="property">done</span>.<span class="title function_">tap</span>(<span class="string">&#x27;MyWebpackPlugin&#x27;</span>, <span class="function">(<span class="params">stats</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Webpack 构建完成！&#x27;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`构建时间: <span class="subst">$&#123;stats.endTime - stats.startTime&#125;</span> ms`</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">message</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数：用于接收配置选项。<br>apply 方法：这是插件的核心方法。它会在 Webpack 编译器实例上被调用，并且你可以通过参数访问编译器对象。<br>绑定钩子：在这个例子中，我们使用了 compiler.hooks.done.tap 来绑定到 Webpack 的 done 钩子。done 钩子在构建完成时触发。tap 方法的第一个参数是插件的名称，第二个参数是一个回调函数，这个回调函数会在钩子触发时执行</p><p>使用插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;./MyWebpackPlugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MyWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;自定义构建消息：构建成功！&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>引入插件：使用 require 引入你编写的插件。<br>配置插件：在 plugins 数组中实例化你的插件，并传入配置选项。<br>更多钩子<br>Webpack 提供了许多不同的钩子，可以在不同的编译阶段插入自定义逻辑。以下是一些常用的钩子：<br>compiler.hooks.compile：在编译开始时触发。<br>compiler.hooks.emit：在生成文件之前触发，可以用来修改生成的文件内容。<br>compiler.hooks.done：在编译完成时触发。<br>compilation.hooks.moduleIds：在模块 ID 分配时触发。<br>compilation.hooks.chunkIds：在 chunk ID 分配时触发。<br>compilation.hooks.optimizeDependencies：在优化依赖时触发。<br>你可以根据需要选择合适的钩子来实现你的插件功能。<br>总结<br>编写 Webpack 插件的基本步骤包括创建插件对象、定义 apply 方法、访问编译器对象、绑定钩子以及导出插件。通过这些步骤，你可以为 Webpack 构建过程添加各种自定义行为，从而更好地满足项目的特定需求</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编写 Webpack 插件可以帮助你在 Webpack 构建过程中添加自定义行为。Webpack 插件是一个具有 apply 方法的 JavaScript 对象。这个 apply 方法会在 Webpack 编译器实例上被调用，并且你可以通过这个方法来访问 Webpack 的</summary>
      
    
    
    
    <category term="webpack" scheme="http://blog.ypintao.com/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://blog.ypintao.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题集</title>
    <link href="http://blog.ypintao.com/2023/03/02/%E9%9D%A2%E8%AF%95/"/>
    <id>http://blog.ypintao.com/2023/03/02/%E9%9D%A2%E8%AF%95/</id>
    <published>2023-03-02T04:00:00.000Z</published>
    <updated>2025-09-25T02:28:31.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配问题"><a href="#适配问题" class="headerlink" title="适配问题"></a>适配问题</h2><h2 id="react相关问题"><a href="#react相关问题" class="headerlink" title="react相关问题"></a>react相关问题</h2><h2 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h2><h2 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h2><h2 id="兼容性问题"><a href="#兼容性问题" class="headerlink" title="兼容性问题"></a>兼容性问题</h2><h2 id="工程化问题"><a href="#工程化问题" class="headerlink" title="工程化问题"></a>工程化问题</h2><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><h3 id="移动端适配问题。"><a href="#移动端适配问题。" class="headerlink" title="移动端适配问题。"></a>移动端适配问题。</h3><h2 id="createElement-和-cloneElement-有什么区别？"><a href="#createElement-和-cloneElement-有什么区别？" class="headerlink" title="createElement 和 cloneElement 有什么区别？"></a>createElement 和 cloneElement 有什么区别？</h2><p>传入的第一个参数不同</p><p>React.createElement():JSX 语法就是用 React.createElement()来构建 React 元素的。</p><p>它接受三个参数，第一个参数可以是一个标签名。如 div、span，或者 React 组件。第二个参数为传入的属性。第三个以及之后的参数，皆作为组件的子组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(type, [props], [...children]);</span><br></pre></td></tr></table></figure><p>React.cloneElement()与 React.createElement()相似，不同的是它传入的第一个参数是一个 React 元素，而不是标签名或组件。新添加的属性会并入原有的属性，传入到返回的新元素中，而旧的子元素将被替换。将保留原始元素的键和引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">cloneElement</span>(element, [props], [...children]);</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="1、react-父组件怎么调用子组件的方法"><a href="#1、react-父组件怎么调用子组件的方法" class="headerlink" title="1、react 父组件怎么调用子组件的方法"></a>1、react 父组件怎么调用子组件的方法</h2><p>‌函数组件使用 forwardRef+useImperativeHandle‌：子组件通过useImperativeHandle暴露方法，父组件通过ref调用</p><h2 id="2、react-useEffect-依赖项数组为空-或者不写数组有啥区别"><a href="#2、react-useEffect-依赖项数组为空-或者不写数组有啥区别" class="headerlink" title="2、react useEffect 依赖项数组为空 或者不写数组有啥区别"></a>2、react useEffect 依赖项数组为空 或者不写数组有啥区别</h2><p>空数组[]‌：仅在挂载时执行一次，卸载时清理<br>‌不传数组‌：每次渲染后都会执行<br>‌含依赖项‌：依赖变化时执行MCP_3]^</p><p>1、react性能优化<br>1.1、useMemo<br>1.2、useCallback</p><ol start="2"><li>useLayoutEffect () 与 useEffect () 的区别<br>useLayoutEffect会阻塞浏览器渲染，useEffect不会<br>useEffect()：异步执行，DOM 更新后触发（适合大多数副作用）。<br>useLayoutEffect()：同步执行，DOM 更新前触发（适合需要测量 DOM 的场景）。</li></ol><p>React.memo缓存组件，避免无意义重新渲染<br>useMemo&#x2F;useCallback缓存函数或计算结果</p><h2 id="3、usecontext-有什么作用和缺点"><a href="#3、usecontext-有什么作用和缺点" class="headerlink" title="3、usecontext,有什么作用和缺点"></a>3、usecontext,有什么作用和缺点</h2><p>优点‌：<br>跨组件层级共享状态<br>避免prop drilling<br>‌缺点‌：<br>状态更新会导致所有消费者重新渲染<br>不适合高频更新的场景MCP_3]^</p><h2 id="4、react组件逻辑服用怎么弄。"><a href="#4、react组件逻辑服用怎么弄。" class="headerlink" title="4、react组件逻辑服用怎么弄。"></a>4、react组件逻辑服用怎么弄。</h2><p>React组件逻辑复用<br>‌自定义Hooks‌：提取通用逻辑为可复用函数<br>‌HOC高阶组件‌：通过组件包装增强功能<br>‌Render Props‌：通过函数prop共享代码<br>‌Context API‌：跨层级状态共享MCP_3]^</p><h3 id="5、React-Hooks-的作用和常用-Hook-有哪些？"><a href="#5、React-Hooks-的作用和常用-Hook-有哪些？" class="headerlink" title="5、React Hooks 的作用和常用 Hook 有哪些？"></a>5、React Hooks 的作用和常用 Hook 有哪些？</h3><p><strong>答案</strong>：<br>React Hooks 是 React 16.8 引入的特性，允许在函数组件中使用状态和其他 React 特性，而不需要编写类组件。</p><p><strong>作用</strong>：</p><ul><li>在函数组件中使用状态和生命周期特性</li><li>复用状态逻辑，而不需要改变组件层次结构</li><li>将相关逻辑组合在一起，而不是按生命周期方法分散</li></ul><p><strong>常用的 Hook</strong>：</p><ul><li><strong>useState</strong>：管理组件状态</li><li><strong>useEffect</strong>：处理副作用（类似 componentDidMount、componentDidUpdate、componentWillUnmount）</li><li><strong>useContext</strong>：访问 React Context</li><li><strong>useReducer</strong>：使用 reducer 管理复杂状态逻辑</li><li><strong>useCallback</strong>：记忆函数，避免不必要的重新渲染</li><li><strong>useMemo</strong>：记忆计算结果，避免重复计算</li><li><strong>useRef</strong>：保存可变值，不触发重新渲染</li></ul><h3 id="状态管理工具（Redux-Vuex-Pinia）的核心概念和工作原理"><a href="#状态管理工具（Redux-Vuex-Pinia）的核心概念和工作原理" class="headerlink" title="状态管理工具（Redux&#x2F;Vuex&#x2F;Pinia）的核心概念和工作原理"></a>状态管理工具（Redux&#x2F;Vuex&#x2F;Pinia）的核心概念和工作原理</h3><p><strong>答案</strong>：<br>状态管理工具用于集中管理应用的状态，使状态变化可预测和可追踪。</p><p><strong>Redux（React）核心概念</strong>：</p><ul><li><strong>Store</strong>：存储应用的状态</li><li><strong>Action</strong>：描述状态变化的普通对象</li><li><strong>Reducer</strong>：纯函数，根据当前状态和 action 计算新状态</li><li><strong>Dispatch</strong>：发送 action 的方法</li><li><strong>Middleware</strong>：扩展 Redux 功能的中间件（如处理异步操作）</li></ul><h3 id="6、闭包是什么？有什么用途和潜在问题？"><a href="#6、闭包是什么？有什么用途和潜在问题？" class="headerlink" title="6、闭包是什么？有什么用途和潜在问题？"></a>6、闭包是什么？有什么用途和潜在问题？</h3><p><strong>答案</strong>：<br>闭包是指一个函数可以记住并访问其词法作用域，即使该函数在其词法作用域之外执行。</p><p><strong>用途</strong>：</p><ul><li>数据私有化&#x2F;封装</li><li>创建函数工厂</li><li>实现模块模式</li><li>维持状态</li></ul><p><strong>潜在问题</strong>：</p><ul><li>内存泄漏：闭包会保持对外部变量的引用，可能导致这些变量无法被垃圾回收</li><li>性能问题：过度使用闭包可能影响性能</li></ul><p> 解释 JavaScript 中的原型和原型链<br><strong>答案</strong>：<br>JavaScript 中的每个对象都有一个原型（prototype），原型也是一个对象，对象可以从原型继承属性和方法。</p><ul><li><strong>原型</strong>：每个函数都有一个 <code>prototype</code> 属性，指向一个对象，这个对象就是该函数的实例的原型</li><li><strong>原型链</strong>：当访问一个对象的属性时，如果对象本身没有这个属性，JavaScript 会沿着原型链向上查找，直到找到该属性或到达原型链的末端（<code>null</code>）</li></ul><h3 id="解释事件循环（Event-Loop）机制"><a href="#解释事件循环（Event-Loop）机制" class="headerlink" title="解释事件循环（Event Loop）机制"></a>解释事件循环（Event Loop）机制</h3><p><strong>答案</strong>：<br>JavaScript 是单线程的，事件循环是 JavaScript 实现异步的核心机制，它由以下部分组成：</p><ul><li><strong>调用栈（Call Stack）</strong>：执行同步代码</li><li><strong>任务队列（Task Queue）</strong>：<ul><li><strong>宏任务（Macrotask）</strong>：setTimeout、setInterval、I&#x2F;O、UI 渲染等</li><li><strong>微任务（Microtask）</strong>：Promise 回调、MutationObserver、queueMicrotask() 等</li></ul></li></ul><p>事件循环的执行顺序：</p><ol><li>执行同步代码（调用栈中的任务）</li><li>执行所有微任务</li><li>执行一个宏任务</li><li>重复步骤 2-3</li></ol><pre><code class="language-javascript"></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;适配问题&quot;&gt;&lt;a href=&quot;#适配问题&quot; class=&quot;headerlink&quot; title=&quot;适配问题&quot;&gt;&lt;/a&gt;适配问题&lt;/h2&gt;&lt;h2 id=&quot;react相关问题&quot;&gt;&lt;a href=&quot;#react相关问题&quot; class=&quot;headerlink&quot; title=&quot;react相关问题&quot;&gt;&lt;/a&gt;react相关问题&lt;/h2&gt;&lt;h2 id=&quot;网络问题&quot;&gt;&lt;a href=&quot;#网络问题&quot; class=&quot;headerlink&quot; title=&quot;网络问题&quot;&gt;&lt;/a&gt;网络问题&lt;/h2&gt;&lt;h2 id=&quot;性能问题&quot;&gt;&lt;a href=&quot;#性能问题&quot; class=&quot;headerlink&quot; title=&quot;性能问题&quot;&gt;&lt;/a&gt;性能问题&lt;/h2&gt;&lt;h2 id=&quot;兼容性问题&quot;&gt;&lt;a href=&quot;#兼容性问题&quot; class=&quot;headerlink&quot; title=&quot;兼容性问题&quot;&gt;&lt;/a&gt;兼容性问题&lt;/h2&gt;&lt;h2 id=&quot;工程化问题&quot;&gt;&lt;a href=&quot;#工程化问题&quot; class=&quot;headerlink&quot; title=&quot;工程化问题&quot;&gt;&lt;/a&gt;工程化问题&lt;/h2&gt;&lt;h2 id=&quot;安全问题&quot;&gt;&lt;a href=&quot;#安全问题&quot; class=&quot;headerlink&quot; title=&quot;安全问题&quot;&gt;&lt;/a&gt;安全问题&lt;/h2&gt;&lt;h3 id=&quot;移动端适配问题。&quot;&gt;&lt;a href=&quot;#移动端适配问题。&quot; class=&quot;headerlink&quot; title=&quot;移动端适配问题。&quot;&gt;&lt;/a&gt;移动端适配问题。&lt;/h3&gt;&lt;h2 id=&quot;createElement-和-cloneElement-有什么区别？&quot;&gt;&lt;a href=&quot;#createElement-和-cloneElement-有什么区别？&quot; class=&quot;headerlink&quot; title=&quot;createElement 和 cloneElement 有什么区别？&quot;&gt;&lt;/a&gt;createElement 和 cloneElement 有什么区别？&lt;/h2&gt;&lt;p&gt;传入的第一个参数不同&lt;/p&gt;
&lt;p&gt;React.createElement():JSX 语法就是用 React.createElement()来构建 React 元素的。&lt;/p&gt;
&lt;p&gt;它接受三个参数，第一个参数可以是一个标签名。如 div、span，或者 React 组件。第二个参数为传入的属性。第三个以及之后的参数，皆作为组件的子组件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;createElement&lt;/span&gt;(type, [props], [...children]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;React.cloneElement()与 React.createElement()相似，不同的是它传入的第一个参数是一个 React 元素，而不是标签名或组件。新添加的属性会并入原有的属性，传入到返回的新元素中，而旧的子元素将被替换。将保留原始元素的键和引用。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title class_&quot;&gt;React&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;cloneElement&lt;/span&gt;(element, [props], [...children]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端面试题集" scheme="http://blog.ypintao.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="前端面试题集" scheme="http://blog.ypintao.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题集</title>
    <link href="http://blog.ypintao.com/2022/03/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://blog.ypintao.com/2022/03/02/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-03-02T04:00:00.000Z</published>
    <updated>2025-09-21T17:12:56.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h2><h3 id="1-解释-JavaScript-中的原型和原型链"><a href="#1-解释-JavaScript-中的原型和原型链" class="headerlink" title="1. 解释 JavaScript 中的原型和原型链"></a>1. 解释 JavaScript 中的原型和原型链</h3><p><strong>答案</strong>：<br>JavaScript 中的每个对象都有一个原型（prototype），原型也是一个对象，对象可以从原型继承属性和方法。</p><ul><li><strong>原型</strong>：每个函数都有一个 <code>prototype</code> 属性，指向一个对象，这个对象就是该函数的实例的原型</li><li><strong>原型链</strong>：当访问一个对象的属性时，如果对象本身没有这个属性，JavaScript 会沿着原型链向上查找，直到找到该属性或到达原型链的末端（<code>null</code>）</li></ul><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> alice = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">alice.<span class="title function_">sayHello</span>(); <span class="comment">// &quot;Hello, my name is Alice&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型链示例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alice.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="2-var、let-和-const-的区别是什么？"><a href="#2-var、let-和-const-的区别是什么？" class="headerlink" title="2. var、let 和 const 的区别是什么？"></a>2. var、let 和 const 的区别是什么？</h3><p><strong>答案</strong>：</p><ul><li><p><strong>var</strong>：</p><ul><li>函数作用域或全局作用域</li><li>存在变量提升（可以在声明前使用，值为 undefined）</li><li>可以重复声明同名变量</li><li>可以重新赋值</li></ul></li><li><p><strong>let</strong>：</p><ul><li>块级作用域</li><li>存在暂时性死区（不能在声明前使用）</li><li>不可以重复声明同名变量</li><li>可以重新赋值</li></ul></li><li><p><strong>const</strong>：</p><ul><li>块级作用域</li><li>存在暂时性死区（不能在声明前使用）</li><li>不可以重复声明同名变量</li><li>不可以重新赋值（但对于引用类型，可以修改其属性）</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 示例</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">2</span>; <span class="comment">// 同一个变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let 示例</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">2</span>; <span class="comment">// 不同的变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const 示例</span></span><br><span class="line"><span class="keyword">const</span> z = &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;;</span><br><span class="line">z.<span class="property">value</span> = <span class="number">2</span>; <span class="comment">// 可以修改属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z.<span class="property">value</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// z = &#123; value: 3 &#125;; // 错误：不能重新赋值</span></span><br></pre></td></tr></table></figure><h3 id="3-解释事件循环（Event-Loop）机制"><a href="#3-解释事件循环（Event-Loop）机制" class="headerlink" title="3. 解释事件循环（Event Loop）机制"></a>3. 解释事件循环（Event Loop）机制</h3><p><strong>答案</strong>：<br>JavaScript 是单线程的，事件循环是 JavaScript 实现异步的核心机制，它由以下部分组成：</p><ul><li><strong>调用栈（Call Stack）</strong>：执行同步代码</li><li><strong>任务队列（Task Queue）</strong>：<ul><li><strong>宏任务（Macrotask）</strong>：setTimeout、setInterval、I&#x2F;O、UI 渲染等</li><li><strong>微任务（Microtask）</strong>：Promise 回调、MutationObserver、queueMicrotask() 等</li></ul></li></ul><p>事件循环的执行顺序：</p><ol><li>执行同步代码（调用栈中的任务）</li><li>执行所有微任务</li><li>执行一个宏任务</li><li>重复步骤 2-3</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>); <span class="comment">// 同步代码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>); <span class="comment">// 宏任务</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>); <span class="comment">// 微任务</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>); <span class="comment">// 同步代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：1, 4, 3, 2</span></span><br></pre></td></tr></table></figure><h3 id="4-闭包是什么？有什么用途和潜在问题？"><a href="#4-闭包是什么？有什么用途和潜在问题？" class="headerlink" title="4. 闭包是什么？有什么用途和潜在问题？"></a>4. 闭包是什么？有什么用途和潜在问题？</h3><p><strong>答案</strong>：<br>闭包是指一个函数可以记住并访问其词法作用域，即使该函数在其词法作用域之外执行。</p><p><strong>用途</strong>：</p><ul><li>数据私有化&#x2F;封装</li><li>创建函数工厂</li><li>实现模块模式</li><li>维持状态</li></ul><p><strong>潜在问题</strong>：</p><ul><li>内存泄漏：闭包会保持对外部变量的引用，可能导致这些变量无法被垃圾回收</li><li>性能问题：过度使用闭包可能影响性能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包示例 - 计数器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 私有变量</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      count++;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      count--;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getCount</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">createCounter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">increment</span>()); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">increment</span>()); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(counter.<span class="title function_">decrement</span>()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="5-Promise、async-await-的作用和区别"><a href="#5-Promise、async-await-的作用和区别" class="headerlink" title="5. Promise、async&#x2F;await 的作用和区别"></a>5. Promise、async&#x2F;await 的作用和区别</h3><p><strong>答案</strong>：<br>Promise 和 async&#x2F;await 都是用于处理 JavaScript 中的异步操作。</p><p><strong>Promise</strong>：</p><ul><li>表示一个异步操作的最终完成（或失败）及其结果值</li><li>有三种状态：pending（进行中）、fulfilled（已成功）、rejected（已失败）</li><li>使用 <code>.then()</code> 和 <code>.catch()</code> 方法处理结果和错误</li></ul><p><strong>async&#x2F;await</strong>：</p><ul><li>是基于 Promise 的语法糖</li><li><code>async</code> 函数返回一个 Promise</li><li><code>await</code> 关键字只能在 <code>async</code> 函数内使用，用于等待 Promise 解决</li><li>使代码看起来更像同步代码，更易读</li></ul><p><strong>区别</strong>：</p><ul><li>语法：async&#x2F;await 语法更简洁，更接近同步代码</li><li>错误处理：Promise 使用 <code>.catch()</code>，async&#x2F;await 使用 try&#x2F;catch</li><li>调试：async&#x2F;await 更容易调试</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise 示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fetchDataPromise</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async/await 示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML &amp; CSS"></a>HTML &amp; CSS</h2><h3 id="6-语义化-HTML-的意义是什么？"><a href="#6-语义化-HTML-的意义是什么？" class="headerlink" title="6. 语义化 HTML 的意义是什么？"></a>6. 语义化 HTML 的意义是什么？</h3><p><strong>答案</strong>：<br>语义化 HTML 是指使用恰当的 HTML 标签来表示内容的结构和含义，而不仅仅是为了展示效果。</p><p><strong>意义</strong>：</p><ul><li><strong>可访问性</strong>：屏幕阅读器等辅助技术可以更好地解释页面内容</li><li><strong>SEO 优化</strong>：搜索引擎更容易理解页面内容和结构</li><li><strong>可维护性</strong>：代码更清晰，易于理解和维护</li><li><strong>设备兼容性</strong>：在不同设备上有更好的展示效果</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非语义化的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span>网站名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 语义化的写法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>网站名称<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-解释-CSS-盒模型及其不同类型"><a href="#7-解释-CSS-盒模型及其不同类型" class="headerlink" title="7. 解释 CSS 盒模型及其不同类型"></a>7. 解释 CSS 盒模型及其不同类型</h3><p><strong>答案</strong>：<br>CSS 盒模型描述了元素内容（content）、内边距（padding）、边框（border）和外边距（margin）如何一起决定元素的总尺寸。</p><p><strong>两种盒模型</strong>：</p><ul><li><p><strong>标准盒模型（content-box）</strong>：</p><ul><li><code>width</code> 和 <code>height</code> 只包括内容区域</li><li>总宽度 &#x3D; width + padding + border + margin</li></ul></li><li><p><strong>替代盒模型（border-box）</strong>：</p><ul><li><code>width</code> 和 <code>height</code> 包括内容区域、内边距和边框</li><li>总宽度 &#x3D; width + margin（width 已经包含了 padding 和 border）</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 标准盒模型（默认） */</span></span><br><span class="line"><span class="selector-class">.box-content</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="comment">/* 总宽度 = 300px + 40px(padding) + 20px(border) + 30px(margin) = 390px */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 替代盒模型 */</span></span><br><span class="line"><span class="selector-class">.box-border</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="comment">/* 总宽度 = 300px + 30px(margin) = 330px */</span></span><br><span class="line">  <span class="comment">/* 内容区实际宽度 = 300px - 40px(padding) - 20px(border) = 240px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-CSS-选择器的优先级是如何计算的？"><a href="#8-CSS-选择器的优先级是如何计算的？" class="headerlink" title="8. CSS 选择器的优先级是如何计算的？"></a>8. CSS 选择器的优先级是如何计算的？</h3><p><strong>答案</strong>：<br>CSS 选择器的优先级按照以下规则计算：</p><ol><li><strong>内联样式</strong>：1000 分</li><li><strong>ID 选择器</strong>：100 分</li><li><strong>类选择器、属性选择器、伪类</strong>：10 分</li><li><strong>元素选择器、伪元素</strong>：1 分</li><li><strong>通配符（*）</strong>：0 分</li><li><strong>继承的样式</strong>：无优先级</li></ol><p>当优先级相同时，后声明的样式会覆盖先声明的样式。<br>使用 <code>!important</code> 可以覆盖所有其他样式（除非对方也使用了 <code>!important</code>，此时仍按优先级计算）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 优先级: 1 (元素选择器) */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 优先级: 10 (类选择器) */</span></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 优先级: 11 (类选择器 + 元素选择器) */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 优先级: 110 (ID选择器 + 元素选择器) */</span></span><br><span class="line"><span class="selector-id">#content</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 优先级: 10 (类选择器)，但使用 !important */</span></span><br><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow <span class="meta">!important</span>; <span class="comment">/* 会覆盖上面所有规则 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-响应式设计的核心原则和实现方法有哪些？"><a href="#9-响应式设计的核心原则和实现方法有哪些？" class="headerlink" title="9. 响应式设计的核心原则和实现方法有哪些？"></a>9. 响应式设计的核心原则和实现方法有哪些？</h3><p><strong>答案</strong>：<br>响应式设计是一种让网站能够适应不同设备和屏幕尺寸的设计方法。</p><p><strong>核心原则</strong>：</p><ul><li><strong>流式布局</strong>：使用相对单位（%、em、rem）而非固定单位（px）</li><li><strong>媒体查询</strong>：根据设备特性应用不同的样式</li><li><strong>灵活的图片</strong>：确保图片能够缩放而不溢出容器</li><li><strong>移动优先</strong>：先设计移动端界面，再逐步增强到大屏幕</li></ul><p><strong>实现方法</strong>：</p><ul><li>使用媒体查询（@media）</li><li>使用 viewport 元标签</li><li>使用 CSS Grid 和 Flexbox 布局</li><li>使用相对单位（%、em、rem、vw、vh）</li><li>使用响应式图片技术（srcset、sizes 属性）</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- viewport 设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 流式布局 */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 响应式图片 */</span></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 媒体查询 */</span></span><br><span class="line"><span class="comment">/* 移动设备 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.main-content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 平板设备 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1023px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.main-content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 桌面设备 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.main-content</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-解释-CSS-Grid-和-Flexbox-的区别及适用场景"><a href="#10-解释-CSS-Grid-和-Flexbox-的区别及适用场景" class="headerlink" title="10. 解释 CSS Grid 和 Flexbox 的区别及适用场景"></a>10. 解释 CSS Grid 和 Flexbox 的区别及适用场景</h3><p><strong>答案</strong>：<br>CSS Grid 和 Flexbox 都是现代 CSS 布局技术，但它们有不同的设计目标和适用场景。</p><p><strong>Flexbox（弹性盒子）</strong>：</p><ul><li><strong>一维布局系统</strong>：主要沿一个轴（主轴或交叉轴）进行布局</li><li><strong>内容驱动</strong>：元素大小由其内容决定</li><li><strong>适用场景</strong>：导航菜单、卡片布局、居中元素、简单的一维布局</li></ul><p><strong>CSS Grid（网格布局）</strong>：</p><ul><li><strong>二维布局系统</strong>：同时控制行和列</li><li><strong>布局驱动</strong>：先定义布局结构，再放入元素</li><li><strong>适用场景</strong>：整体页面布局、复杂的二维布局、不规则布局</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Flexbox 示例 - 导航菜单 */</span></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nav-item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">1</span> auto;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS Grid 示例 - 页面布局 */</span></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">3</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto <span class="number">1</span>fr auto;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;header header header&quot;</span></span><br><span class="line">    <span class="string">&quot;sidebar main aside&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer footer&quot;</span>;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">grid-area</span>: header; &#125;</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123; <span class="attribute">grid-area</span>: sidebar; &#125;</span><br><span class="line"><span class="selector-class">.main</span> &#123; <span class="attribute">grid-area</span>: main; &#125;</span><br><span class="line"><span class="selector-class">.aside</span> &#123; <span class="attribute">grid-area</span>: aside; &#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123; <span class="attribute">grid-area</span>: footer; &#125;</span><br></pre></td></tr></table></figure><h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><h3 id="11-React-中的虚拟-DOM-是什么？它有什么优势？"><a href="#11-React-中的虚拟-DOM-是什么？它有什么优势？" class="headerlink" title="11. React 中的虚拟 DOM 是什么？它有什么优势？"></a>11. React 中的虚拟 DOM 是什么？它有什么优势？</h3><p><strong>答案</strong>：<br>虚拟 DOM (Virtual DOM) 是 React 中的一个概念，它是真实 DOM 的一种轻量级的 JavaScript 对象表示。</p><p><strong>工作原理</strong>：</p><ol><li>当组件状态改变时，React 创建一个新的虚拟 DOM 树</li><li>将新的虚拟 DOM 树与之前的虚拟 DOM 树进行比较（Diffing 算法）</li><li>计算出需要更新的部分</li><li>只更新真实 DOM 中需要变化的部分</li></ol><p><strong>优势</strong>：</p><ul><li><strong>性能优化</strong>：减少直接操作 DOM 的次数，批量处理 DOM 更新</li><li><strong>跨平台</strong>：虚拟 DOM 是平台无关的，可以渲染到不同环境（Web、Native、服务器等）</li><li><strong>声明式编程</strong>：开发者只需关注状态和 UI 的映射关系，不需要手动操作 DOM</li><li><strong>调试方便</strong>：可以追踪 DOM 变化的历史记录</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 组件示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title class_">React</span>.<span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当点击按钮时，React 会：</span></span><br><span class="line"><span class="comment">// 1. 创建新的虚拟 DOM 树（count 值更新）</span></span><br><span class="line"><span class="comment">// 2. 与旧的虚拟 DOM 树比较</span></span><br><span class="line"><span class="comment">// 3. 发现只有 &lt;p&gt; 中的文本内容需要更新</span></span><br><span class="line"><span class="comment">// 4. 只更新真实 DOM 中的那部分内容</span></span><br></pre></td></tr></table></figure><h3 id="12-Vue-的响应式原理是什么？"><a href="#12-Vue-的响应式原理是什么？" class="headerlink" title="12. Vue 的响应式原理是什么？"></a>12. Vue 的响应式原理是什么？</h3><p><strong>答案</strong>：<br>Vue 的响应式系统是其核心特性之一，它能够自动追踪依赖关系并在数据变化时更新视图。</p><p><strong>Vue 2 响应式原理</strong>：</p><ul><li>使用 <code>Object.defineProperty()</code> 劫持对象的属性</li><li>在 getter 中收集依赖（Watcher）</li><li>在 setter 中通知依赖更新</li><li>对于数组，通过重写数组方法（push、pop 等）实现响应式</li></ul><p><strong>Vue 3 响应式原理</strong>：</p><ul><li>使用 ES6 的 Proxy 代替 Object.defineProperty</li><li>可以监听整个对象，包括属性的添加和删除</li><li>可以监听数组的索引和长度变化</li><li>性能更好，没有 Vue 2 中的一些限制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue 2 响应式系统简化示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, val</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>(); <span class="comment">// 依赖收集器</span></span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        dep.<span class="title function_">depend</span>(); <span class="comment">// 收集依赖</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal === val) <span class="keyword">return</span>;</span><br><span class="line">      val = newVal;</span><br><span class="line">      dep.<span class="title function_">notify</span>(); <span class="comment">// 通知依赖更新</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue 3 响应式系统简化示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="title function_">track</span>(target, key); <span class="comment">// 收集依赖</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">      <span class="title function_">trigger</span>(target, key); <span class="comment">// 触发更新</span></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-React-Hooks-的作用和常用-Hook-有哪些？"><a href="#13-React-Hooks-的作用和常用-Hook-有哪些？" class="headerlink" title="13. React Hooks 的作用和常用 Hook 有哪些？"></a>13. React Hooks 的作用和常用 Hook 有哪些？</h3><p><strong>答案</strong>：<br>React Hooks 是 React 16.8 引入的特性，允许在函数组件中使用状态和其他 React 特性，而不需要编写类组件。</p><p><strong>作用</strong>：</p><ul><li>在函数组件中使用状态和生命周期特性</li><li>复用状态逻辑，而不需要改变组件层次结构</li><li>将相关逻辑组合在一起，而不是按生命周期方法分散</li></ul><p><strong>常用的 Hook</strong>：</p><ul><li><strong>useState</strong>：管理组件状态</li><li><strong>useEffect</strong>：处理副作用（类似 componentDidMount、componentDidUpdate、componentWillUnmount）</li><li><strong>useContext</strong>：访问 React Context</li><li><strong>useReducer</strong>：使用 reducer 管理复杂状态逻辑</li><li><strong>useCallback</strong>：记忆函数，避免不必要的重新渲染</li><li><strong>useMemo</strong>：记忆计算结果，避免重复计算</li><li><strong>useRef</strong>：保存可变值，不触发重新渲染</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useState 示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useEffect 示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">DataFetcher</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="title function_">setData</span>(result);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching data:&#x27;</span>, error);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理函数（类似 componentWillUnmount）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 取消请求或清理资源</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">// 空依赖数组表示只在组件挂载时执行</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;/* 渲染数据 */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-前端路由的实现原理是什么？"><a href="#14-前端路由的实现原理是什么？" class="headerlink" title="14. 前端路由的实现原理是什么？"></a>14. 前端路由的实现原理是什么？</h3><p><strong>答案</strong>：<br>前端路由是指在单页应用（SPA）中，通过 JavaScript 控制页面内容的切换，而不刷新整个页面。主要有两种实现方式：</p><p><strong>Hash 模式</strong>：</p><ul><li>基于 URL 的哈希部分（<code>#</code> 后面的部分）</li><li>通过监听 <code>hashchange</code> 事件检测路由变化</li><li>兼容性好，但 URL 不够美观</li></ul><p><strong>History 模式</strong>：</p><ul><li>基于 HTML5 History API（<code>pushState</code>、<code>replaceState</code>）</li><li>通过监听 <code>popstate</code> 事件检测路由变化</li><li>URL 更美观，但需要服务器配置支持</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Hash 模式路由简单实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HashRouter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">routes</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handleHashChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handleHashChange</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">route</span>(<span class="params">path, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">routes</span>[path] = callback;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handleHashChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="variable language_">this</span>.<span class="property">routes</span>[hash];</span><br><span class="line">    <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">      <span class="title function_">handler</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// History 模式路由简单实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HistoryRouter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">routes</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, <span class="variable language_">this</span>.<span class="property">handlePopState</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>));</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handlePopState</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">route</span>(<span class="params">path, callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">routes</span>[path] = callback;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">navigate</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    history.<span class="title function_">pushState</span>(<span class="literal">null</span>, <span class="literal">null</span>, path);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">handlePopState</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">handlePopState</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> path = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="variable language_">this</span>.<span class="property">routes</span>[path];</span><br><span class="line">    <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">      <span class="title function_">handler</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15-状态管理工具（Redux-Vuex-Pinia）的核心概念和工作原理"><a href="#15-状态管理工具（Redux-Vuex-Pinia）的核心概念和工作原理" class="headerlink" title="15. 状态管理工具（Redux&#x2F;Vuex&#x2F;Pinia）的核心概念和工作原理"></a>15. 状态管理工具（Redux&#x2F;Vuex&#x2F;Pinia）的核心概念和工作原理</h3><p><strong>答案</strong>：<br>状态管理工具用于集中管理应用的状态，使状态变化可预测和可追踪。</p><p><strong>Redux（React）核心概念</strong>：</p><ul><li><strong>Store</strong>：存储应用的状态</li><li><strong>Action</strong>：描述状态变化的普通对象</li><li><strong>Reducer</strong>：纯函数，根据当前状态和 action 计算新状态</li><li><strong>Dispatch</strong>：发送 action 的方法</li><li><strong>Middleware</strong>：扩展 Redux 功能的中间件（如处理异步操作）</li></ul><p><strong>Vuex（Vue 2）核心概念</strong>：</p><ul><li><strong>State</strong>：应用的状态</li><li><strong>Getters</strong>：从 state 派生的状态</li><li><strong>Mutations</strong>：同步修改状态的方法</li><li><strong>Actions</strong>：可包含异步操作，提交 mutation</li><li><strong>Modules</strong>：将 store 分割成模块</li></ul><p><strong>Pinia（Vue 3）核心概念</strong>：</p><ul><li><strong>Store</strong>：定义状态和操作的容器</li><li><strong>State</strong>：存储的响应式状态</li><li><strong>Getters</strong>：类似计算属性，从 state 派生状态</li><li><strong>Actions</strong>：修改状态的方法，可以是异步的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Redux 示例</span></span><br><span class="line"><span class="comment">// 创建 reducer</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">counterReducer</span>(<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 store</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title class_">Redux</span>.<span class="title function_">createStore</span>(counterReducer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅变化</span></span><br><span class="line">store.<span class="title function_">subscribe</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送 action</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span> &#125;); <span class="comment">// &#123; count: 1 &#125;</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span> &#125;); <span class="comment">// &#123; count: 2 &#125;</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;DECREMENT&#x27;</span> &#125;); <span class="comment">// &#123; count: 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vuex 示例</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">incrementAsync</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pinia 示例 (Vue 3)</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">incrementAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>));</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">increment</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="前端工程化与性能优化"><a href="#前端工程化与性能优化" class="headerlink" title="前端工程化与性能优化"></a>前端工程化与性能优化</h2><h3 id="16-前端模块化的发展历程和主要规范"><a href="#16-前端模块化的发展历程和主要规范" class="headerlink" title="16. 前端模块化的发展历程和主要规范"></a>16. 前端模块化的发展历程和主要规范</h3><p><strong>答案</strong>：<br>前端模块化是为了解决全局变量污染、代码复用、依赖管理等问题而发展起来的。</p><p><strong>发展历程</strong>：</p><ol><li><strong>全局函数</strong>：最初的代码组织方式，容易造成命名冲突</li><li><strong>命名空间</strong>：将相关功能封装在对象中，减少全局变量</li><li><strong>IIFE（立即执行函数表达式）</strong>：创建私有作用域，避免变量泄露</li><li><strong>CommonJS</strong>：Node.js 采用的模块规范，同步加载</li><li><strong>AMD（Asynchronous Module Definition）</strong>：异步加载模块，适用于浏览器</li><li><strong>UMD（Universal Module Definition）</strong>：兼容 CommonJS 和 AMD</li><li><strong>ES Modules</strong>：ECMAScript 官方模块系统，现代浏览器原生支持</li></ol><p><strong>主要规范</strong>：</p><p><strong>CommonJS</strong>：</p><ul><li>使用 <code>require()</code> 导入，<code>module.exports</code> 或 <code>exports</code> 导出</li><li>同步加载，适合服务器环境</li><li>Node.js 默认使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出 (math.js)</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b,</span><br><span class="line">  <span class="attr">subtract</span>: <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><strong>AMD</strong>：</p><ul><li>使用 <code>define()</code> 定义模块，<code>require()</code> 加载模块</li><li>异步加载，适合浏览器环境</li><li>RequireJS 是其实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块</span></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;math&#x27;</span>, [], <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a + b; &#125;,</span><br><span class="line">    <span class="attr">subtract</span>: <span class="keyword">function</span>(<span class="params">a, b</span>) &#123; <span class="keyword">return</span> a - b; &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模块</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;math&#x27;</span>], <span class="keyword">function</span>(<span class="params">math</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>ES Modules</strong>：</p><ul><li>使用 <code>import</code> 导入，<code>export</code> 导出</li><li>静态分析，支持 tree-shaking</li><li>现代浏览器原生支持</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出 (math.js)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="17-Webpack-的核心概念和工作原理"><a href="#17-Webpack-的核心概念和工作原理" class="headerlink" title="17. Webpack 的核心概念和工作原理"></a>17. Webpack 的核心概念和工作原理</h3><p><strong>答案</strong>：<br>Webpack 是一个现代 JavaScript 应用程序的静态模块打包工具，它将项目中的各种资源（JS、CSS、图片等）视为模块，根据模块的依赖关系进行打包。</p><p><strong>核心概念</strong>：</p><ul><li><strong>Entry</strong>：入口，指定 webpack 开始构建的起点</li><li><strong>Output</strong>：输出，指定打包后的资源输出到哪里</li><li><strong>Loaders</strong>：加载器，处理非 JavaScript 文件（如 CSS、图片）</li><li><strong>Plugins</strong>：插件，执行范围更广的任务（如打包优化、资源管理）</li><li><strong>Mode</strong>：模式，指定开发环境或生产环境</li><li><strong>Chunks</strong>：代码块，打包过程中的代码单元</li></ul><p><strong>工作原理</strong>：</p><ol><li><strong>初始化参数</strong>：从配置文件和命令行参数中读取配置</li><li><strong>开始编译</strong>：初始化 Compiler 对象，加载所有配置的插件</li><li><strong>确定入口</strong>：根据配置中的 entry 找出所有入口文件</li><li><strong>编译模块</strong>：从入口文件出发，调用所有配置的 Loader 对模块进行转换，再递归处理依赖的模块</li><li><strong>完成模块编译</strong>：得到每个模块被转换后的最终内容和它们之间的依赖关系</li><li><strong>输出资源</strong>：根据依赖关系，组装成一个个包含多个模块的 Chunk</li><li><strong>输出完成</strong>：根据配置确定输出路径和文件名，将文件内容写入文件系统</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js 示例</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.[contenthash].js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 模块处理</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 处理 JavaScript</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 处理 CSS</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 处理图片</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|svg|jpg|jpeg|gif)$/i</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 优化</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="18-前端性能优化的主要方法和指标"><a href="#18-前端性能优化的主要方法和指标" class="headerlink" title="18. 前端性能优化的主要方法和指标"></a>18. 前端性能优化的主要方法和指标</h3><p><strong>答案</strong>：<br>前端性能优化是提升用户体验的关键，包括多个方面的优化策略。</p><p><strong>主要优化方法</strong>：</p><p><strong>网络优化</strong>：</p><ul><li>减少 HTTP 请求数（合并文件、CSS Sprites、Base64 编码）</li><li>使用 HTTP&#x2F;2</li><li>使用 CDN 加速</li><li>启用 Gzip 压缩</li><li>使用浏览器缓存（Cache-Control、ETag）</li><li>懒加载和预加载资源</li></ul><p><strong>资源优化</strong>：</p><ul><li>压缩代码（JS、CSS、HTML）</li><li>压缩和优化图片（WebP、SVG、响应式图片）</li><li>Tree-shaking 移除未使用的代码</li><li>代码分割（Code Splitting）</li><li>使用现代格式的图片</li></ul><p><strong>渲染优化</strong>：</p><ul><li>避免重排（reflow）和重绘（repaint）</li><li>使用 CSS 动画代替 JavaScript 动画</li><li>使用 <code>requestAnimationFrame</code> 处理动画</li><li>使用 Web Workers 处理复杂计算</li><li>虚拟滚动处理长列表</li></ul><p><strong>应用优化</strong>：</p><ul><li>服务端渲染（SSR）或静态站点生成（SSG）</li><li>应用 PWA 技术</li><li>使用 Web 缓存 API</li><li>实现骨架屏（Skeleton Screen）</li><li>优化首次内容绘制（FCP）</li></ul><p><strong>主要性能指标</strong>：</p><ul><li><strong>FCP (First Contentful Paint)</strong>：首次内容绘制，页面上首次绘制任何文本、图像、非空白 canvas 或 SVG 的时间</li><li><strong>LCP (Largest Contentful Paint)</strong>：最大内容绘制，视口中最大的内容元素绘制完成的时间</li><li><strong>FID (First Input Delay)</strong>：首次输入延迟，用户首次与页面交互到浏览器响应的时间</li><li><strong>CLS (Cumulative Layout Shift)</strong>：累积布局偏移，页面加载过程中元素意外移动的程度</li><li><strong>TTI (Time to Interactive)</strong>：可交互时间，页面完全可交互所需的时间</li><li><strong>TBT (Total Blocking Time)</strong>：总阻塞时间，FCP 和 TTI 之间主线程被阻塞的总时间</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 性能监测示例</span></span><br><span class="line"><span class="comment">// 使用 Performance API 测量关键指标</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">PerformanceObserver</span>(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> list.<span class="title function_">getEntries</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;entry.name&#125;</span>: <span class="subst">$&#123;entry.startTime&#125;</span>ms`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听各种性能指标</span></span><br><span class="line">observer.<span class="title function_">observe</span>(&#123; <span class="attr">entryTypes</span>: [<span class="string">&#x27;paint&#x27;</span>, <span class="string">&#x27;largest-contentful-paint&#x27;</span>, <span class="string">&#x27;layout-shift&#x27;</span>] &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义性能标记</span></span><br><span class="line">performance.<span class="title function_">mark</span>(<span class="string">&#x27;app-init-start&#x27;</span>);</span><br><span class="line"><span class="comment">// ... 初始化应用 ...</span></span><br><span class="line">performance.<span class="title function_">mark</span>(<span class="string">&#x27;app-init-end&#x27;</span>);</span><br><span class="line">performance.<span class="title function_">measure</span>(<span class="string">&#x27;app-initialization&#x27;</span>, <span class="string">&#x27;app-init-start&#x27;</span>, <span class="string">&#x27;app-init-end&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="19-前端安全问题及防范措施"><a href="#19-前端安全问题及防范措施" class="headerlink" title="19. 前端安全问题及防范措施"></a>19. 前端安全问题及防范措施</h3><p><strong>答案</strong>：<br>前端安全是 Web 应用安全的重要组成部分，主要包括以下安全问题和防范措施：</p><p><strong>XSS（跨站脚本攻击）</strong>：</p><ul><li><strong>问题</strong>：攻击者将恶意脚本注入到网页中，当用户浏览页面时执行</li><li><strong>防范措施</strong>：<ul><li>对输入输出进行转义和验证</li><li>使用 Content-Security-Policy (CSP) 头</li><li>使用 HttpOnly 和 Secure 标记保护 Cookie</li><li>使用现代框架的内置 XSS 保护</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入转义示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">escapeHTML</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quot;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#039;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CSP 示例</span></span><br><span class="line"><span class="comment">// 在 HTTP 头中设置</span></span><br><span class="line"><span class="comment">// Content-Security-Policy: default-src &#x27;self&#x27;; script-src &#x27;self&#x27; https://trusted-cdn.com;</span></span><br></pre></td></tr></table></figure><p><strong>CSRF（跨站请求伪造）</strong>：</p><ul><li><strong>问题</strong>：攻击者诱导用户在已认证的网站上执行非预期操作</li><li><strong>防范措施</strong>：<ul><li>使用 CSRF Token</li><li>验证 Origin 和 Referer 头</li><li>使用 SameSite Cookie 属性</li><li>对敏感操作要求重新认证</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CSRF Token 示例</span></span><br><span class="line"><span class="comment">// 服务端生成 token 并在表单中包含</span></span><br><span class="line"><span class="keyword">const</span> csrfToken = <span class="title function_">generateRandomToken</span>();</span><br><span class="line">session.<span class="property">csrfToken</span> = csrfToken;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML 表单</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/api/update&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf_token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;csrfToken&#125;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 其他表单字段 --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">// 服务端验证</span></span><br><span class="line"><span class="language-xml">if (request.body.csrf_token !== session.csrfToken) &#123;</span></span><br><span class="line"><span class="language-xml">  return response.status(403).send(&#x27;CSRF token 验证失败&#x27;);</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>点击劫持</strong>：</p><ul><li><strong>问题</strong>：攻击者将透明的目标网站覆盖在另一个网站上，诱导用户点击</li><li><strong>防范措施</strong>：<ul><li>使用 X-Frame-Options 头</li><li>使用 CSP 的 frame-ancestors 指令</li><li>JavaScript 框架防御</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// X-Frame-Options 示例</span></span><br><span class="line"><span class="comment">// 在 HTTP 头中设置</span></span><br><span class="line"><span class="comment">// X-Frame-Options: DENY</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">// X-Frame-Options: SAMEORIGIN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSP frame-ancestors 示例</span></span><br><span class="line"><span class="comment">// Content-Security-Policy: frame-ancestors &#x27;none&#x27;;</span></span><br></pre></td></tr></table></figure><p><strong>其他安全问题</strong>：</p><ul><li><strong>中间人攻击</strong>：使用 HTTPS 防范</li><li><strong>不安全的依赖</strong>：定期更新依赖，使用安全扫描工具</li><li><strong>敏感信息泄露</strong>：避免在前端存储敏感信息，使用环境变量</li><li><strong>服务器端请求伪造 (SSRF)</strong>：验证和限制 URL，使用白名单</li><li><strong>本地存储安全</strong>：不在 localStorage&#x2F;sessionStorage 中存储敏感数据</li></ul><h3 id="20-微前端架构的原理和实现方式"><a href="#20-微前端架构的原理和实现方式" class="headerlink" title="20. 微前端架构的原理和实现方式"></a>20. 微前端架构的原理和实现方式</h3><p><strong>答案</strong>：<br>微前端是一种将前端应用分解为更小、更易于管理的部分的架构风格，每个部分可以独立开发、测试和部署。</p><p><strong>核心原则</strong>：</p><ul><li><strong>技术栈无关</strong>：每个微前端可以使用不同的技术栈</li><li><strong>独立开发部署</strong>：团队可以独立工作，不影响其他团队</li><li><strong>运行时集成</strong>：微前端在浏览器中组合，而不是构建时</li><li><strong>隔离</strong>：微前端之间不应相互影响</li></ul><p><strong>实现方式</strong>：</p><p><strong>1. 基于路由的分发</strong>：</p><ul><li>不同路由对应不同的微应用</li><li>简单易实现，但页面间集成度低</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单的路由分发示例</span></span><br><span class="line"><span class="keyword">const</span> routes = &#123;</span><br><span class="line">  <span class="string">&#x27;/app1&#x27;</span>: loadApp1,</span><br><span class="line">  <span class="string">&#x27;/app2&#x27;</span>: loadApp2,</span><br><span class="line">  <span class="string">&#x27;/app3&#x27;</span>: loadApp3</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">router</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> path = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line">  <span class="keyword">const</span> route = <span class="title class_">Object</span>.<span class="title function_">keys</span>(routes).<span class="title function_">find</span>(<span class="function"><span class="params">route</span> =&gt;</span> path.<span class="title function_">startsWith</span>(route));</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (route) &#123;</span><br><span class="line">    routes[route]();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">loadDefaultApp</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;popstate&#x27;</span>, router);</span><br><span class="line"><span class="title function_">router</span>();</span><br></pre></td></tr></table></figure><p><strong>2. 使用 iframe</strong>：</p><ul><li>完全隔离各个应用</li><li>但存在通信困难、样式不一致等问题</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iframe 集成示例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;micro-frontend&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://app1.example.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 根据某些条件切换 iframe 的 src</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">loadApp</span>(<span class="params">appUrl</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;micro-frontend&#x27;</span>).<span class="property">src</span> = appUrl;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 应用间通信</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (event.<span class="property">origin</span> === <span class="string">&#x27;https://app1.example.com&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message:&#x27;</span>, event.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. Web Components</strong>：</p><ul><li>使用自定义元素封装微前端</li><li>提供良好的封装性和互操作性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Web Components 示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MicroApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">connectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> appName = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> appUrl = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载微应用</span></span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;appUrl&#125;</span>/asset-manifest.json`</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">manifest</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 加载 JS 和 CSS</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">loadResources</span>(manifest, appUrl);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">loadResources</span>(<span class="params">manifest, baseUrl</span>) &#123;</span><br><span class="line">    <span class="comment">// 加载 CSS</span></span><br><span class="line">    <span class="keyword">if</span> (manifest.<span class="property">css</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;link&#x27;</span>);</span><br><span class="line">      link.<span class="property">rel</span> = <span class="string">&#x27;stylesheet&#x27;</span>;</span><br><span class="line">      link.<span class="property">href</span> = <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/<span class="subst">$&#123;manifest.css&#125;</span>`</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">appendChild</span>(link);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加载 JS</span></span><br><span class="line">    <span class="keyword">if</span> (manifest.<span class="property">js</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">      script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/<span class="subst">$&#123;manifest.js&#125;</span>`</span>;</span><br><span class="line">      script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 调用微应用的挂载函数</span></span><br><span class="line">        <span class="variable language_">window</span>[<span class="string">`mount<span class="subst">$&#123;<span class="variable language_">this</span>.getAttribute(<span class="string">&#x27;name&#x27;</span>)&#125;</span>`</span>](<span class="variable language_">this</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">disconnectedCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 调用微应用的卸载函数</span></span><br><span class="line">    <span class="keyword">const</span> appName = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>[<span class="string">`unmount<span class="subst">$&#123;appName&#125;</span>`</span>]) &#123;</span><br><span class="line">      <span class="variable language_">window</span>[<span class="string">`unmount<span class="subst">$&#123;appName&#125;</span>`</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;micro-app&#x27;</span>, <span class="title class_">MicroApp</span>);</span><br></pre></td></tr></table></figure><p><strong>4. JavaScript 模块加载</strong>：</p><ul><li>动态加载 JavaScript 模块</li><li>灵活性高，但需要处理好依赖和冲突</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态加载模块示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadApp</span>(<span class="params">name, url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    script.<span class="property">src</span> = url;</span><br><span class="line">    script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="variable language_">window</span>[name]);</span><br><span class="line">    &#125;;</span><br><span class="line">    script.<span class="property">onerror</span> = reject;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="title function_">loadApp</span>(<span class="string">&#x27;app1&#x27;</span>, <span class="string">&#x27;https://app1.example.com/bundle.js&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">mount</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;app1-container&#x27;</span>));</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><strong>5. 使用微前端框架</strong>：</p><ul><li><strong>single-spa</strong>：JavaScript 微前端框架</li><li><strong>qiankun</strong>：基于 single-spa 的增强框架</li><li><strong>Module Federation</strong>：Webpack 5 提供的模块联邦功能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// single-spa 示例</span></span><br><span class="line"><span class="keyword">import</span> &#123; registerApplication, start &#125; <span class="keyword">from</span> <span class="string">&#x27;single-spa&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册应用</span></span><br><span class="line"><span class="title function_">registerApplication</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;app1&#x27;</span>,</span><br><span class="line">  <span class="attr">app</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;app1&#x27;</span>),</span><br><span class="line">  <span class="attr">activeWhen</span>: <span class="string">&#x27;/app1&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">registerApplication</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;app2&#x27;</span>,</span><br><span class="line">  <span class="attr">app</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;app2&#x27;</span>),</span><br><span class="line">  <span class="attr">activeWhen</span>: <span class="string">&#x27;/app2&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line"><span class="title function_">start</span>();</span><br></pre></td></tr></table></figure><p><strong>挑战与解决方案</strong>：</p><ul><li><strong>样式隔离</strong>：使用 CSS Modules、CSS-in-JS 或 Shadow DOM</li><li><strong>共享依赖</strong>：使用 Webpack 的 Module Federation 或 import maps</li><li><strong>通信机制</strong>：使用自定义事件、发布订阅模式或全局状态管理</li><li><strong>认证授权</strong>：使用 SSO 或 token 共享</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;JavaScript-基础&quot;&gt;&lt;a href=&quot;#JavaScript-基础&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 基础&quot;&gt;&lt;/a&gt;JavaScript 基础&lt;/h2&gt;&lt;h3 id=&quot;1-解释-JavaScript-中的原型和原型链&quot;&gt;&lt;a href=&quot;#1-解释-JavaScript-中的原型和原型链&quot; class=&quot;headerlink&quot; title=&quot;1. 解释 JavaScript 中的原型和原型链&quot;&gt;&lt;/a&gt;1. 解释 JavaScript 中的原型和原型链&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;答案&lt;/strong&gt;：&lt;br&gt;JavaScript 中的每个对象都有一个原型（prototype），原型也是一个对象，对象可以从原型继承属性和方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原型&lt;/strong&gt;：每个函数都有一个 &lt;code&gt;prototype&lt;/code&gt; 属性，指向一个对象，这个对象就是该函数的实例的原型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原型链&lt;/strong&gt;：当访问一个对象的属性时，如果对象本身没有这个属性，JavaScript 会沿着原型链向上查找，直到找到该属性或到达原型链的末端（&lt;code&gt;null&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端面试题集" scheme="http://blog.ypintao.com/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86/"/>
    
    
    <category term="前端面试题集" scheme="http://blog.ypintao.com/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>react重点</title>
    <link href="http://blog.ypintao.com/2021/06/07/react%E9%9D%A2%E8%AF%95/"/>
    <id>http://blog.ypintao.com/2021/06/07/react%E9%9D%A2%E8%AF%95/</id>
    <published>2021-06-07T04:00:00.000Z</published>
    <updated>2025-09-24T08:03:59.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、react-父组件怎么调用子组件的方法"><a href="#1、react-父组件怎么调用子组件的方法" class="headerlink" title="1、react 父组件怎么调用子组件的方法"></a>1、react 父组件怎么调用子组件的方法</h2><p>‌函数组件使用 forwardRef+useImperativeHandle‌：子组件通过useImperativeHandle暴露方法，父组件通过ref调用</p><span id="more"></span><h2 id="2、有用过worker吗"><a href="#2、有用过worker吗" class="headerlink" title="2、有用过worker吗"></a>2、有用过worker吗</h2><p>Web Worker用于在后台线程执行耗时操作，避免阻塞UI渲染。典型应用场景包括：<br>复杂计算（如图像处理）<br>大数据量排序&#x2F;过滤<br>保持页面响应性MCP_3</p><h2 id="3、有用过那些打包工具"><a href="#3、有用过那些打包工具" class="headerlink" title="3、有用过那些打包工具"></a>3、有用过那些打包工具</h2><p>webpack roolup vite </p><h2 id="4、有写过webpack插件么"><a href="#4、有写过webpack插件么" class="headerlink" title="4、有写过webpack插件么"></a>4、有写过webpack插件么</h2><p>编写插件需要理解Webpack的compiler和compilation钩子。典型结构：</p><h2 id="6、原型和原型链"><a href="#6、原型和原型链" class="headerlink" title="6、原型和原型链"></a>6、原型和原型链</h2><p>‌原型‌：每个函数创建的prototype对象<br>‌原型链‌：对象通过__proto__链接形成的继承链条<br>访问属性时沿原型链向上查找MCP_3]^</p><h2 id="7、类的静态方法和原型方法有啥区别，访问方式有什么不同"><a href="#7、类的静态方法和原型方法有啥区别，访问方式有什么不同" class="headerlink" title="7、类的静态方法和原型方法有啥区别，访问方式有什么不同"></a>7、类的静态方法和原型方法有啥区别，访问方式有什么不同</h2><p>通过类名访问Class.method() ，，通过实例访问instance.method()</p><h2 id="8、有用过canvas么，那些2d的动画库。"><a href="#8、有用过canvas么，那些2d的动画库。" class="headerlink" title="8、有用过canvas么，那些2d的动画库。"></a>8、有用过canvas么，那些2d的动画库。</h2><h2 id="9、移动端适配，em-rem-vw和vh的区别"><a href="#9、移动端适配，em-rem-vw和vh的区别" class="headerlink" title="9、移动端适配，em rem vw和vh的区别"></a>9、移动端适配，em rem vw和vh的区别</h2><h2 id="10、移动端安卓和ios-兼容上有哪些不一样"><a href="#10、移动端安卓和ios-兼容上有哪些不一样" class="headerlink" title="10、移动端安卓和ios 兼容上有哪些不一样"></a>10、移动端安卓和ios 兼容上有哪些不一样</h2><p>‌点击延迟‌：iOS需要touch-action优化<br>‌滚动回弹‌：iOS特有的弹性滚动效果<br>‌输入框聚焦‌：iOS键盘弹出行为不同<br>‌日期选择器‌：各系统原生控件样式差异大<br>‌安全区域‌：iOS刘海屏需要viewport-fit适配MCP_3]^</p><h2 id="11、react-useEffect-依赖项数组为空-或者不写数组有啥区别"><a href="#11、react-useEffect-依赖项数组为空-或者不写数组有啥区别" class="headerlink" title="11、react useEffect 依赖项数组为空 或者不写数组有啥区别"></a>11、react useEffect 依赖项数组为空 或者不写数组有啥区别</h2><p>空数组[]‌：仅在挂载时执行一次，卸载时清理<br>‌不传数组‌：每次渲染后都会执行<br>‌含依赖项‌：依赖变化时执行MCP_3]^</p><h2 id="12、react合成事件原理。"><a href="#12、react合成事件原理。" class="headerlink" title="12、react合成事件原理。"></a>12、react合成事件原理。</h2><p>‌事件委托‌：所有事件委托到document处理<br>‌统一封装‌：对原生事件进行跨浏览器包装<br>‌性能优化‌：使用事件池复用事件对象<br>‌异步处理‌：批量更新事件处理MCP_3]^</p><p>什么是React事件，什么是原生事件？两者的区别在哪儿？<br>React 事件: React 事件是经过封装和合成的，以保证在不同浏览器上的一致性。在使用 React 中的事件处理时，你会给 JSX 元素添加事件处理函数，比如 onClick、onChange 等，然后在事件处理函数中处理相应的逻辑。React 事件的处理方式提供了一定程度的抽象，使得开发者可以更加方便地处理事件和跨浏览器的兼容性。<br>原生事件是指由浏览器原生提供的事件，如 click、change、mouseover 等。在传统的 Web 开发中，我们通过 JavaScript 直接操作 DOM 元素并为其绑定原生事件处理程序来实现交互行为。</p><p>合成事件系统：React 事件是经过合成的，React 通过事件委派（event delegation）的方式来管理事件，而不是直接将事件绑定到每个 DOM 元素上。这种方式可以提高性能，同时减少内存占用。<br>跨浏览器兼容性：React 事件处理封装了底层的浏览器差异，使得开发者无需关心不同浏览器的事件兼容性问题。<br>事件命名：React 使用驼峰式命名来定义事件名，如 onClick、onChange，而原生事件则使用全小写的方式，如 click、change。</p><p>React 中的事件委派是指 React 将事件处理逻辑委托给组件的共同祖先（根组件），而不是直接在每个组件上添加事件监听器。这意味着 React 在整个组件树中只添加了一个事件监听器，而不是每个组件都有自己的事件监听器。<br>当用户触发事件时，React 会在 DOM 树中找到最近的共同祖先，并在该节点上触发事件处理函数。然后，React 会使用事件冒泡（event bubbling）的机制将事件传播到组件树中的每个组件，并调用相应的事件处理函数。<br>React 事件委派的优点包括：<br>性能优化：减少了事件监听器的数量，提高了性能。相比每个组件都添加事件监听器，只有一个共同祖先添加事件监听器的方式更加高效。<br>简化事件管理：不需要为每个组件都添加事件监听器，减少了事件管理的复杂性。当组件被添加、移除或更新时，不需要手动管理事件监听器。<br>更少的内存占用：只有一个事件监听器，减少了内存占用。</p><h2 id="15、webpack-公布变量-html访问"><a href="#15、webpack-公布变量-html访问" class="headerlink" title="15、webpack 公布变量 html访问"></a>15、webpack 公布变量 html访问</h2><p>1、使用 htmlwebpackPlugin<br>2、环境变量注入<br>3、DefinePlugin全局变量</p><h2 id="13、usecontext-有什么作用和缺点"><a href="#13、usecontext-有什么作用和缺点" class="headerlink" title="13、usecontext,有什么作用和缺点"></a>13、usecontext,有什么作用和缺点</h2><p>优点‌：<br>跨组件层级共享状态<br>避免prop drilling<br>‌缺点‌：<br>状态更新会导致所有消费者重新渲染<br>不适合高频更新的场景MCP_3]^</p><h2 id="14、webpack-怎么配置多入口。"><a href="#14、webpack-怎么配置多入口。" class="headerlink" title="14、webpack 怎么配置多入口。"></a>14、webpack 怎么配置多入口。</h2><p>pages属性</p><h2 id="5、react组件逻辑服用怎么弄。"><a href="#5、react组件逻辑服用怎么弄。" class="headerlink" title="5、react组件逻辑服用怎么弄。"></a>5、react组件逻辑服用怎么弄。</h2><p>React组件逻辑复用<br>‌自定义Hooks‌：提取通用逻辑为可复用函数<br>‌HOC高阶组件‌：通过组件包装增强功能<br>‌Render Props‌：通过函数prop共享代码<br>‌Context API‌：跨层级状态共享MCP_3]^</p><p>1、react性能优化<br>1.1、useMemo<br>1.2、useCallback</p><p>useLayoutEffect会阻塞浏览器渲染，useEffect不会</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1、react-父组件怎么调用子组件的方法&quot;&gt;&lt;a href=&quot;#1、react-父组件怎么调用子组件的方法&quot; class=&quot;headerlink&quot; title=&quot;1、react 父组件怎么调用子组件的方法&quot;&gt;&lt;/a&gt;1、react 父组件怎么调用子组件的方法&lt;/h2&gt;&lt;p&gt;‌函数组件使用 forwardRef+useImperativeHandle‌：子组件通过useImperativeHandle暴露方法，父组件通过ref调用&lt;/p&gt;</summary>
    
    
    
    <category term="react重点" scheme="http://blog.ypintao.com/categories/react%E9%87%8D%E7%82%B9/"/>
    
    
    <category term="react重点" scheme="http://blog.ypintao.com/tags/react%E9%87%8D%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Vue 2 源码解读</title>
    <link href="http://blog.ypintao.com/2021/06/01/vue2%E6%BA%90%E7%A0%81/"/>
    <id>http://blog.ypintao.com/2021/06/01/vue2%E6%BA%90%E7%A0%81/</id>
    <published>2021-06-01T04:00:00.000Z</published>
    <updated>2025-09-23T08:08:35.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>Vue 2的源码采用典型的模块化结构，主要包含以下核心模块：</p><ul><li><strong>core</strong>: 核心代码，包含响应式系统、虚拟DOM、组件系统等</li><li><strong>platforms</strong>: 平台特定代码，包括Web和Weex</li><li><strong>compiler</strong>: 模板编译器，将模板转换为渲染函数</li><li><strong>server</strong>: 服务端渲染相关代码</li><li><strong>sfc</strong>: 单文件组件(.vue文件)解析器</li><li><strong>shared</strong>: 共享工具函数</li></ul><h2 id="一、响应式系统"><a href="#一、响应式系统" class="headerlink" title="一、响应式系统"></a>一、响应式系统</h2><p>Vue 2的响应式系统是整个框架的核心，它基于Object.defineProperty实现数据劫持和发布订阅模式。</p><h3 id="1-1-数据响应式原理"><a href="#1-1-数据响应式原理" class="headerlink" title="1.1 数据响应式原理"></a>1.1 数据响应式原理</h3><span id="more"></span><h4 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h4><p>Observer类负责将普通JavaScript对象转换为响应式对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dep</span> = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vmCount</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在对象上添加__ob__属性，指向Observer实例</span></span><br><span class="line">    <span class="title function_">def</span>(value, <span class="string">&#x27;__ob__&#x27;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">      <span class="comment">// 数组响应式处理</span></span><br><span class="line">      <span class="keyword">const</span> augment = hasProto</span><br><span class="line">        ? protoAugment</span><br><span class="line">        : copyAugment</span><br><span class="line">      <span class="title function_">augment</span>(value, arrayMethods, arrayKeys)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">observeArray</span>(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 对象响应式处理</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">walk</span>(value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历对象的所有属性并将它们转换为getter/setter</span></span><br><span class="line">  <span class="title function_">walk</span> (obj) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">defineReactive</span>(obj, keys[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历数组的每一项并将它们转换为响应式</span></span><br><span class="line">  <span class="title function_">observeArray</span> (items) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="title function_">observe</span>(items[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将对象转换为响应式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">observe</span> (<span class="params">value, asRootData</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(value) || value <span class="keyword">instanceof</span> <span class="title class_">VNode</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> ob</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasOwn</span>(value, <span class="string">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class="property">__ob__</span> <span class="keyword">instanceof</span> <span class="title class_">Observer</span>) &#123;</span><br><span class="line">    ob = value.<span class="property">__ob__</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">    shouldObserve &amp;&amp;</span><br><span class="line">    !<span class="title function_">isServerRendering</span>() &amp;&amp;</span><br><span class="line">    (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value) || <span class="title function_">isPlainObject</span>(value)) &amp;&amp;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(value) &amp;&amp;</span><br><span class="line">    !value.<span class="property">_isVue</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    ob = <span class="keyword">new</span> <span class="title class_">Observer</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (asRootData &amp;&amp; ob) &#123;</span><br><span class="line">    ob.<span class="property">vmCount</span>++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ob</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="defineReactive"><a href="#defineReactive" class="headerlink" title="defineReactive"></a>defineReactive</h4><p><code>defineReactive</code>函数使用Object.defineProperty将对象属性转换为getter&#x2F;setter：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/index.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defineReactive</span> (<span class="params"></span></span><br><span class="line"><span class="params">  obj,</span></span><br><span class="line"><span class="params">  key,</span></span><br><span class="line"><span class="params">  val,</span></span><br><span class="line"><span class="params">  customSetter,</span></span><br><span class="line"><span class="params">  shallow</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 为每个属性创建一个依赖收集器</span></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> property = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, key)</span><br><span class="line">  <span class="keyword">if</span> (property &amp;&amp; property.<span class="property">configurable</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缓存原来的getter和setter</span></span><br><span class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.<span class="property">get</span></span><br><span class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.<span class="property">set</span></span><br><span class="line">  <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">2</span>) &#123;</span><br><span class="line">    val = obj[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归观察子属性</span></span><br><span class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; <span class="title function_">observe</span>(val)</span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> <span class="title function_">reactiveGetter</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line">      <span class="comment">// 依赖收集</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        dep.<span class="title function_">depend</span>()</span><br><span class="line">        <span class="keyword">if</span> (childOb) &#123;</span><br><span class="line">          childOb.<span class="property">dep</span>.<span class="title function_">depend</span>()</span><br><span class="line">          <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)) &#123;</span><br><span class="line">            <span class="title function_">dependArray</span>(value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> <span class="title function_">reactiveSetter</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = getter ? getter.<span class="title function_">call</span>(obj) : val</span><br><span class="line">      <span class="comment">// 值没有变化则不触发更新</span></span><br><span class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;</span><br><span class="line">        <span class="title function_">customSetter</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (getter &amp;&amp; !setter) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">        setter.<span class="title function_">call</span>(obj, newVal)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 新值需要重新观察</span></span><br><span class="line">      childOb = !shallow &amp;&amp; <span class="title function_">observe</span>(newVal)</span><br><span class="line">      <span class="comment">// 通知依赖更新</span></span><br><span class="line">      dep.<span class="title function_">notify</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-依赖收集与更新"><a href="#1-2-依赖收集与更新" class="headerlink" title="1.2 依赖收集与更新"></a>1.2 依赖收集与更新</h3><h4 id="Dep"><a href="#Dep" class="headerlink" title="Dep"></a>Dep</h4><p>Dep类是一个发布订阅中心，负责收集依赖和通知更新：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/dep.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> target</span><br><span class="line">  id</span><br><span class="line">  subs</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = uid++</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加订阅者</span></span><br><span class="line">  <span class="title function_">addSub</span> (sub) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除订阅者</span></span><br><span class="line">  <span class="title function_">removeSub</span> (sub) &#123;</span><br><span class="line">    <span class="title function_">remove</span>(<span class="variable language_">this</span>.<span class="property">subs</span>, sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 收集依赖</span></span><br><span class="line">  <span class="title function_">depend</span> () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span><br><span class="line">      <span class="title class_">Dep</span>.<span class="property">target</span>.<span class="title function_">addDep</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通知所有订阅者更新</span></span><br><span class="line">  <span class="title function_">notify</span> () &#123;</span><br><span class="line">    <span class="comment">// 稳定订阅者列表</span></span><br><span class="line">    <span class="keyword">const</span> subs = <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">slice</span>()</span><br><span class="line">    <span class="comment">// 通知所有订阅者</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      subs[i].<span class="title function_">update</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前正在评估的Watcher</span></span><br><span class="line"><span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> targetStack = []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前Watcher</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">pushTarget</span> (<span class="params">target</span>) &#123;</span><br><span class="line">  targetStack.<span class="title function_">push</span>(target)</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = target</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复之前的Watcher</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">popTarget</span> (<span class="params"></span>) &#123;</span><br><span class="line">  targetStack.<span class="title function_">pop</span>()</span><br><span class="line">  <span class="title class_">Dep</span>.<span class="property">target</span> = targetStack[targetStack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h4><p>Watcher类是依赖的具体实现，负责执行更新操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/watcher.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    vm,</span></span><br><span class="line"><span class="params">    expOrFn,</span></span><br><span class="line"><span class="params">    cb,</span></span><br><span class="line"><span class="params">    options,</span></span><br><span class="line"><span class="params">    isRenderWatcher</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line">    <span class="keyword">if</span> (isRenderWatcher) &#123;</span><br><span class="line">      vm.<span class="property">_watcher</span> = <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    vm.<span class="property">_watchers</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 选项</span></span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deep</span> = !!options.<span class="property">deep</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">user</span> = !!options.<span class="property">user</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">lazy</span> = !!options.<span class="property">lazy</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sync</span> = !!options.<span class="property">sync</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">before</span> = options.<span class="property">before</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deep</span> = <span class="variable language_">this</span>.<span class="property">user</span> = <span class="variable language_">this</span>.<span class="property">lazy</span> = <span class="variable language_">this</span>.<span class="property">sync</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = ++uid <span class="comment">// uid for batching</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">active</span> = <span class="literal">true</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="variable language_">this</span>.<span class="property">lazy</span> <span class="comment">// for lazy watchers</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deps</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newDeps</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">depIds</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newDepIds</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">expression</span> = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line">      ? expOrFn.<span class="title function_">toString</span>()</span><br><span class="line">      : <span class="string">&#x27;&#x27;</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 解析表达式</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">getter</span> = expOrFn</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">getter</span> = <span class="title function_">parsePath</span>(expOrFn)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">getter</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">getter</span> = noop</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">lazy</span></span><br><span class="line">      ? <span class="literal">undefined</span></span><br><span class="line">      : <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取值并收集依赖</span></span><br><span class="line">  <span class="title function_">get</span> () &#123;</span><br><span class="line">    <span class="title function_">pushTarget</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">let</span> value</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span>.<span class="property">vm</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 执行getter，触发依赖收集</span></span><br><span class="line">      value = <span class="variable language_">this</span>.<span class="property">getter</span>.<span class="title function_">call</span>(vm, vm)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">user</span>) &#123;</span><br><span class="line">        <span class="title function_">handleError</span>(e, vm, <span class="string">`getter for watcher &quot;<span class="subst">$&#123;<span class="variable language_">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> e</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 处理深度监听</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">deep</span>) &#123;</span><br><span class="line">        <span class="title function_">traverse</span>(value)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">popTarget</span>()</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">cleanupDeps</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加依赖</span></span><br><span class="line">  <span class="title function_">addDep</span> (dep) &#123;</span><br><span class="line">    <span class="keyword">const</span> id = dep.<span class="property">id</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">newDepIds</span>.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">newDepIds</span>.<span class="title function_">add</span>(id)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">newDeps</span>.<span class="title function_">push</span>(dep)</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">depIds</span>.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">        dep.<span class="title function_">addSub</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清理依赖</span></span><br><span class="line">  <span class="title function_">cleanupDeps</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">deps</span>.<span class="property">length</span></span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      <span class="keyword">const</span> dep = <span class="variable language_">this</span>.<span class="property">deps</span>[i]</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">newDepIds</span>.<span class="title function_">has</span>(dep.<span class="property">id</span>)) &#123;</span><br><span class="line">        dep.<span class="title function_">removeSub</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="variable language_">this</span>.<span class="property">depIds</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">depIds</span> = <span class="variable language_">this</span>.<span class="property">newDepIds</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newDepIds</span> = tmp</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newDepIds</span>.<span class="title function_">clear</span>()</span><br><span class="line">    tmp = <span class="variable language_">this</span>.<span class="property">deps</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">deps</span> = <span class="variable language_">this</span>.<span class="property">newDeps</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newDeps</span> = tmp</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">newDeps</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新</span></span><br><span class="line">  <span class="title function_">update</span> () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">lazy</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sync</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">run</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">queueWatcher</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行更新</span></span><br><span class="line">  <span class="title function_">run</span> () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">active</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        value !== <span class="variable language_">this</span>.<span class="property">value</span> ||</span><br><span class="line">        <span class="title function_">isObject</span>(value) ||</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deep</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// 设置新值</span></span><br><span class="line">        <span class="keyword">const</span> oldValue = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">user</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">cb</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, value, oldValue)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">handleError</span>(e, <span class="variable language_">this</span>.<span class="property">vm</span>, <span class="string">`callback for watcher &quot;<span class="subst">$&#123;<span class="variable language_">this</span>.expression&#125;</span>&quot;`</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">cb</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">vm</span>, value, oldValue)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算属性的求值</span></span><br><span class="line">  <span class="title function_">evaluate</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dirty</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 收集所有依赖</span></span><br><span class="line">  <span class="title function_">depend</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">deps</span>.<span class="property">length</span></span><br><span class="line">    <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">deps</span>[i].<span class="title function_">depend</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 销毁</span></span><br><span class="line">  <span class="title function_">teardown</span> () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">active</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">_isBeingDestroyed</span>) &#123;</span><br><span class="line">        <span class="title function_">remove</span>(<span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">_watchers</span>, <span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">deps</span>.<span class="property">length</span></span><br><span class="line">      <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">deps</span>[i].<span class="title function_">removeSub</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">active</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-数组响应式处理"><a href="#1-3-数组响应式处理" class="headerlink" title="1.3 数组响应式处理"></a>1.3 数组响应式处理</h3><p>Vue 2对数组的变异方法进行了特殊处理，以实现数组的响应式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observer/array.js (简化版)</span></span><br><span class="line"><span class="keyword">import</span> &#123; def &#125; <span class="keyword">from</span> <span class="string">&#x27;../util/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="comment">// 创建一个对象，该对象的原型指向Array.prototype</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="title class_">Object</span>.<span class="title function_">create</span>(arrayProto)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要拦截的数组方法</span></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [</span><br><span class="line">  <span class="string">&#x27;push&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;shift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;unshift&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;splice&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;sort&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;reverse&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截数组方法</span></span><br><span class="line">methodsToPatch.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">method</span>) &#123;</span><br><span class="line">  <span class="comment">// 缓存原始方法</span></span><br><span class="line">  <span class="keyword">const</span> original = arrayProto[method]</span><br><span class="line">  <span class="title function_">def</span>(arrayMethods, method, <span class="keyword">function</span> <span class="title function_">mutator</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用原始方法</span></span><br><span class="line">    <span class="keyword">const</span> result = original.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    <span class="comment">// 获取Observer实例</span></span><br><span class="line">    <span class="keyword">const</span> ob = <span class="variable language_">this</span>.<span class="property">__ob__</span></span><br><span class="line">    <span class="keyword">let</span> inserted</span><br><span class="line">    <span class="comment">// 对新增的元素进行观察</span></span><br><span class="line">    <span class="keyword">switch</span> (method) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;push&#x27;</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;unshift&#x27;</span>:</span><br><span class="line">        inserted = args</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;splice&#x27;</span>:</span><br><span class="line">        inserted = args.<span class="title function_">slice</span>(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inserted) ob.<span class="title function_">observeArray</span>(inserted)</span><br><span class="line">    <span class="comment">// 通知更新</span></span><br><span class="line">    ob.<span class="property">dep</span>.<span class="title function_">notify</span>()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="二、组件系统与渲染机制"><a href="#二、组件系统与渲染机制" class="headerlink" title="二、组件系统与渲染机制"></a>二、组件系统与渲染机制</h2><p>Vue 2的组件系统是构建用户界面的核心，它基于虚拟DOM实现高效的渲染。</p><h3 id="2-1-Vue实例创建"><a href="#2-1-Vue实例创建" class="headerlink" title="2.1 Vue实例创建"></a>2.1 Vue实例创建</h3><p>Vue实例的创建过程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/index.js (简化版)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span> (<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class="line">    !(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Vue</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_init</span>(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 混入核心方法</span></span><br><span class="line"><span class="title function_">initMixin</span>(<span class="title class_">Vue</span>)       <span class="comment">// 实现 _init 方法</span></span><br><span class="line"><span class="title function_">stateMixin</span>(<span class="title class_">Vue</span>)      <span class="comment">// 实现 $data, $props, $set, $delete, $watch 等</span></span><br><span class="line"><span class="title function_">eventsMixin</span>(<span class="title class_">Vue</span>)     <span class="comment">// 实现 $on, $once, $off, $emit 等</span></span><br><span class="line"><span class="title function_">lifecycleMixin</span>(<span class="title class_">Vue</span>)  <span class="comment">// 实现 _update, $forceUpdate, $destroy 等</span></span><br><span class="line"><span class="title function_">renderMixin</span>(<span class="title class_">Vue</span>)     <span class="comment">// 实现 $nextTick, _render 等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Vue</span></span><br></pre></td></tr></table></figure><h4 id="init方法"><a href="#init方法" class="headerlink" title="_init方法"></a>_init方法</h4><p><code>_init</code>方法是Vue实例初始化的入口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/init.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">initMixin</span> (<span class="params">Vue</span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_init</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="variable language_">this</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并选项</span></span><br><span class="line">    <span class="keyword">if</span> (options &amp;&amp; options.<span class="property">_isComponent</span>) &#123;</span><br><span class="line">      <span class="comment">// 优化内部组件实例化</span></span><br><span class="line">      <span class="title function_">initInternalComponent</span>(vm, options)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vm.<span class="property">$options</span> = <span class="title function_">mergeOptions</span>(</span><br><span class="line">        <span class="title function_">resolveConstructorOptions</span>(vm.<span class="property">constructor</span>),</span><br><span class="line">        options || &#123;&#125;,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化生命周期</span></span><br><span class="line">    <span class="title function_">initLifecycle</span>(vm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化事件</span></span><br><span class="line">    <span class="title function_">initEvents</span>(vm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化渲染</span></span><br><span class="line">    <span class="title function_">initRender</span>(vm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用beforeCreate钩子</span></span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化注入内容</span></span><br><span class="line">    <span class="title function_">initInjections</span>(vm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化状态</span></span><br><span class="line">    <span class="title function_">initState</span>(vm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化提供内容</span></span><br><span class="line">    <span class="title function_">initProvide</span>(vm)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用created钩子</span></span><br><span class="line">    <span class="title function_">callHook</span>(vm, <span class="string">&#x27;created&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有el选项，自动挂载</span></span><br><span class="line">    <span class="keyword">if</span> (vm.<span class="property">$options</span>.<span class="property">el</span>) &#123;</span><br><span class="line">      vm.$mount(vm.<span class="property">$options</span>.<span class="property">el</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-虚拟DOM-VNode"><a href="#2-2-虚拟DOM-VNode" class="headerlink" title="2.2 虚拟DOM (VNode)"></a>2.2 虚拟DOM (VNode)</h3><p>VNode是Vue中虚拟DOM节点的表示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/vnode.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="attr">tag</span>: string | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">VNodeData</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">children</span>: ?<span class="title class_">Array</span>&lt;<span class="title class_">VNode</span>&gt;</span><br><span class="line">  <span class="attr">text</span>: string | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">elm</span>: <span class="title class_">Node</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">ns</span>: string | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">context</span>: <span class="title class_">Component</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">key</span>: string | number | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">componentOptions</span>: <span class="title class_">VNodeComponentOptions</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">componentInstance</span>: <span class="title class_">Component</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">parent</span>: <span class="title class_">VNode</span> | <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以下是一些标志位</span></span><br><span class="line">  <span class="attr">raw</span>: boolean</span><br><span class="line">  <span class="attr">isStatic</span>: boolean</span><br><span class="line">  <span class="attr">isRootInsert</span>: boolean</span><br><span class="line">  <span class="attr">isComment</span>: boolean</span><br><span class="line">  <span class="attr">isCloned</span>: boolean</span><br><span class="line">  <span class="attr">isOnce</span>: boolean</span><br><span class="line">  <span class="attr">asyncFactory</span>: <span class="title class_">Function</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">asyncMeta</span>: <span class="title class_">Object</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">isAsyncPlaceholder</span>: boolean</span><br><span class="line">  <span class="attr">ssrContext</span>: <span class="title class_">Object</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">fnContext</span>: <span class="title class_">Component</span> | <span class="keyword">void</span></span><br><span class="line">  <span class="attr">fnOptions</span>: ?<span class="title class_">ComponentOptions</span></span><br><span class="line">  <span class="attr">fnScopeId</span>: ?string</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params">    tag?: string,</span></span><br><span class="line"><span class="params">    data?: VNodeData,</span></span><br><span class="line"><span class="params">    children?: ?<span class="built_in">Array</span>&lt;VNode&gt;,</span></span><br><span class="line"><span class="params">    text?: string,</span></span><br><span class="line"><span class="params">    elm?: Node,</span></span><br><span class="line"><span class="params">    context?: Component,</span></span><br><span class="line"><span class="params">    componentOptions?: VNodeComponentOptions,</span></span><br><span class="line"><span class="params">    asyncFactory?: <span class="built_in">Function</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tag</span> = tag</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = children</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">text</span> = text</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elm</span> = elm</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">ns</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">context</span> = context</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fnContext</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fnOptions</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fnScopeId</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = data &amp;&amp; data.<span class="property">key</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">componentOptions</span> = componentOptions</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">componentInstance</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">raw</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isStatic</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isRootInsert</span> = <span class="literal">true</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isComment</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isCloned</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isOnce</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">asyncFactory</span> = asyncFactory</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">asyncMeta</span> = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAsyncPlaceholder</span> = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用于调试</span></span><br><span class="line">  get <span class="title function_">child</span> (): <span class="title class_">Component</span> | <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">componentInstance</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-渲染与更新"><a href="#2-3-渲染与更新" class="headerlink" title="2.3 渲染与更新"></a>2.3 渲染与更新</h3><p>Vue 2的渲染和更新过程主要涉及<code>_render</code>和<code>_update</code>方法：</p><h4 id="render方法"><a href="#render方法" class="headerlink" title="_render方法"></a>_render方法</h4><p><code>_render</code>方法用于生成虚拟DOM：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/render.js (简化版)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_render</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> &#123; render, _parentVnode &#125; = vm.<span class="property">$options</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置父VNode</span></span><br><span class="line">  <span class="keyword">if</span> (_parentVnode) &#123;</span><br><span class="line">    vm.<span class="property">$scopedSlots</span> = <span class="title function_">normalizeScopedSlots</span>(</span><br><span class="line">      _parentVnode.<span class="property">data</span>.<span class="property">scopedSlots</span>,</span><br><span class="line">      vm.<span class="property">$slots</span>,</span><br><span class="line">      vm.<span class="property">$scopedSlots</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置父节点</span></span><br><span class="line">  vm.<span class="property">$vnode</span> = _parentVnode</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 渲染VNode</span></span><br><span class="line">  <span class="keyword">let</span> vnode</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 调用render函数生成VNode</span></span><br><span class="line">    currentRenderingInstance = vm</span><br><span class="line">    vnode = render.<span class="title function_">call</span>(vm.<span class="property">_renderProxy</span>, vm.<span class="property">$createElement</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">handleError</span>(e, vm, <span class="string">`render`</span>)</span><br><span class="line">    <span class="comment">// 渲染错误时的处理</span></span><br><span class="line">    vnode = vm.<span class="property">_vnode</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    currentRenderingInstance = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果返回数组，则创建一个Fragment节点</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(vnode) &amp;&amp; vnode.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    vnode = vnode[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果render函数出错，创建空VNode</span></span><br><span class="line">  <span class="keyword">if</span> (!(vnode <span class="keyword">instanceof</span> <span class="title class_">VNode</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(vnode)) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">&#x27;Multiple root nodes returned from render function. Render function &#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;should return a single root node.&#x27;</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    vnode = <span class="title function_">createEmptyVNode</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置父节点</span></span><br><span class="line">  vnode.<span class="property">parent</span> = _parentVnode</span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="update方法"><a href="#update方法" class="headerlink" title="_update方法"></a>_update方法</h4><p><code>_update</code>方法用于将虚拟DOM渲染为真实DOM：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js (简化版)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_update</span> = <span class="keyword">function</span> (<span class="params">vnode, hydrating</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> prevEl = vm.<span class="property">$el</span></span><br><span class="line">  <span class="keyword">const</span> prevVnode = vm.<span class="property">_vnode</span></span><br><span class="line">  <span class="keyword">const</span> restoreActiveInstance = <span class="title function_">setActiveInstance</span>(vm)</span><br><span class="line">  </span><br><span class="line">  vm.<span class="property">_vnode</span> = vnode</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 首次渲染</span></span><br><span class="line">  <span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">    <span class="comment">// 初始渲染</span></span><br><span class="line">    vm.<span class="property">$el</span> = vm.<span class="title function_">__patch__</span>(vm.<span class="property">$el</span>, vnode, hydrating, <span class="literal">false</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 更新</span></span><br><span class="line">    vm.<span class="property">$el</span> = vm.<span class="title function_">__patch__</span>(prevVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">restoreActiveInstance</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 更新__vue__引用</span></span><br><span class="line">  <span class="keyword">if</span> (prevEl) &#123;</span><br><span class="line">    prevEl.<span class="property">__vue__</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">$el</span>) &#123;</span><br><span class="line">    vm.<span class="property">$el</span>.<span class="property">__vue__</span> = vm</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果父节点是HOC，也更新其$el</span></span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">$vnode</span> &amp;&amp; vm.<span class="property">$parent</span> &amp;&amp; vm.<span class="property">$vnode</span> === vm.<span class="property">$parent</span>.<span class="property">_vnode</span>) &#123;</span><br><span class="line">    vm.<span class="property">$parent</span>.<span class="property">$el</span> = vm.<span class="property">$el</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-Patch算法"><a href="#2-4-Patch算法" class="headerlink" title="2.4 Patch算法"></a>2.4 Patch算法</h3><p>Patch算法是Vue 2中的核心Diff算法，用于高效更新DOM：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/patch.js (简化版)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patch</span> (<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果新VNode不存在但旧VNode存在，则销毁旧VNode</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isUndef</span>(vnode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldVnode)) <span class="title function_">invokeDestroyHook</span>(oldVnode)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isInitialPatch = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">const</span> insertedVnodeQueue = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果旧VNode不存在，则创建新元素</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldVnode)) &#123;</span><br><span class="line">    isInitialPatch = <span class="literal">true</span></span><br><span class="line">    <span class="title function_">createElm</span>(vnode, insertedVnodeQueue)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 判断是否为真实DOM</span></span><br><span class="line">    <span class="keyword">const</span> isRealElement = <span class="title function_">isDef</span>(oldVnode.<span class="property">nodeType</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不是真实DOM且是相同类型的VNode</span></span><br><span class="line">    <span class="keyword">if</span> (!isRealElement &amp;&amp; <span class="title function_">sameVnode</span>(oldVnode, vnode)) &#123;</span><br><span class="line">      <span class="comment">// 更新已存在的节点</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldVnode, vnode, insertedVnodeQueue, <span class="literal">null</span>, <span class="literal">null</span>, removeOnly)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 是真实DOM，创建空的VNode</span></span><br><span class="line">      <span class="keyword">if</span> (isRealElement) &#123;</span><br><span class="line">        <span class="comment">// 挂载到真实元素上</span></span><br><span class="line">        <span class="keyword">if</span> (oldVnode.<span class="property">nodeType</span> === <span class="number">1</span> &amp;&amp; oldVnode.<span class="title function_">hasAttribute</span>(<span class="variable constant_">SSR_ATTR</span>)) &#123;</span><br><span class="line">          oldVnode.<span class="title function_">removeAttribute</span>(<span class="variable constant_">SSR_ATTR</span>)</span><br><span class="line">          hydrating = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isTrue</span>(hydrating)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="title function_">hydrate</span>(oldVnode, vnode, insertedVnodeQueue)) &#123;</span><br><span class="line">            <span class="title function_">invokeInsertHook</span>(vnode, insertedVnodeQueue, <span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">return</span> oldVnode</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不是服务端渲染或混合失败，创建空VNode</span></span><br><span class="line">        oldVnode = <span class="title function_">emptyNodeAt</span>(oldVnode)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 替换已存在的元素</span></span><br><span class="line">      <span class="keyword">const</span> oldElm = oldVnode.<span class="property">elm</span></span><br><span class="line">      <span class="keyword">const</span> parentElm = nodeOps.<span class="title function_">parentNode</span>(oldElm)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 创建新节点</span></span><br><span class="line">      <span class="title function_">createElm</span>(</span><br><span class="line">        vnode,</span><br><span class="line">        insertedVnodeQueue,</span><br><span class="line">        parentElm,</span><br><span class="line">        nodeOps.<span class="title function_">nextSibling</span>(oldElm)</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 销毁旧节点</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDef</span>(parentElm)) &#123;</span><br><span class="line">        <span class="title function_">removeVnodes</span>([oldVnode], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldVnode.<span class="property">tag</span>)) &#123;</span><br><span class="line">        <span class="title function_">invokeDestroyHook</span>(oldVnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">invokeInsertHook</span>(vnode, insertedVnodeQueue, isInitialPatch)</span><br><span class="line">  <span class="keyword">return</span> vnode.<span class="property">elm</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="patchVnode"><a href="#patchVnode" class="headerlink" title="patchVnode"></a>patchVnode</h4><p><code>patchVnode</code>函数用于更新已存在的节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/patch.js (简化版)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">patchVnode</span> (<span class="params"></span></span><br><span class="line"><span class="params">  oldVnode,</span></span><br><span class="line"><span class="params">  vnode,</span></span><br><span class="line"><span class="params">  insertedVnodeQueue,</span></span><br><span class="line"><span class="params">  ownerArray,</span></span><br><span class="line"><span class="params">  index,</span></span><br><span class="line"><span class="params">  removeOnly</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果新旧VNode相同，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode === vnode) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复用DOM元素</span></span><br><span class="line">  <span class="keyword">const</span> elm = vnode.<span class="property">elm</span> = oldVnode.<span class="property">elm</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 异步占位符</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isTrue</span>(oldVnode.<span class="property">isAsyncPlaceholder</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(vnode.<span class="property">asyncFactory</span>.<span class="property">resolved</span>)) &#123;</span><br><span class="line">      <span class="title function_">hydrate</span>(oldVnode.<span class="property">elm</span>, vnode, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vnode.<span class="property">isAsyncPlaceholder</span> = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态节点优化</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isTrue</span>(vnode.<span class="property">isStatic</span>) &amp;&amp;</span><br><span class="line">    <span class="title function_">isTrue</span>(oldVnode.<span class="property">isStatic</span>) &amp;&amp;</span><br><span class="line">    vnode.<span class="property">key</span> === oldVnode.<span class="property">key</span> &amp;&amp;</span><br><span class="line">    (<span class="title function_">isTrue</span>(vnode.<span class="property">isCloned</span>) || <span class="title function_">isTrue</span>(vnode.<span class="property">isOnce</span>))</span><br><span class="line">  ) &#123;</span><br><span class="line">    vnode.<span class="property">componentInstance</span> = oldVnode.<span class="property">componentInstance</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行组件prepatch钩子</span></span><br><span class="line">  <span class="keyword">let</span> i</span><br><span class="line">  <span class="keyword">const</span> data = vnode.<span class="property">data</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isDef</span>(data) &amp;&amp; <span class="title function_">isDef</span>(i = data.<span class="property">hook</span>) &amp;&amp; <span class="title function_">isDef</span>(i = i.<span class="property">prepatch</span>)) &#123;</span><br><span class="line">    <span class="title function_">i</span>(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取子节点</span></span><br><span class="line">  <span class="keyword">const</span> oldCh = oldVnode.<span class="property">children</span></span><br><span class="line">  <span class="keyword">const</span> ch = vnode.<span class="property">children</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行更新钩子</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isDef</span>(data) &amp;&amp; <span class="title function_">isPatchable</span>(vnode)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.<span class="property">update</span>.<span class="property">length</span>; ++i) cbs.<span class="property">update</span>[i](oldVnode, vnode)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(i = data.<span class="property">hook</span>) &amp;&amp; <span class="title function_">isDef</span>(i = i.<span class="property">update</span>)) <span class="title function_">i</span>(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果新VNode没有文本</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isUndef</span>(vnode.<span class="property">text</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果新旧VNode都有子节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldCh) &amp;&amp; <span class="title function_">isDef</span>(ch)) &#123;</span><br><span class="line">      <span class="comment">// 更新子节点</span></span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch) <span class="title function_">updateChildren</span>(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(ch)) &#123;</span><br><span class="line">      <span class="comment">// 如果只有新VNode有子节点</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldVnode.<span class="property">text</span>)) nodeOps.<span class="title function_">setTextContent</span>(elm, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      <span class="title function_">addVnodes</span>(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.<span class="property">length</span> - <span class="number">1</span>, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 如果只有旧VNode有子节点</span></span><br><span class="line">      <span class="title function_">removeVnodes</span>(oldCh, <span class="number">0</span>, oldCh.<span class="property">length</span> - <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isDef</span>(oldVnode.<span class="property">text</span>)) &#123;</span><br><span class="line">      <span class="comment">// 如果旧VNode有文本，清空</span></span><br><span class="line">      nodeOps.<span class="title function_">setTextContent</span>(elm, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.<span class="property">text</span> !== vnode.<span class="property">text</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果文本不同，更新文本</span></span><br><span class="line">    nodeOps.<span class="title function_">setTextContent</span>(elm, vnode.<span class="property">text</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行postpatch钩子</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isDef</span>(data)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isDef</span>(i = data.<span class="property">hook</span>) &amp;&amp; <span class="title function_">isDef</span>(i = i.<span class="property">postpatch</span>)) <span class="title function_">i</span>(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a>updateChildren</h4><p><code>updateChildren</code>函数是Vue 2中的核心Diff算法，用于高效更新子节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/patch.js (简化版)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateChildren</span> (<span class="params"></span></span><br><span class="line"><span class="params">  parentElm,</span></span><br><span class="line"><span class="params">  oldCh,</span></span><br><span class="line"><span class="params">  newCh,</span></span><br><span class="line"><span class="params">  insertedVnodeQueue,</span></span><br><span class="line"><span class="params">  removeOnly</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> newStartIdx = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx]</span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh[newEndIdx]</span><br><span class="line">  <span class="keyword">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否是简单移动</span></span><br><span class="line">  <span class="keyword">const</span> canMove = !removeOnly</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 双端比较算法</span></span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// 旧起始节点为空，移动指针</span></span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// 旧结束节点为空，移动指针</span></span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// 旧起始和新起始节点相同</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// 旧结束和新结束节点相同</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldStartVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// 旧起始和新结束节点相同</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</span><br><span class="line">      <span class="comment">// 将旧起始节点移动到最后</span></span><br><span class="line">      canMove &amp;&amp; nodeOps.<span class="title function_">insertBefore</span>(parentElm, oldStartVnode.<span class="property">elm</span>, nodeOps.<span class="title function_">nextSibling</span>(oldEndVnode.<span class="property">elm</span>))</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(oldEndVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// 旧结束和新起始节点相同</span></span><br><span class="line">      <span class="title function_">patchVnode</span>(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class="line">      <span class="comment">// 将旧结束节点移动到最前</span></span><br><span class="line">      canMove &amp;&amp; nodeOps.<span class="title function_">insertBefore</span>(parentElm, oldEndVnode.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 以上四种情况都不满足</span></span><br><span class="line">      <span class="comment">// 创建key到索引的映射</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isUndef</span>(oldKeyToIdx)) oldKeyToIdx = <span class="title function_">createKeyToOldIdx</span>(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">      <span class="comment">// 在旧子节点中查找新起始节点的位置</span></span><br><span class="line">      idxInOld = <span class="title function_">isDef</span>(newStartVnode.<span class="property">key</span>)</span><br><span class="line">        ? oldKeyToIdx[newStartVnode.<span class="property">key</span>]</span><br><span class="line">        : <span class="title function_">findIdxInOld</span>(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果没找到，创建新元素</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isUndef</span>(idxInOld)) &#123;</span><br><span class="line">        <span class="title function_">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class="property">elm</span>, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 找到了，获取要移动的节点</span></span><br><span class="line">        vnodeToMove = oldCh[idxInOld]</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">sameVnode</span>(vnodeToMove, newStartVnode)) &#123;</span><br><span class="line">          <span class="comment">// 节点相同，进行patch</span></span><br><span class="line">          <span class="title function_">patchVnode</span>(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</span><br><span class="line">          oldCh[idxInOld] = <span class="literal">undefined</span></span><br><span class="line">          <span class="comment">// 移动节点</span></span><br><span class="line">          canMove &amp;&amp; nodeOps.<span class="title function_">insertBefore</span>(parentElm, vnodeToMove.<span class="property">elm</span>, oldStartVnode.<span class="property">elm</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 相同key但不是相同节点，创建新元素</span></span><br><span class="line">          <span class="title function_">createElm</span>(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.<span class="property">elm</span>, <span class="literal">false</span>, newCh, newStartIdx)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 处理剩余节点</span></span><br><span class="line">  <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class="line">    <span class="comment">// 旧子节点处理完，添加剩余的新子节点</span></span><br><span class="line">    refElm = <span class="title function_">isUndef</span>(newCh[newEndIdx + <span class="number">1</span>]) ? <span class="literal">null</span> : newCh[newEndIdx + <span class="number">1</span>].<span class="property">elm</span></span><br><span class="line">    <span class="title function_">addVnodes</span>(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartIdx &gt; newEndIdx) &#123;</span><br><span class="line">    <span class="comment">// 新子节点处理完，移除剩余的旧子节点</span></span><br><span class="line">    <span class="title function_">removeVnodes</span>(oldCh, oldStartIdx, oldEndIdx)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、生命周期与指令系统"><a href="#三、生命周期与指令系统" class="headerlink" title="三、生命周期与指令系统"></a>三、生命周期与指令系统</h2><h3 id="3-1-生命周期钩子"><a href="#3-1-生命周期钩子" class="headerlink" title="3.1 生命周期钩子"></a>3.1 生命周期钩子</h3><p>Vue 2的生命周期钩子是在特定阶段调用的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">callHook</span> (<span class="params">vm, hook</span>) &#123;</span><br><span class="line">  <span class="comment">// 禁用依赖收集</span></span><br><span class="line">  <span class="title function_">pushTarget</span>()</span><br><span class="line">  <span class="keyword">const</span> handlers = vm.<span class="property">$options</span>[hook]</span><br><span class="line">  <span class="keyword">const</span> info = <span class="string">`<span class="subst">$&#123;hook&#125;</span> hook`</span></span><br><span class="line">  <span class="keyword">if</span> (handlers) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = handlers.<span class="property">length</span>; i &lt; j; i++) &#123;</span><br><span class="line">      <span class="title function_">invokeWithErrorHandling</span>(handlers[i], vm, <span class="literal">null</span>, vm, info)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vm.<span class="property">_hasHookEvent</span>) &#123;</span><br><span class="line">    vm.$emit(<span class="string">&#x27;hook:&#x27;</span> + hook)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">popTarget</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生命周期钩子的调用时机：</p><ol><li><strong>beforeCreate</strong>: 在实例初始化之后，数据观测和事件配置之前</li><li><strong>created</strong>: 在实例创建完成后，数据观测、属性和方法的运算，watch&#x2F;event事件回调已完成</li><li><strong>beforeMount</strong>: 在挂载开始之前被调用</li><li><strong>mounted</strong>: 在挂载完成后调用</li><li><strong>beforeUpdate</strong>: 数据更新时调用，发生在虚拟DOM重新渲染和打补丁之前</li><li><strong>updated</strong>: 数据更改导致的虚拟DOM重新渲染和打补丁之后调用</li><li><strong>beforeDestroy</strong>: 实例销毁之前调用</li><li><strong>destroyed</strong>: 实例销毁后调用</li></ol><h3 id="3-2-指令系统"><a href="#3-2-指令系统" class="headerlink" title="3.2 指令系统"></a>3.2 指令系统</h3><p>Vue 2的指令系统允许开发者扩展HTML的功能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/vdom/modules/directives.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">create</span>: updateDirectives,</span><br><span class="line">  <span class="attr">update</span>: updateDirectives,</span><br><span class="line">  <span class="attr">destroy</span>: <span class="keyword">function</span> <span class="title function_">unbindDirectives</span> (<span class="params">vnode</span>) &#123;</span><br><span class="line">    <span class="title function_">updateDirectives</span>(vnode, emptyNode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateDirectives</span> (<span class="params">oldVnode, vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (oldVnode.<span class="property">data</span>.<span class="property">directives</span> || vnode.<span class="property">data</span>.<span class="property">directives</span>) &#123;</span><br><span class="line">    <span class="title function_">_update</span>(oldVnode, vnode)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_update</span> (<span class="params">oldVnode, vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isCreate = oldVnode === emptyNode</span><br><span class="line">  <span class="keyword">const</span> isDestroy = vnode === emptyNode</span><br><span class="line">  <span class="keyword">const</span> oldDirs = <span class="title function_">normalizeDirectives</span>(oldVnode.<span class="property">data</span>.<span class="property">directives</span>, oldVnode.<span class="property">context</span>)</span><br><span class="line">  <span class="keyword">const</span> newDirs = <span class="title function_">normalizeDirectives</span>(vnode.<span class="property">data</span>.<span class="property">directives</span>, vnode.<span class="property">context</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dirsWithInsert = []</span><br><span class="line">  <span class="keyword">const</span> dirsWithPostpatch = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> key, oldDir, dir</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> newDirs) &#123;</span><br><span class="line">    oldDir = oldDirs[key]</span><br><span class="line">    dir = newDirs[key]</span><br><span class="line">    <span class="keyword">if</span> (!oldDir) &#123;</span><br><span class="line">      <span class="comment">// 新指令，调用bind</span></span><br><span class="line">      <span class="title function_">callHook</span>(dir, <span class="string">&#x27;bind&#x27;</span>, vnode, oldVnode)</span><br><span class="line">      <span class="keyword">if</span> (dir.<span class="property">def</span> &amp;&amp; dir.<span class="property">def</span>.<span class="property">inserted</span>) &#123;</span><br><span class="line">        dirsWithInsert.<span class="title function_">push</span>(dir)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 已存在的指令，调用update</span></span><br><span class="line">      dir.<span class="property">oldValue</span> = oldDir.<span class="property">value</span></span><br><span class="line">      dir.<span class="property">oldArg</span> = oldDir.<span class="property">arg</span></span><br><span class="line">      <span class="title function_">callHook</span>(dir, <span class="string">&#x27;update&#x27;</span>, vnode, oldVnode)</span><br><span class="line">      <span class="keyword">if</span> (dir.<span class="property">def</span> &amp;&amp; dir.<span class="property">def</span>.<span class="property">componentUpdated</span>) &#123;</span><br><span class="line">        dirsWithPostpatch.<span class="title function_">push</span>(dir)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理需要inserted钩子的指令</span></span><br><span class="line">  <span class="keyword">if</span> (dirsWithInsert.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">callInsert</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dirsWithInsert.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">callHook</span>(dirsWithInsert[i], <span class="string">&#x27;inserted&#x27;</span>, vnode, oldVnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isCreate) &#123;</span><br><span class="line">      <span class="title function_">mergeVNodeHook</span>(vnode, <span class="string">&#x27;insert&#x27;</span>, callInsert)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">callInsert</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理需要componentUpdated钩子的指令</span></span><br><span class="line">  <span class="keyword">if</span> (dirsWithPostpatch.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="title function_">mergeVNodeHook</span>(vnode, <span class="string">&#x27;postpatch&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dirsWithPostpatch.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="title function_">callHook</span>(dirsWithPostpatch[i], <span class="string">&#x27;componentUpdated&#x27;</span>, vnode, oldVnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理需要解绑的指令</span></span><br><span class="line">  <span class="keyword">if</span> (!isCreate) &#123;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> oldDirs) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!newDirs[key]) &#123;</span><br><span class="line">        <span class="comment">// 不再存在的指令，调用unbind</span></span><br><span class="line">        <span class="title function_">callHook</span>(oldDirs[key], <span class="string">&#x27;unbind&#x27;</span>, oldVnode, oldVnode, isDestroy)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、编译器与模板解析"><a href="#四、编译器与模板解析" class="headerlink" title="四、编译器与模板解析"></a>四、编译器与模板解析</h2><p>Vue 2的编译器负责将模板转换为渲染函数。</p><h3 id="4-1-编译过程"><a href="#4-1-编译过程" class="headerlink" title="4.1 编译过程"></a>4.1 编译过程</h3><p>编译过程主要包括解析(parse)、优化(optimize)和生成(generate)三个阶段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/compiler/index.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">compile</span> (<span class="params"></span></span><br><span class="line"><span class="params">  template,</span></span><br><span class="line"><span class="params">  options</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> finalOptions = <span class="title class_">Object</span>.<span class="title function_">create</span>(baseOptions)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 合并选项</span></span><br><span class="line">  <span class="keyword">if</span> (options) &#123;</span><br><span class="line">    <span class="comment">// 合并自定义模块</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">modules</span>) &#123;</span><br><span class="line">      finalOptions.<span class="property">modules</span> =</span><br><span class="line">        (baseOptions.<span class="property">modules</span> || []).<span class="title function_">concat</span>(options.<span class="property">modules</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 合并指令</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">directives</span>) &#123;</span><br><span class="line">      finalOptions.<span class="property">directives</span> = <span class="title function_">extend</span>(</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">create</span>(baseOptions.<span class="property">directives</span> || <span class="literal">null</span>),</span><br><span class="line">        options.<span class="property">directives</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 复制其他选项</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key !== <span class="string">&#x27;modules&#x27;</span> &amp;&amp; key !== <span class="string">&#x27;directives&#x27;</span>) &#123;</span><br><span class="line">        finalOptions[key] = options[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 编译模板</span></span><br><span class="line">  <span class="keyword">const</span> compiled = <span class="title function_">baseCompile</span>(template.<span class="title function_">trim</span>(), finalOptions)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 检查错误</span></span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">detectErrors</span>(compiled.<span class="property">ast</span>, warn)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  compiled.<span class="property">errors</span> = errors</span><br><span class="line">  compiled.<span class="property">tips</span> = tips</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> compiled</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础编译函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">baseCompile</span> (<span class="params"></span></span><br><span class="line"><span class="params">  template,</span></span><br><span class="line"><span class="params">  options</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 解析模板为AST</span></span><br><span class="line">  <span class="keyword">const</span> ast = <span class="title function_">parse</span>(template.<span class="title function_">trim</span>(), options)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 优化AST</span></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">optimize</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_">optimize</span>(ast, options)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 生成代码</span></span><br><span class="line">  <span class="keyword">const</span> code = <span class="title function_">generate</span>(ast, options)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ast,</span><br><span class="line">    <span class="attr">render</span>: code.<span class="property">render</span>,</span><br><span class="line">    <span class="attr">staticRenderFns</span>: code.<span class="property">staticRenderFns</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-解析-Parse"><a href="#4-2-解析-Parse" class="headerlink" title="4.2 解析(Parse)"></a>4.2 解析(Parse)</h3><p>解析阶段将模板字符串转换为抽象语法树(AST)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/compiler/parser/index.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">parse</span> (<span class="params"></span></span><br><span class="line"><span class="params">  template,</span></span><br><span class="line"><span class="params">  options</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 解析选项</span></span><br><span class="line">  <span class="keyword">const</span> stack = []</span><br><span class="line">  <span class="keyword">let</span> root</span><br><span class="line">  <span class="keyword">let</span> currentParent</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// HTML解析器</span></span><br><span class="line">  <span class="title function_">parseHTML</span>(template, &#123;</span><br><span class="line">    <span class="title function_">start</span> (tag, attrs, unary, start, end) &#123;</span><br><span class="line">      <span class="comment">// 处理开始标签</span></span><br><span class="line">      <span class="keyword">const</span> element = <span class="title function_">createASTElement</span>(tag, attrs, currentParent)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 处理指令</span></span><br><span class="line">      <span class="title function_">processFor</span>(element)</span><br><span class="line">      <span class="title function_">processIf</span>(element)</span><br><span class="line">      <span class="title function_">processOnce</span>(element)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 树管理</span></span><br><span class="line">      <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        root = element</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (currentParent &amp;&amp; !element.<span class="property">forbidden</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element.<span class="property">elseif</span> || element.<span class="property">else</span>) &#123;</span><br><span class="line">          <span class="title function_">processIfConditions</span>(element, currentParent)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (element.<span class="property">slotScope</span>) &#123;</span><br><span class="line">            <span class="comment">// 作用域插槽</span></span><br><span class="line">            <span class="keyword">const</span> name = element.<span class="property">slotTarget</span> || <span class="string">&#x27;&quot;default&quot;&#x27;</span></span><br><span class="line">            ;(currentParent.<span class="property">scopedSlots</span> || (currentParent.<span class="property">scopedSlots</span> = &#123;&#125;))[name] = element</span><br><span class="line">          &#125;</span><br><span class="line">          currentParent.<span class="property">children</span>.<span class="title function_">push</span>(element)</span><br><span class="line">          element.<span class="property">parent</span> = currentParent</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 非自闭合标签入栈</span></span><br><span class="line">      <span class="keyword">if</span> (!unary) &#123;</span><br><span class="line">        currentParent = element</span><br><span class="line">        stack.<span class="title function_">push</span>(element)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">closeElement</span>(element)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">end</span> (tag, start, end) &#123;</span><br><span class="line">      <span class="comment">// 处理结束标签</span></span><br><span class="line">      <span class="keyword">const</span> element = stack[stack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">      <span class="comment">// 弹出栈</span></span><br><span class="line">      stack.<span class="property">length</span> -= <span class="number">1</span></span><br><span class="line">      currentParent = stack[stack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">      <span class="title function_">closeElement</span>(element)</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">chars</span> (text, start, end) &#123;</span><br><span class="line">      <span class="comment">// 处理文本内容</span></span><br><span class="line">      <span class="keyword">if</span> (!currentParent) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">const</span> children = currentParent.<span class="property">children</span></span><br><span class="line">      <span class="keyword">if</span> (text) &#123;</span><br><span class="line">        <span class="keyword">let</span> res</span><br><span class="line">        <span class="keyword">let</span> child</span><br><span class="line">        <span class="keyword">if</span> (text !== <span class="string">&#x27; &#x27;</span> &amp;&amp; (res = <span class="title function_">parseText</span>(text, delimiters))) &#123;</span><br><span class="line">          <span class="comment">// 带表达式的文本</span></span><br><span class="line">          child = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">expression</span>: res.<span class="property">expression</span>,</span><br><span class="line">            <span class="attr">tokens</span>: res.<span class="property">tokens</span>,</span><br><span class="line">            text</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (text !== <span class="string">&#x27; &#x27;</span> || !children.<span class="property">length</span> || children[children.<span class="property">length</span> - <span class="number">1</span>].<span class="property">text</span> !== <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">          <span class="comment">// 纯文本</span></span><br><span class="line">          child = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="number">3</span>,</span><br><span class="line">            text</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (child) &#123;</span><br><span class="line">          children.<span class="title function_">push</span>(child)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">comment</span> (text, start, end) &#123;</span><br><span class="line">      <span class="comment">// 处理注释</span></span><br><span class="line">      <span class="keyword">if</span> (currentParent) &#123;</span><br><span class="line">        <span class="keyword">const</span> child = &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="number">3</span>,</span><br><span class="line">          text,</span><br><span class="line">          <span class="attr">isComment</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        currentParent.<span class="property">children</span>.<span class="title function_">push</span>(child)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-优化-Optimize"><a href="#4-3-优化-Optimize" class="headerlink" title="4.3 优化(Optimize)"></a>4.3 优化(Optimize)</h3><p>优化阶段标记静态节点，提高渲染性能：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/compiler/optimizer.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">optimize</span> (<span class="params">root, options</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 标记静态节点</span></span><br><span class="line">  <span class="title function_">markStatic</span>(root)</span><br><span class="line">  <span class="comment">// 标记静态根节点</span></span><br><span class="line">  <span class="title function_">markStaticRoots</span>(root, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">markStatic</span> (<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断节点是否静态</span></span><br><span class="line">  node.<span class="property">static</span> = <span class="title function_">isStatic</span>(node)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 不要将组件插槽内容标记为静态</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !<span class="title function_">isPlatformReservedTag</span>(node.<span class="property">tag</span>) &amp;&amp;</span><br><span class="line">      node.<span class="property">tag</span> !== <span class="string">&#x27;slot&#x27;</span> &amp;&amp;</span><br><span class="line">      node.<span class="property">attrsMap</span>[<span class="string">&#x27;inline-template&#x27;</span>] == <span class="literal">null</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归处理子节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = node.<span class="property">children</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> child = node.<span class="property">children</span>[i]</span><br><span class="line">      <span class="title function_">markStatic</span>(child)</span><br><span class="line">      <span class="comment">// 如果子节点不是静态的，父节点也不是</span></span><br><span class="line">      <span class="keyword">if</span> (!child.<span class="property">static</span>) &#123;</span><br><span class="line">        node.<span class="property">static</span> = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理条件节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">ifConditions</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, l = node.<span class="property">ifConditions</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> block = node.<span class="property">ifConditions</span>[i].<span class="property">block</span></span><br><span class="line">        <span class="title function_">markStatic</span>(block)</span><br><span class="line">        <span class="keyword">if</span> (!block.<span class="property">static</span>) &#123;</span><br><span class="line">          node.<span class="property">static</span> = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">markStaticRoots</span> (<span class="params">node, isInFor</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.<span class="property">type</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 静态节点或有v-once指令</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">static</span> || node.<span class="property">once</span>) &#123;</span><br><span class="line">      node.<span class="property">staticInFor</span> = isInFor</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对于有子节点且子节点不只是文本的静态节点，标记为静态根</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">static</span> &amp;&amp; node.<span class="property">children</span>.<span class="property">length</span> &amp;&amp; !(</span><br><span class="line">      node.<span class="property">children</span>.<span class="property">length</span> === <span class="number">1</span> &amp;&amp;</span><br><span class="line">      node.<span class="property">children</span>[<span class="number">0</span>].<span class="property">type</span> === <span class="number">3</span></span><br><span class="line">    )) &#123;</span><br><span class="line">      node.<span class="property">staticRoot</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      node.<span class="property">staticRoot</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归处理子节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">children</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = node.<span class="property">children</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="title function_">markStaticRoots</span>(node.<span class="property">children</span>[i], isInFor || !!node.<span class="property">for</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理条件节点</span></span><br><span class="line">    <span class="keyword">if</span> (node.<span class="property">ifConditions</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, l = node.<span class="property">ifConditions</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="title function_">markStaticRoots</span>(node.<span class="property">ifConditions</span>[i].<span class="property">block</span>, isInFor)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-生成-Generate"><a href="#4-4-生成-Generate" class="headerlink" title="4.4 生成(Generate)"></a>4.4 生成(Generate)</h3><p>生成阶段将AST转换为渲染函数代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/compiler/codegen/index.js (简化版)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">generate</span> (<span class="params"></span></span><br><span class="line"><span class="params">  ast,</span></span><br><span class="line"><span class="params">  options</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> state = <span class="keyword">new</span> <span class="title class_">CodegenState</span>(options)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 根据AST生成代码</span></span><br><span class="line">  <span class="keyword">const</span> code = ast ? <span class="title function_">genElement</span>(ast, state) : <span class="string">&#x27;_c(&quot;div&quot;)&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="string">`with(this)&#123;return <span class="subst">$&#123;code&#125;</span>&#125;`</span>,</span><br><span class="line">    <span class="attr">staticRenderFns</span>: state.<span class="property">staticRenderFns</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">genElement</span> (<span class="params">el, state</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">parent</span>) &#123;</span><br><span class="line">    el.<span class="property">pre</span> = el.<span class="property">pre</span> || el.<span class="property">parent</span>.<span class="property">pre</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理静态根节点</span></span><br><span class="line">  <span class="keyword">if</span> (el.<span class="property">staticRoot</span> &amp;&amp; !el.<span class="property">staticProcessed</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genStatic</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">once</span> &amp;&amp; !el.<span class="property">onceProcessed</span>) &#123;</span><br><span class="line">    <span class="comment">// v-once</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genOnce</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">for</span> &amp;&amp; !el.<span class="property">forProcessed</span>) &#123;</span><br><span class="line">    <span class="comment">// v-for</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genFor</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">if</span> &amp;&amp; !el.<span class="property">ifProcessed</span>) &#123;</span><br><span class="line">    <span class="comment">// v-if</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genIf</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tag</span> === <span class="string">&#x27;template&#x27;</span> &amp;&amp; !el.<span class="property">slotTarget</span> &amp;&amp; !state.<span class="property">pre</span>) &#123;</span><br><span class="line">    <span class="comment">// 模板</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genChildren</span>(el, state) || <span class="string">&#x27;void 0&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el.<span class="property">tag</span> === <span class="string">&#x27;slot&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 插槽</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">genSlot</span>(el, state)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 组件或元素</span></span><br><span class="line">    <span class="keyword">let</span> code</span><br><span class="line">    <span class="keyword">if</span> (el.<span class="property">component</span>) &#123;</span><br><span class="line">      <span class="comment">// 组件</span></span><br><span class="line">      code = <span class="title function_">genComponent</span>(el.<span class="property">component</span>, el, state)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data</span><br><span class="line">      <span class="keyword">if</span> (!el.<span class="property">plain</span> || (el.<span class="property">pre</span> &amp;&amp; state.<span class="title function_">maybeComponent</span>(el))) &#123;</span><br><span class="line">        <span class="comment">// 生成元素数据</span></span><br><span class="line">        data = <span class="title function_">genData</span>(el, state)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> children = el.<span class="property">inlineTemplate</span> ? <span class="literal">null</span> : <span class="title function_">genChildren</span>(el, state, <span class="literal">true</span>)</span><br><span class="line">      code = <span class="string">`_c(&#x27;<span class="subst">$&#123;el.tag&#125;</span>&#x27;<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        data ? <span class="string">`,<span class="subst">$&#123;data&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span> // 数据</span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span><span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">        children ? <span class="string">`,<span class="subst">$&#123;children&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span> // 子节点</span></span></span><br><span class="line"><span class="subst"><span class="string">      &#125;</span>)`</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模块转换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; state.<span class="property">transforms</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      code = state.<span class="property">transforms</span>[i](el, code)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Vue 2源码的核心亮点：</p><ol><li><strong>响应式系统</strong>：基于Object.defineProperty的数据劫持和发布订阅模式，实现数据与视图的自动同步</li><li><strong>虚拟DOM</strong>：通过JavaScript对象表示DOM结构，配合高效的Diff算法实现最小化DOM操作</li><li><strong>组件系统</strong>：组件是Vue的核心抽象，提供了组合、复用和封装的能力</li><li><strong>编译系统</strong>：将模板编译为渲染函数，支持指令、插值等特性</li><li><strong>生命周期</strong>：提供完整的组件生命周期钩子，方便开发者在不同阶段执行逻辑</li></ol><p>Vue 2的源码设计体现了优秀的前端框架架构思想，通过深入理解其实现原理，可以更好地使用Vue进行开发，也能学习到很多前端工程化的最佳实践。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;p&gt;Vue 2的源码采用典型的模块化结构，主要包含以下核心模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;core&lt;/strong&gt;: 核心代码，包含响应式系统、虚拟DOM、组件系统等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;platforms&lt;/strong&gt;: 平台特定代码，包括Web和Weex&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;compiler&lt;/strong&gt;: 模板编译器，将模板转换为渲染函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;server&lt;/strong&gt;: 服务端渲染相关代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sfc&lt;/strong&gt;: 单文件组件(.vue文件)解析器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shared&lt;/strong&gt;: 共享工具函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一、响应式系统&quot;&gt;&lt;a href=&quot;#一、响应式系统&quot; class=&quot;headerlink&quot; title=&quot;一、响应式系统&quot;&gt;&lt;/a&gt;一、响应式系统&lt;/h2&gt;&lt;p&gt;Vue 2的响应式系统是整个框架的核心，它基于Object.defineProperty实现数据劫持和发布订阅模式。&lt;/p&gt;
&lt;h3 id=&quot;1-1-数据响应式原理&quot;&gt;&lt;a href=&quot;#1-1-数据响应式原理&quot; class=&quot;headerlink&quot; title=&quot;1.1 数据响应式原理&quot;&gt;&lt;/a&gt;1.1 数据响应式原理&lt;/h3&gt;</summary>
    
    
    
    <category term="Vue 2 源码解读" scheme="http://blog.ypintao.com/categories/Vue-2-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
    
    <category term="Vue 2 源码解读" scheme="http://blog.ypintao.com/tags/Vue-2-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>vue2重点</title>
    <link href="http://blog.ypintao.com/2021/01/01/vue2%E9%9D%A2%E8%AF%95/"/>
    <id>http://blog.ypintao.com/2021/01/01/vue2%E9%9D%A2%E8%AF%95/</id>
    <published>2021-01-01T04:00:00.000Z</published>
    <updated>2025-09-21T15:07:34.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue2响应式系统的工作原理"><a href="#Vue2响应式系统的工作原理" class="headerlink" title="Vue2响应式系统的工作原理"></a>Vue2响应式系统的工作原理</h2><p>Vue2响应式系统的核心实现机制<br>Vue2的响应式系统基于数据劫持与发布-订阅模式，通过<code>Object.defineProperty()</code> API拦截数据访问与修改，并结合依赖收集机制实现视图自动更新。其核心目标是建立数据与视图之间的联动关系，当数据变化时触发依赖组件的重新渲染。 </p><span id="more"></span><p>数据劫持：对象与数组的响应式处理 </p><h5 id="对象响应式实现"><a href="#对象响应式实现" class="headerlink" title="对象响应式实现"></a>对象响应式实现</h5><ol><li><p>初始化监听<br>Vue在初始化阶段通过<code>observer</code>方法遍历<code>data</code>对象，对每个属性调用<code>defineReactive</code>函数，该函数内部使用<code>Object.defineProperty()</code>定义属性的<code>getter</code>和<code>setter</code>。  </p><ul><li>getter：当属性被访问时触发，用于依赖收集（将当前Watcher添加到Dep中）。  </li><li>setter：当属性被修改时触发，用于派发更新（通知Dep中的所有Watcher执行更新）。</li></ul></li><li><p>深度监听<br>若属性值为对象，<code>defineReactive</code>会递归执行深度监听，直至属性为基本类型，确保嵌套对象的变化也能被捕获。</p></li></ol><h5 id="数组响应式实现"><a href="#数组响应式实现" class="headerlink" title="数组响应式实现"></a>数组响应式实现</h5><p>由于<code>Object.defineProperty()</code>无法原生监听数组元素变化，Vue2通过重写数组原型方法解决：  </p><ul><li>拦截<code>push</code>、<code>pop</code>、<code>shift</code>、<code>unshift</code>、<code>splice</code>、<code>sort</code>、<code>reverse</code>共7个修改原数组的方法。  </li><li>重写后的方法在执行时会触发依赖更新，并通过<code>dep.notify()</code>通知视图刷新。</li></ul><p>依赖收集与派发更新流程<br>核心角色 </p><ul><li>Observer：遍历数据对象，将所有属性转换为响应式。  </li><li>Dep（依赖收集器）：每个响应式属性对应一个Dep实例，维护依赖该属性的Watcher列表。  </li><li>Watcher：观察者对象（如组件渲染Watcher、计算属性Watcher），负责接收数据变化通知并执行更新逻辑。</li></ul><h5 id="流程详解"><a href="#流程详解" class="headerlink" title="流程详解"></a>流程详解</h5><ol><li><p>依赖收集<br>组件初次渲染时，模板解析过程中访问数据属性会触发<code>getter</code>，此时<code>Dep.target</code>指向当前渲染Watcher，该Watcher被添加到属性对应的Dep中。 </p></li><li><p>派发更新<br>当数据通过<code>setter</code>修改时，Dep会调用<code>notify()</code>方法，遍历所有关联的Watcher并执行其<code>update()</code>方法，最终触发组件重新渲染。</p></li></ol><h5 id="Vue2响应式系统的局限性与解决方案"><a href="#Vue2响应式系统的局限性与解决方案" class="headerlink" title="Vue2响应式系统的局限性与解决方案"></a>Vue2响应式系统的局限性与解决方案</h5><p>局限性 </p><table><thead><tr><th>问题场景</th><th>原因分析</th></tr></thead><tbody><tr><td>动态新增&#x2F;删除对象属性</td><td><code>Object.defineProperty()</code>仅初始化时劫持已有属性，新增&#x2F;删除属性无法触发<code>setter</code>[[4]]</td></tr><tr><td>直接修改数组索引或长度</td><td>重写的数组方法仅覆盖7个操作，直接修改索引（如<code>this.arr[0] = 1</code>）无法被监听[[4]]</td></tr><tr><td>深度监听性能开销</td><td>初始化时递归遍历所有嵌套对象，层级过深可能导致首屏渲染卡顿</td></tr></tbody></table><p>解决方案 </p><ul><li>新增&#x2F;删除属性：使用<code>Vue.set(obj, key, value)</code>或<code>this.$set</code>添加属性，<code>Vue.delete(obj, key)</code>删除属性[[4]]。  </li><li>数组操作：优先使用重写后的数组方法（如<code>splice</code>），或直接替换数组（如<code>this.arr = [...this.arr, newItem]</code>）。  </li><li>性能优化：避免数据层级过深，或通过<code>Object.freeze()</code>冻结无需响应式的对象。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Vue2通过<code>Object.defineProperty()</code>结合发布-订阅模式实现响应式，核心在于数据劫持、依赖收集与派发更新的联动。尽管存在对新增属性、数组索引修改等场景的支持限制，但可通过<code>Vue.set</code>等API规避。这一机制为Vue2的数据驱动视图提供了基础，而Vue3则通过Proxy API进一步优化了这些局限性。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Vue2响应式系统的工作原理&quot;&gt;&lt;a href=&quot;#Vue2响应式系统的工作原理&quot; class=&quot;headerlink&quot; title=&quot;Vue2响应式系统的工作原理&quot;&gt;&lt;/a&gt;Vue2响应式系统的工作原理&lt;/h2&gt;&lt;p&gt;Vue2响应式系统的核心实现机制&lt;br&gt;Vue2的响应式系统基于数据劫持与发布-订阅模式，通过&lt;code&gt;Object.defineProperty()&lt;/code&gt; API拦截数据访问与修改，并结合依赖收集机制实现视图自动更新。其核心目标是建立数据与视图之间的联动关系，当数据变化时触发依赖组件的重新渲染。 &lt;/p&gt;</summary>
    
    
    
    <category term="vue2重点" scheme="http://blog.ypintao.com/categories/vue2%E9%87%8D%E7%82%B9/"/>
    
    
    <category term="vue2重点" scheme="http://blog.ypintao.com/tags/vue2%E9%87%8D%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>vue3组件库</title>
    <link href="http://blog.ypintao.com/2021/01/01/vue3%E5%86%99%E7%BB%84%E4%BB%B6%E5%BA%93/"/>
    <id>http://blog.ypintao.com/2021/01/01/vue3%E5%86%99%E7%BB%84%E4%BB%B6%E5%BA%93/</id>
    <published>2021-01-01T04:00:00.000Z</published>
    <updated>2025-09-23T08:10:57.122Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>目前流行的组件库搭建方式都是使用monorepo的方式，好处很多，可以在一个代码仓库中管理多个项目，可以达到项目之间的资源共享。这里也是使用这种方式。</p><h2 id="以-pnpm-构建-monorepo"><a href="#以-pnpm-构建-monorepo" class="headerlink" title="以 pnpm 构建 monorepo"></a>以 pnpm 构建 monorepo</h2><p>首先全局安装pnpm</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install pnpm -g</span><br></pre></td></tr></table></figure><p>pnpm初始化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br><span class="line"><span class="string">``</span><span class="string">`     </span></span><br><span class="line"><span class="string">得到 package.json 的初始内容后删除 package.json 中的 name ，添加 &quot;private&quot;: true 属性，因为这个作为一个整体是不需要发布的。组件都是写在packages中。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo &quot;</span><span class="title class_">Error</span>: no test specified<span class="string">&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-pnpm-的-monorepo-工作区"><a href="#配置-pnpm-的-monorepo-工作区" class="headerlink" title="配置 pnpm 的 monorepo 工作区"></a>配置 pnpm 的 monorepo 工作区</h2><p>这是我目前的结构目录，docs用来存放组件库文档，examples用于调试编写好的组件，packages里的compnents用于存放自己的组件。<br><img src="/img/1.jpg"><br>比如我使用到packages和examples这两个，那么就将这两个都配置进去,在pnpm-workspace.yaml中配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">packages</span>:</span><br><span class="line">  - <span class="string">&#x27;packages/*&#x27;</span></span><br><span class="line">  - <span class="string">&#x27;examples/*&#x27;</span></span><br></pre></td></tr></table></figure><p>每个子模块都有属于自己的package.json文件</p><p><img src="/img/2.jpg"></p><p>以components包的package.json举例，其中”@uv-ui&#x2F;hooks”: “workspace:^1.0.0”和 “@uv-ui&#x2F;utils”: “workspace:^1.0.0”是依赖于其他目录的包，如果这个components包需要用到这两个包，需要在这个目录下也安装上，之后发布npm包的时候将workspace:^去掉即可，这两个依赖的包也需要独立发布npm包，这些在发布组件中有详细描述。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;uv-ui&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.11&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;dist/es/index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;module&quot;</span>: <span class="string">&quot;dist/es/index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;style&quot;</span>: <span class="string">&quot;dist/es/style.css&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;基于vue3的移动端组件库&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;eslint ./src/**/*.&#123;js,jsx,vue,ts,tsx&#125; --fix&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/monsterxwx/uv-ui&quot;</span>,</span><br><span class="line">    <span class="string">&quot;directory&quot;</span>: <span class="string">&quot;packages/uv-ui&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;uv-ui&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue3组件库&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mobile&quot;</span>,</span><br><span class="line">    <span class="string">&quot;frontend&quot;</span>,</span><br><span class="line">    <span class="string">&quot;components&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;coderxwx&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@uv-ui/hooks&quot;</span>: <span class="string">&quot;workspace:^1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@uv-ui/utils&quot;</span>: <span class="string">&quot;workspace:^1.0.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他两个的包名则分别为：@uv-ui&#x2F;hooks 和 @uv-ui&#x2F;utils，创建过程同上。</p><h2 id="仓库项目内的包相互调用"><a href="#仓库项目内的包相互调用" class="headerlink" title="仓库项目内的包相互调用"></a>仓库项目内的包相互调用</h2><p>如何对hooks、utils和components这三个包进行互相调用呢？我们只需要把这三个包都安装到仓库根目录下的 node_modules 目录中即可。所有的依赖都在根目录下安装，安装到根目录需要加上-w ，表示安装到公共模块的 packages.json 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pnpm install uv-ui -w</span><br><span class="line">pnpm install @uv-ui/hooks -w</span><br><span class="line">pnpm install @uv-ui/utils -w</span><br></pre></td></tr></table></figure><p>根目录的package.json将会出现如下依赖，这三个就是我们刚刚安装的包<br><img src="/img/3.jpg"></p><h2 id="组件编写"><a href="#组件编写" class="headerlink" title="组件编写"></a>组件编写</h2><p>如果我们的组件库包需要支持按需引入，那么每个组件都需要进行vue的注册app.component(comp.name,comp)。每个都写一遍会比较麻烦，可以封装成一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">withInstall</span> = (<span class="params">comp</span>) =&gt; &#123;</span><br><span class="line">  comp.<span class="property">install</span> = <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 注册组件</span></span><br><span class="line">    app.<span class="title function_">component</span>(comp.<span class="property">name</span>, comp)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> comp</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以button组件为例，首先目录结构如下，在src目录下编写各个组件，在components目录下有一个index用于将所有的组件导出<br><img src="/img/4.jpg"><br>button的index.js代码如下：将编写的button组件导进来，然后导出去即可实现组件每个都是按需加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&#x27;./button.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;withInstall&#125; <span class="keyword">from</span> <span class="string">&#x27;@uv-ui/utils&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UvButton</span> = <span class="title function_">withInstall</span>(<span class="title class_">Button</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UvButton</span></span><br></pre></td></tr></table></figure><p>再来看看components目录下的index.js文件，写多少个组件就引入多少个，然后全部导出去，这么做的目的是在全量导入的时候，可以直接引入组件，然后vue.use(uv-ui)即可将全部的组件注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvButton <span class="keyword">from</span> <span class="string">&#x27;./button&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  uvButton</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">install</span> = (<span class="params">Vue</span>) =&gt; &#123;</span><br><span class="line">  components.<span class="title function_">forEach</span>(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(component.<span class="property">name</span>, component)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  uvButton</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> install</span><br></pre></td></tr></table></figure><p>再来看看button.vue文件,由于写的比较多，这里直接省略部分代码，只保留关键代码。</p><p>可以看到每个组件都需要给他一个名字方便在vue中注册，export default { name: ‘UvButton’ }， 其次样式通过css变量抽离出来，方便样式的更改，样式不用加scoped作用域，只要命名好样式名称即可。其他组件同理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;uv-button&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 代码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;UvButton&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">:root &#123;</span></span><br><span class="line"><span class="language-xml">  --uv-button-primary: #409eff;</span></span><br><span class="line"><span class="language-xml">  --uv-button-success: #67c23a;</span></span><br><span class="line"><span class="language-xml">  --uv-button-warning: #e6a23c;</span></span><br><span class="line"><span class="language-xml">  --uv-button-error: #f56c6c;</span></span><br><span class="line"><span class="language-xml">  --uv-button-info: #909399;</span></span><br><span class="line"><span class="language-xml">  --uv-button-text: #303133;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">$primary: var(--uv-button-primary);</span></span><br><span class="line"><span class="language-xml">$success: var(--uv-button-success);</span></span><br><span class="line"><span class="language-xml">$warning: var(--uv-button-warning) ;</span></span><br><span class="line"><span class="language-xml">$error: var(--uv-button-error) ;</span></span><br><span class="line"><span class="language-xml">$info: var(--uv-button-info) ;</span></span><br><span class="line"><span class="language-xml">$text: var(--uv-button-text) ;</span></span><br><span class="line"><span class="language-xml">.uv-button &#123;</span></span><br><span class="line"><span class="language-xml">  font-size: var(--uv-button-font-size);</span></span><br><span class="line"><span class="language-xml">  border: 0;</span></span><br><span class="line"><span class="language-xml">  border-radius: var(--uv-button-border-radius);</span></span><br><span class="line"><span class="language-xml">  white-space: nowrap;</span></span><br><span class="line"><span class="language-xml">  color: #ffffff;</span></span><br><span class="line"><span class="language-xml">  background: none;</span></span><br><span class="line"><span class="language-xml">  outline: none;</span></span><br><span class="line"><span class="language-xml">  cursor: pointer;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="组件打包"><a href="#组件打包" class="headerlink" title="组件打包"></a>组件打包</h2><p>组件打包采用的是vite的库模式打包，没有使用gulp这些工具，是比较简单的打包方式，只需要简单配置即可实现每个组件都单独打包，目前打包后所有组件样式会合成一个style.css文件，样式需要全部引入，组件是按需引入的方式，如果样式也想做分离就需要使用到gulp等这些工具，将样式全部拆分出来作为一个包theme-chalk,然后引入就类似element-ui那种方式，比较麻烦这里就不详细描述了，可以找找相关的文章了解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;modules&#x27;</span>,</span><br><span class="line">    <span class="comment">// 压缩</span></span><br><span class="line">    <span class="attr">minify</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// 忽略打包vue文件</span></span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&#x27;vue&#x27;</span>],</span><br><span class="line">      <span class="attr">input</span>: [<span class="string">&#x27;src/index.js&#x27;</span>],</span><br><span class="line">      <span class="attr">output</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">format</span>: <span class="string">&#x27;es&#x27;</span>,</span><br><span class="line">          <span class="attr">entryFileNames</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">          <span class="attr">preserveModules</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// 配置打包根目录</span></span><br><span class="line">          <span class="attr">dir</span>: <span class="string">&#x27;dist/es&#x27;</span>,</span><br><span class="line">          <span class="attr">preserveModulesRoot</span>: <span class="string">&#x27;src&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">format</span>: <span class="string">&#x27;cjs&#x27;</span>,</span><br><span class="line">          <span class="attr">entryFileNames</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">          <span class="attr">preserveModules</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">dir</span>: <span class="string">&#x27;dist/lib&#x27;</span>,</span><br><span class="line">          <span class="attr">preserveModulesRoot</span>: <span class="string">&#x27;src&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lib</span>: &#123;</span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&#x27;./index.js&#x27;</span>,</span><br><span class="line">      <span class="attr">formats</span>: [<span class="string">&#x27;es&#x27;</span>, <span class="string">&#x27;cjs&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>下面是打包后的结构，分别拆成es和lib，样式在es目录下的style.css</p><p><img src="/img/5.jpg"></p><p>使用方式就比较简单了</p><h3 id="第一种：全量使用-main-js中导入"><a href="#第一种：全量使用-main-js中导入" class="headerlink" title="第一种：全量使用 main.js中导入"></a>第一种：全量使用 main.js中导入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvUI <span class="keyword">from</span> <span class="string">&#x27;uv-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;uv-ui/dist/es/style.css&#x27;</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(uvUI)</span><br></pre></td></tr></table></figure><h3 id="第二种：按需导入-在main-js中引入样式文件"><a href="#第二种：按需导入-在main-js中引入样式文件" class="headerlink" title="第二种：按需导入 在main.js中引入样式文件"></a>第二种：按需导入 在main.js中引入样式文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;uv-ui/dist/es/style.css&#x27;</span></span><br></pre></td></tr></table></figure><p>其他用到的地方引入相关组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">uvButton</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">uvButton</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; uvButton &#125; <span class="keyword">from</span> <span class="string">&#x27;uv-ui&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>组件发布<br>编写package.json<br>package.json重要字段说明：</p><p>name 即npm项目包名，发布到npm时就是取的这个name名，你自己取个语义化的名字，和已有的npm库不能重复；<br>private 是否私有包，要发布到npm需要关闭<br>version 版本号，更新npm包时必须修改一个更高的版本号后才能成功发布到npm，版本号最好遵循npm版本管理规范；<br>description 包的描述，发布到npm后你搜索该npm包时，在搜索联想列表里会显示在包名的下方，作为描述说明；<br>main 入口文件路径，在你通过import或require引用该npm包时就是引入的该路径的文件<br>keywords 该包的关键词<br>files 白名单目录，配置哪些文件会上传到npm包中。有些文件是必定会上传的，无法控制，例如package.json、LICENSE、README.md等等<br>repository 关联github地址</p><p>package.json完整代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;uv-ui&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.11&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;dist/es/index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;module&quot;</span>: <span class="string">&quot;dist/es/index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;style&quot;</span>: <span class="string">&quot;dist/es/style.css&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;基于vue3的移动端组件库&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;vite build&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;eslint ./src/**/*.&#123;js,jsx,vue,ts,tsx&#125; --fix&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;repository&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/monsterxwx/uv-ui&quot;</span>,</span><br><span class="line">    <span class="string">&quot;directory&quot;</span>: <span class="string">&quot;packages/uv-ui&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;uv-ui&quot;</span>,</span><br><span class="line">    <span class="string">&quot;vue3组件库&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mobile&quot;</span>,</span><br><span class="line">    <span class="string">&quot;frontend&quot;</span>,</span><br><span class="line">    <span class="string">&quot;components&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;coderxwx&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@coderxwx/uv-ui-hooks&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@coderxwx/uv-ui-utils&quot;</span>: <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加LICENSE"><a href="#添加LICENSE" class="headerlink" title="添加LICENSE"></a>添加LICENSE</h3><p>Copyright (c) 2023代表年份，coderxwx替换成自己的名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">MIT</span> <span class="title class_">License</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Copyright</span> (c) <span class="number">2023</span> coderxwx</span><br><span class="line"></span><br><span class="line"><span class="title class_">Permission</span> is hereby granted, free <span class="keyword">of</span> charge, to any person obtaining a copy</span><br><span class="line"><span class="keyword">of</span> <span class="variable language_">this</span> software and associated documentation <span class="title function_">files</span> (the <span class="string">&quot;Software&quot;</span>), to deal</span><br><span class="line"><span class="keyword">in</span> the <span class="title class_">Software</span> without restriction, including without limitation the rights</span><br><span class="line">to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span><br><span class="line">copies <span class="keyword">of</span> the <span class="title class_">Software</span>, and to permit persons to whom the <span class="title class_">Software</span> is</span><br><span class="line">furnished to <span class="keyword">do</span> so, subject to the following <span class="attr">conditions</span>:</span><br><span class="line"></span><br><span class="line"><span class="title class_">The</span> above copyright notice and <span class="variable language_">this</span> permission notice shall be included <span class="keyword">in</span> all</span><br><span class="line">copies or substantial portions <span class="keyword">of</span> the <span class="title class_">Software</span>.</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">THE</span> <span class="variable constant_">SOFTWARE</span> <span class="variable constant_">IS</span> <span class="variable constant_">PROVIDED</span> <span class="string">&quot;AS IS&quot;</span>, <span class="variable constant_">WITHOUT</span> <span class="variable constant_">WARRANTY</span> <span class="variable constant_">OF</span> <span class="variable constant_">ANY</span> <span class="variable constant_">KIND</span>, <span class="variable constant_">EXPRESS</span> <span class="variable constant_">OR</span></span><br><span class="line"><span class="variable constant_">IMPLIED</span>, <span class="variable constant_">INCLUDING</span> <span class="variable constant_">BUT</span> <span class="variable constant_">NOT</span> <span class="variable constant_">LIMITED</span> <span class="variable constant_">TO</span> <span class="variable constant_">THE</span> <span class="variable constant_">WARRANTIES</span> <span class="variable constant_">OF</span> <span class="variable constant_">MERCHANTABILITY</span>,</span><br><span class="line"><span class="variable constant_">FITNESS</span> <span class="variable constant_">FOR</span> A <span class="variable constant_">PARTICULAR</span> <span class="variable constant_">PURPOSE</span> <span class="variable constant_">AND</span> <span class="variable constant_">NONINFRINGEMENT</span>. <span class="variable constant_">IN</span> <span class="variable constant_">NO</span> <span class="variable constant_">EVENT</span> <span class="variable constant_">SHALL</span> <span class="variable constant_">THE</span></span><br><span class="line"><span class="variable constant_">AUTHORS</span> <span class="variable constant_">OR</span> <span class="variable constant_">COPYRIGHT</span> <span class="variable constant_">HOLDERS</span> <span class="variable constant_">BE</span> <span class="variable constant_">LIABLE</span> <span class="variable constant_">FOR</span> <span class="variable constant_">ANY</span> <span class="variable constant_">CLAIM</span>, <span class="variable constant_">DAMAGES</span> <span class="variable constant_">OR</span> <span class="variable constant_">OTHER</span></span><br><span class="line"><span class="variable constant_">LIABILITY</span>, <span class="variable constant_">WHETHER</span> <span class="variable constant_">IN</span> <span class="variable constant_">AN</span> <span class="variable constant_">ACTION</span> <span class="variable constant_">OF</span> <span class="variable constant_">CONTRACT</span>, <span class="variable constant_">TORT</span> <span class="variable constant_">OR</span> <span class="variable constant_">OTHERWISE</span>, <span class="variable constant_">ARISING</span> <span class="variable constant_">FROM</span>,</span><br><span class="line"><span class="variable constant_">OUT</span> <span class="variable constant_">OF</span> <span class="variable constant_">OR</span> <span class="variable constant_">IN</span> <span class="variable constant_">CONNECTION</span> <span class="variable constant_">WITH</span> <span class="variable constant_">THE</span> <span class="variable constant_">SOFTWARE</span> <span class="variable constant_">OR</span> <span class="variable constant_">THE</span> <span class="variable constant_">USE</span> <span class="variable constant_">OR</span> <span class="variable constant_">OTHER</span> <span class="variable constant_">DEALINGS</span> <span class="variable constant_">IN</span> <span class="variable constant_">THE</span></span><br><span class="line"><span class="variable constant_">SOFTWARE</span>.</span><br></pre></td></tr></table></figure><h3 id="npm账号注册登录"><a href="#npm账号注册登录" class="headerlink" title="npm账号注册登录"></a>npm账号注册登录</h3><p>要发布到npm上首先就要注册npm账号，通过官网进行账号注册：<a href="http://www.npmjs.com/[1]">www.npmjs.com/[1]</a> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>登录npm,输入账号和密码，密码输入不会有显示，正常输入即可，然后输入自己的邮箱，邮箱验证码验证通过后即成功登录，后续不需要重复登录。</p><h3 id="调试npm"><a href="#调试npm" class="headerlink" title="调试npm"></a>调试npm</h3><p>如果不需要调试，可以跳过调试步骤，直接发布。</p><p>npm项目根目录运行终端命令：运行后该npm包会放进本地npm缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link</span><br></pre></td></tr></table></figure><p>如果要在其他项目（例如项目名叫aaa）里引用调试，只需要在aaa里运行命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm link 包名</span><br></pre></td></tr></table></figure><p>为了防止本地调试npm与发布后的npm混淆冲突，在调试完成后一定记得手动取消项目关联。</p><h3 id="发布组件"><a href="#发布组件" class="headerlink" title="发布组件"></a>发布组件</h3><p>在npm包项目根目录运行命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>运行完稍等一段时间即可在npm官网搜索到发布的npm包。</p><h3 id="关于发布的一些错误汇总"><a href="#关于发布的一些错误汇总" class="headerlink" title="关于发布的一些错误汇总"></a>关于发布的一些错误汇总</h3><p>403错误</p><p>检查npm源是否是官方源registry.npmjs.org&#x2F;[2]，比如之前是淘宝的源则需要切换回官方源，否则发布失败；<br>是否登录成功（npm login 或者npm adduser 登录）；<br>是否已有重复的包名（修改package.json里的name或者使用scope）。<br>402错误</p><p>当使用npm publish发布带有scope作用域的包时，会出现402错误；<br>需使用npm publish –access&#x3D;public；<br>详细发布请看下面的发布私有包。<br>404错误</p><p>没有找到对应的路径，其实跟402错误差不多，基本都是作用域的问题</p><h3 id="发布私有包"><a href="#发布私有包" class="headerlink" title="发布私有包"></a>发布私有包</h3><p>我们在写组件库的时候会用到一些函数，这些都可以作为一个包进行发布，但是这些不需要发布为正式的包，只需要给组件库的主包使用，比如：</p><p><img src="/img/6.jpg"></p><p>package.json中如果name 是使用@xx来表示的则代表私有包，如果发布npm为私有包则需要收费，我们可以通过配置publishConfig字段将其表示为共有包，然后进行npm publish进行发布，如果不想写这个可以直接输入npm publish –access&#x3D;public 比如我的私有包的前缀是这个@coderxwx，@后面跟的是你npm的账号名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;@coderxwx/uv-ui-hooks&quot;</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo &quot;</span><span class="title class_">Error</span>: no test specified<span class="string">&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;publishConfig&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;access&quot;</span>: <span class="string">&quot;public&quot;</span>,</span><br><span class="line">    <span class="string">&quot;registry&quot;</span>: <span class="string">&quot;https://registry.npmjs.org/&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;coderxwx&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想使用自己的账号名作为私有包的前缀，可以创建一个组织<br><img src="/img/7.jpg"><br>创建完成后就可以使用这个名字来当前缀了，比如我创建的是uv-ui,之后就可以使用@uv-ui进行发布了。</p><h3 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a>更新组件</h3><p>当完成组件的修改后需要重新发布更新组件，这里有两种方式，一种是直接修改package.json中的version信息，然后进行npm publish</p><p>还有一种更规范的方式是使用npm的指令。</p><p>其中type有这些：</p><p>patch：小变动，比如修复bug等 版本号变动 v1.0.0-&gt;v1.0.1</p><p>minor：增加新功能，不影响现有功能 版本号变动 v1.0.0-&gt;v1.1.0</p><p>major：破坏模块对向后的兼容性，大版本更新 版本号变动 v1.0.0-&gt;v2.0.0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm version [type]</span><br><span class="line"></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><h3 id="文档编写"><a href="#文档编写" class="headerlink" title="文档编写"></a>文档编写</h3><p>我用的是vitepress来构建文档，基本没啥难度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vitepress -D</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;p&gt;目前流行的组件库搭建方式都是使用monorepo的方式，好处很多，可以在一个代码仓库中管理多个项目，可以达到项目之间的资源共享。这里也是使用这种方式。&lt;/p&gt;
&lt;h2 id=&quot;以-pnpm-构建-monorepo&quot;&gt;&lt;a href=&quot;#以-pnpm-构建-monorepo&quot; class=&quot;headerlink&quot; title=&quot;以 pnpm 构建 monorepo&quot;&gt;&lt;/a&gt;以 pnpm 构建 monorepo&lt;/h2&gt;&lt;p&gt;首先全局安装pnpm&lt;/p&gt;</summary>
    
    
    
    <category term="vue3" scheme="http://blog.ypintao.com/categories/vue3/"/>
    
    
    <category term="vue3" scheme="http://blog.ypintao.com/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>拖拽的形式生成页面的工具</title>
    <link href="http://blog.ypintao.com/2021/01/01/%E6%8B%96%E6%8B%BD%E5%81%9A%E6%B4%BB%E5%8A%A8/"/>
    <id>http://blog.ypintao.com/2021/01/01/%E6%8B%96%E6%8B%BD%E5%81%9A%E6%B4%BB%E5%8A%A8/</id>
    <published>2021-01-01T04:00:00.000Z</published>
    <updated>2025-09-23T08:07:03.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题"></a>要解决的问题</h2><p>从实现原理来说，其实需要解决的就是以下几个问题：</p><span id="more"></span><h2 id="需要有哪些可以编辑的元素？"><a href="#需要有哪些可以编辑的元素？" class="headerlink" title="需要有哪些可以编辑的元素？"></a>需要有哪些可以编辑的元素？</h2><p>文本、图片、形状、音频、链接等，二期以后会逐步增加更多的可编辑元素。</p><h2 id="如何编辑元素？"><a href="#如何编辑元素？" class="headerlink" title="如何编辑元素？"></a>如何编辑元素？</h2><p>通过点击或者上传的形式新增，通过拖拽来调整大小尺寸及位置，通过编辑面板来修改样式。同时，不同的元素将拥有不同的编辑面板，如文字类型，可以修改字体、颜色、大小、对齐方式等，而图片类型，则可以进行缩放、裁剪、圆角、阴影等调整。</p><h2 id="如何编辑和预览动画效果？"><a href="#如何编辑和预览动画效果？" class="headerlink" title="如何编辑和预览动画效果？"></a>如何编辑和预览动画效果？</h2><p>动画效果将模仿其他产品，合并至编辑面板，并通过点击图标的形式，更换不同的入场动画，更换的同时，触发本动画的实际效果预览。另外也可以点击独立的预览按钮，可以对已经编辑完毕的页面进行预览。</p><h2 id="如何实现与后台的数据交互？"><a href="#如何实现与后台的数据交互？" class="headerlink" title="如何实现与后台的数据交互？"></a>如何实现与后台的数据交互？</h2><p>按页和页内元素组合成一个json对象，附带音频信息传递至后台数据接口，读取时同样处理。</p><h2 id="如何将数据转换成手机端网页-所谓H5页面-？"><a href="#如何将数据转换成手机端网页-所谓H5页面-？" class="headerlink" title="如何将数据转换成手机端网页(所谓H5页面)？"></a>如何将数据转换成手机端网页(所谓H5页面)？</h2><p>借助vue的createElement方法，将json 逐一解析成对应的组件，渲染即可。<br>使用slider插件实现上下或者左右翻页。</p><h2 id="如何实现兼容手机端网页？"><a href="#如何实现兼容手机端网页？" class="headerlink" title="如何实现兼容手机端网页？"></a>如何实现兼容手机端网页？</h2><p>目前市面上，手动开发这类型网页，一般有两种兼容方式，即固定尺寸兼容及百分比兼容，我称之为主动兼容和被动兼容，区别主要是在与元素css的尺寸计算方式以及viewport的写法，这类型文章网上已经有不少，这里就不再敷述。而在本项目当中，最终选择的是两者相结合的方式来实现，原因在之后的文章中会提及。</p><h2 id="核心原理解析"><a href="#核心原理解析" class="headerlink" title="核心原理解析"></a>核心原理解析</h2><h3 id="将-JSON-转换成-H5"><a href="#将-JSON-转换成-H5" class="headerlink" title="将 JSON 转换成 H5"></a>将 JSON 转换成 H5</h3><p>相信阅读过 Vue JSX 文档 的同学对下面的代码应该不会陌生</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 以下代码来自：https://cn.vuejs.org/v2/guide/render-function.html#createElement-参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @returns &#123;VNode&#125;</span></span><br><span class="line"><span class="title function_">createElement</span>(</span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125;</span></span><br><span class="line">  <span class="comment">// An HTML tag name, component options, or async</span></span><br><span class="line">  <span class="comment">// function resolving to one of these. Required.</span></span><br><span class="line">  <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;Object&#125;</span></span><br><span class="line">  <span class="comment">// A data object corresponding to the attributes</span></span><br><span class="line">  <span class="comment">// you would use in a template. Optional.</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// (see details in the next section below)</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// Children VNodes, built using `createElement()`,</span></span><br><span class="line">  <span class="comment">// or using strings to get &#x27;text VNodes&#x27;. Optional.</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;Some text comes first.&#x27;</span>,</span><br><span class="line">    <span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;A headline&#x27;</span>),</span><br><span class="line">    <span class="title function_">createElement</span>(<span class="title class_">MyComponent</span>, &#123;</span><br><span class="line">      <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">someProp</span>: <span class="string">&#x27;foobar&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="抽象抽象再抽象"><a href="#抽象抽象再抽象" class="headerlink" title="抽象抽象再抽象"></a>抽象抽象再抽象</h3><p>我们对上面的 demo 进行进一步的抽象：</p><p>1、移除注释<br>2、把 createElement(tagName || componentOptions, {data}, children) 对应到上面的代码中，把 children 部分单独抽象成一个数组<br>3、整理之后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// a component options demo:</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = &#123;</span><br><span class="line">  <span class="attr">props</span>:[<span class="string">&#x27;someProp&#x27;</span>],</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, <span class="variable language_">this</span>.<span class="property">someProp</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// 这里的 render(createElement) 我们更常见的写法是：render(h) </span></span><br><span class="line">  <span class="comment">// 关于这部分的解释，可以参见: https://segmentfault.com/q/1010000007130348?_ea=17466196</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params">createElement</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pageJSON = [</span><br><span class="line">      <span class="string">&#x27;Some text comes first.&#x27;</span>,</span><br><span class="line">      <span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;A headline&#x27;</span>),</span><br><span class="line">      <span class="title function_">createElement</span>(<span class="title class_">MyComponent</span> <span class="comment">/** component options */</span>, &#123;</span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">          <span class="attr">someProp</span>: <span class="string">&#x27;foobar&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, pageJSON)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再抽象一步</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> pageJSON = [</span><br><span class="line">      &#123;<span class="attr">component</span>: <span class="string">&#x27;span&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;Some text comes first.&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">component</span>: <span class="string">&#x27;h1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;A headline&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">component</span>: <span class="string">&#x27;MyComponent&#x27;</span>, <span class="attr">data</span>: &#123;<span class="attr">props</span>: &#123;<span class="attr">someProp</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;&#125; &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, pageJSON.<span class="title function_">map</span>(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(ele.<span class="property">component</span>, ele.<span class="property">text</span> ? ele.<span class="property">text</span> : ele.<span class="property">data</span>)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再抽象一步(哎，不对啊，作者，我咋感觉你这一步啥都没做啊😂，你说对了）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PageJSON</span> = [</span><br><span class="line">  &#123;<span class="attr">component</span>: <span class="string">&#x27;span&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;Some text comes first.&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">component</span>: <span class="string">&#x27;h1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;A headline&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">component</span>: <span class="string">&#x27;MyComponent&#x27;</span>, <span class="attr">data</span>: &#123;<span class="attr">props</span>: &#123;<span class="attr">someProp</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;&#125; &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, pageJSON.<span class="title function_">map</span>(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(ele.<span class="property">component</span>, ele.<span class="property">text</span> ? ele.<span class="property">text</span> : ele.<span class="property">data</span>)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再抽象一步</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WorkJSON</span> = &#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;我是作品标题&#x27;</span>,</span><br><span class="line">    <span class="attr">description</span>: <span class="string">&#x27;我是作品描述&#x27;</span>,</span><br><span class="line">    <span class="attr">created_time</span>: <span class="string">&#x27;2019-09-01&#x27;</span>,</span><br><span class="line">    <span class="attr">updated_time</span>: <span class="string">&#x27;2019-09-01&#x27;</span>,</span><br><span class="line">    <span class="attr">pages</span>: [</span><br><span class="line">      <span class="attr">elements</span>: [</span><br><span class="line">          &#123;<span class="attr">component</span>: <span class="string">&#x27;span&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;Some text comes first.&#x27;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">component</span>: <span class="string">&#x27;h1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;A headline&#x27;</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">component</span>: <span class="string">&#x27;MyComponent&#x27;</span>, <span class="attr">data</span>: &#123;<span class="attr">props</span>: &#123;<span class="attr">someProp</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;&#125; &#125;</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;&#125;, <span class="title class_">WorkJSON</span>.<span class="property">pages</span>[<span class="number">0</span>].<span class="property">elements</span>.<span class="title function_">map</span>(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(ele.<span class="property">component</span>, ele.<span class="property">text</span> ? ele.<span class="property">text</span> : ele.<span class="property">data</span>)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相信到最后以这一步大家应该有些头绪了吧（要没有的话 😂😂😂，接着往下看吧）<br>其实鲁班H5的一个作品其实是一个就是一个大JSON(结构和上面的 WorkJSON 几乎一致)</p><p>这个大JSON 里面包含了很多页面,每个页面里面包含了很多元素<br>最终这个JSON 会传给 render(h) 进行解析渲染<br>到这里，也就能解答这一小节的问题了：</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;要解决的问题&quot;&gt;&lt;a href=&quot;#要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;要解决的问题&quot;&gt;&lt;/a&gt;要解决的问题&lt;/h2&gt;&lt;p&gt;从实现原理来说，其实需要解决的就是以下几个问题：&lt;/p&gt;</summary>
    
    
    
    <category term="vue2" scheme="http://blog.ypintao.com/categories/vue2/"/>
    
    
    <category term="vue2" scheme="http://blog.ypintao.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Location 与前端路由优先级，以及刷新404 原由</title>
    <link href="http://blog.ypintao.com/2021/01/01/%E8%B7%AF%E7%94%B1history%E6%A8%A1%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://blog.ypintao.com/2021/01/01/%E8%B7%AF%E7%94%B1history%E6%A8%A1%E5%BC%8F%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2021-01-01T04:00:00.000Z</published>
    <updated>2025-09-23T06:40:37.687Z</updated>
    
    <content type="html"><![CDATA[<p>问：前端路由和 nginx location 哪个优先级更高？<br>答：当然是 nginx location 优先级更高因为 nginx location 优先级更高，所以会导致 history 模式的SPA（单页应用）在刷新的时候，会有 404 的问题</p><span id="more"></span><p>访问<a href="http://www.abc.com/dashboard%EF%BC%8C%E7%82%B9%E5%87%BBlogout%E9%80%80%E5%87%BA%E7%B3%BB%E7%BB%9F%EF%BC%8C%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86%EF%BC%8C%E8%B7%B3%E8%BD%AC%E5%88%B0www.abc.com/login%E4%BD%86%E6%98%AF%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%B0%B1%E6%98%BE%E7%A4%BA">www.abc.com/dashboard，点击logout退出系统，前端路由处理，跳转到www.abc.com/login但是登录页面刷新之后，就显示</a> nginx 404 了奇怪的地方就在于，为何退出的时候，重定向到&#x2F;login的时候，没有报404, 为何一刷新就 404 了呢?前端路由重定向到&#x2F;login逻辑：this.$router.push({name: ‘login’});<br>贴下前端路由配置 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line"> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Login</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">NotFound</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  ]</span><br><span class="line">现有nginx配置location / &#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="regexp">/var/</span>data/<span class="keyword">static</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1、为何点击退出可以正常显示登录页面？"><a href="#1、为何点击退出可以正常显示登录页面？" class="headerlink" title="1、为何点击退出可以正常显示登录页面？"></a>1、为何点击退出可以正常显示登录页面？</h3><p>因为点击退出，前端路由this.$router.push({name: ‘login’});来实现跳转的，这时候已经有index.html 和相关的js了（也就是说这时候页面跳转的逻辑已经由 Vue-Router 或 React Router 接管了），可以直接使用前端路由跳转到&#x2F;login路由对应的组件</p><h3 id="2-为何刷新的时候显示-nginx-404"><a href="#2-为何刷新的时候显示-nginx-404" class="headerlink" title="2. 为何刷新的时候显示: nginx/404 ?"></a>2. 为何刷新的时候显示: <code>nginx/404</code> ?</h3><p>因为刷新的时候，会先向服务器请求<a href="http://www.abc.com/login%E8%BF%99%E6%97%B6%E5%80%99%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84nginx%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%B2%A1%E6%9C%89%E5%85%B3%E4%BA%8E/login%E8%B7%AF%E5%BE%84%E7%9A%84%E9%85%8D%E7%BD%AE">www.abc.com/login这时候服务器的nginx配置中没有关于/login路径的配置</a>(即没有 location &#x2F;login {})，因此 nginx 会直接报错nginx&#x2F;4043. 如何解决？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">按照如下方式配置nginx</span><br><span class="line"> location / &#123;</span><br><span class="line">     root: /var/data/static;</span><br><span class="line">     # 意思是说，在nginx 没有找到 /login 路径的时候，不要报错，要把 index.html 返回给客户端</span><br><span class="line">     # 这样客户端（浏览器）就能加载到路由相关的js 文件了</span><br><span class="line">     # 这时候，路由由前端接管，前端路由会查看路由表里面是否由 /login 的配置，有的话，跳转即可</span><br><span class="line">     try_file: /index.html;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="3-更多解释"><a href="#3-更多解释" class="headerlink" title="3. 更多解释"></a>3. 更多解释</h3><ol><li>nginx进行匹配路径的时候，发现没有<code>/login</code>的路径，便会转到<code>/</code>路径处理。</li><li>发现<code>root</code>路径下(是静态文件的root目录，不是linux的root目录)没有<code>login</code>文件，就会<code>try_file</code>规则，返回index.html,</li><li>这样浏览器拿到index.html 之后，开始加载其中的前端路由部分</li><li>这时候&#x2F;login就会在前端路由中找到匹配规则。</li></ol><h3 id="4-同理／404也可以写在前端路由中了"><a href="#4-同理／404也可以写在前端路由中了" class="headerlink" title="4. 同理／404也可以写在前端路由中了"></a>4. 同理<code>／404</code>也可以写在前端路由中了</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;问：前端路由和 nginx location 哪个优先级更高？&lt;br&gt;答：当然是 nginx location 优先级更高因为 nginx location 优先级更高，所以会导致 history 模式的SPA（单页应用）在刷新的时候，会有 404 的问题&lt;/p&gt;</summary>
    
    
    
    <category term="vue2" scheme="http://blog.ypintao.com/categories/vue2/"/>
    
    
    <category term="vue2" scheme="http://blog.ypintao.com/tags/vue2/"/>
    
  </entry>
  
  <entry>
    <title>render方法的具体含义</title>
    <link href="http://blog.ypintao.com/2021/01/01/render%E6%96%B9%E6%B3%95%E7%9A%84%E5%85%B7%E4%BD%93%E5%90%AB%E4%B9%89/"/>
    <id>http://blog.ypintao.com/2021/01/01/render%E6%96%B9%E6%B3%95%E7%9A%84%E5%85%B7%E4%BD%93%E5%90%AB%E4%B9%89/</id>
    <published>2021-01-01T04:00:00.000Z</published>
    <updated>2025-09-25T02:31:40.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-项目的main-js-中-render-h-h-App-具体含义解释"><a href="#Vue-项目的main-js-中-render-h-h-App-具体含义解释" class="headerlink" title="Vue 项目的main.js 中: render: h &#x3D;&gt; h(App) 具体含义解释"></a>Vue 项目的main.js 中: render: h &#x3D;&gt; h(App) 具体含义解释</h1><h2 id="请解释：render-h-h-App-这段话的意思？"><a href="#请解释：render-h-h-App-这段话的意思？" class="headerlink" title="请解释：render: h &#x3D;&gt; h(App) 这段话的意思？"></a>请解释：render: h &#x3D;&gt; h(App) 这段话的意思？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># main.<span class="property">js</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">router</span>: router,</span><br><span class="line">    <span class="attr">store</span>: store,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><p>render: h &#x3D;&gt; h(App) 是下面内容的缩写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">render: function (createElement) &#123;</span><br><span class="line">    return createElement(App);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步缩写为(ES6 语法)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">render</span> (createElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="title class_">App</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再进一步缩写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title function_">render</span> (h)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">h</span>(<span class="title class_">App</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照 ES6 箭头函数的写法，就得到了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>);</span><br></pre></td></tr></table></figure><p>其中 根据 Vue.js 作者 Even You 的解释，h 的含义如下：<br>它来自单词 hyperscript，这个单词通常用在 virtual-dom 的实现中。Hyperscript 本身是指生成HTML 结构的 script 脚本，因为 HTML 是 hyper-text markup language 的缩写（超文本标记语言）</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue-项目的main-js-中-render-h-h-App-具体含义解释&quot;&gt;&lt;a href=&quot;#Vue-项目的main-js-中-render-h-h-App-具体含义解释&quot; class=&quot;headerlink&quot; title=&quot;Vue 项目的main.js 中: render: h &amp;#x3D;&amp;gt; h(App) 具体含义解释&quot;&gt;&lt;/a&gt;Vue 项目的main.js 中: render: h &amp;#x3D;&amp;gt; h(App) 具体含义解释&lt;/h1&gt;&lt;h2 id=&quot;请解释：render-h-h-App-这段话的意思？&quot;&gt;&lt;a href=&quot;#请解释：render-h-h-App-这段话的意思？&quot; class=&quot;headerlink&quot; title=&quot;请解释：render: h &amp;#x3D;&amp;gt; h(App) 这段话的意思？&quot;&gt;&lt;/a&gt;请解释：render: h &amp;#x3D;&amp;gt; h(App) 这段话的意思？&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# main.&lt;span class=&quot;property&quot;&gt;js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Vue&lt;/span&gt;(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;el&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;#app&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;router&lt;/span&gt;: router,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;store&lt;/span&gt;: store,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;render&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;h&lt;/span&gt; =&amp;gt;&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;title class_&quot;&gt;App&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="vue2重点" scheme="http://blog.ypintao.com/categories/vue2%E9%87%8D%E7%82%B9/"/>
    
    
    <category term="vue2重点" scheme="http://blog.ypintao.com/tags/vue2%E9%87%8D%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>useState函数怎么实现的</title>
    <link href="http://blog.ypintao.com/2021/01/01/useState%E5%87%BD%E6%95%B0%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84/"/>
    <id>http://blog.ypintao.com/2021/01/01/useState%E5%87%BD%E6%95%B0%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84/</id>
    <published>2021-01-01T04:00:00.000Z</published>
    <updated>2025-09-24T06:28:31.487Z</updated>
    
    <content type="html"><![CDATA[<p>useState 是 React 提供的一个 Hook，用于在函数组件中添加状态。它的实现涉及 React 的内部机制，特别是状态管理和渲染流程。下面是一个简化的概念性解释，帮助你理解 useState 的大概实现原理。 </p><ol><li>状态存储</li></ol><p>React 内部维护了一个状态队列，用于存储所有 Hook 的状态。当你在组件中调用 useState 时，React 会根据当前渲染的 Hook 序列找到对应的状态值。<br>2. Hook 调用<br>每次调用 useState 时，React 会执行以下步骤：<br>检查状态队列：根据当前渲染的 Hook 序列，检查状态队列中是否有对应的状态值。<br>初始化状态：如果没有找到状态值（即第一次渲染），则使用传入的初始值进行初始化。<br>返回状态和更新函数：返回当前的状态值和一个用于更新该状态的函数。<br>3. 更新函数<br>useState 返回的更新函数（例如 setStoredValue）用于更新状态。当你调用这个函数时，React 会：<br>更新状态：将新的状态值放入状态队列中。<br>触发重渲染：将组件标记为需要重新渲染，并安排一次更新。<br>4. 解构赋值<br>useState 返回一个数组，你可以使用解构赋值来获取状态值和更新函数。解构赋值的语法使得你可以为数组中的元素指定任意的变量名。<br>5. 状态更新的批处理<br>React 会对状态更新进行批处理，以提高性能。这意味着在同一个事件处理程序中多次调用 setStoredValue，React 可能会将这些更新合并为一个更新。<br>6. 闭包陷阱<br>需要注意的是，由于函数组件的特性，每次渲染都会创建一个新的函数和新的状态变量。这可能会导致闭包陷阱，即在事件处理程序中获取到的是旧的状态值。为了避免这种情况，React 提供了一些机制，比如 useCallback 和 useRef，来帮助开发者更好地管理状态和回调函数。<br>示例代码<br>以下是一个简化的示例代码，展示了 useState 的基本用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ExampleComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>当前计数: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，useState(0) 返回一个数组，数组的第一个元素是当前的 count 值，第二个元素是用于更新 count 的 setCount 函数。<br>总结<br>useState 的实现依赖于 React 的内部状态队列和渲染机制。通过解构赋值，你可以方便地获取和更新状态，同时 React 会对状态更新进行优化，以提高应用的性能。</p><h2 id="useState能传函数吗"><a href="#useState能传函数吗" class="headerlink" title="useState能传函数吗"></a>useState能传函数吗</h2><p>是的，useState 可以传入函数作为初始状态的设置值。这种用法在某些情况下非常有用，特别是在初始状态的计算比较复杂或者依赖于其他值时。具体来说，useState 可以接受两种类型的初始状态：<br>直接值：你可以直接传入一个初始值，例如一个数字、字符串、对象等。<br>函数：你可以传入一个函数，这个函数会在组件的初始渲染时被调用，其返回值将作为初始状态。<br>使用函数作为初始状态<br>使用函数作为初始状态可以避免在每次渲染时都进行复杂的计算。这在初始状态计算成本较高时尤其有用。<br>示例代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ExampleComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 直接传入初始值</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用函数作为初始值</span></span><br><span class="line">  <span class="keyword">const</span> [complexState, setComplexState] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 复杂的初始状态计算</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span>, <span class="attr">computed</span>: <span class="title function_">expensiveComputation</span>() &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">expensiveComputation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 假设这是一个耗时的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;计算初始状态&#x27;</span>);</span><br><span class="line">    <span class="comment">// 返回计算结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>简单计数: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>复杂状态: &#123;JSON.stringify(complexState)&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setComplexState(&#123; ...complexState, key: &#x27;new value&#x27; &#125;)&#125;&gt;更新复杂状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ExampleComponent</span>;</span><br></pre></td></tr></table></figure><p>在这个示例中：<br>useState(0) 直接传入了一个初始值 0。<br>useState(() &#x3D;&gt; { … }) 传入了一个函数，这个函数会在组件初始渲染时被调用一次，用于计算初始状态。<br>为什么使用函数作为初始状态<br>性能优化：如果初始状态的计算比较复杂，使用函数可以避免在每次渲染时都进行这个计算，从而提高性能。<br>依赖初始化：如果初始状态的计算依赖于某些外部值或函数，使用函数可以确保这些值在组件初始渲染时被正确计算。<br>总结<br>useState 可以传入函数作为初始状态，这种方式有助于优化性能和处理依赖复杂的初始化逻辑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;useState 是 React 提供的一个 Hook，用于在函数组件中添加状态。它的实现涉及 React 的内部机制，特别是状态管理和渲染流程。下面是一个简化的概念性解释，帮助你理解 useState 的大概实现原理。 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;状态存储&lt;/li&gt;
&lt;/</summary>
      
    
    
    
    <category term="react" scheme="http://blog.ypintao.com/categories/react/"/>
    
    
    <category term="react" scheme="http://blog.ypintao.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React自定义Hook让逻辑复用</title>
    <link href="http://blog.ypintao.com/2021/01/01/React%E8%87%AA%E5%AE%9A%E4%B9%89Hook%E8%AE%A9%E9%80%BB%E8%BE%91%E5%A4%8D%E7%94%A8/"/>
    <id>http://blog.ypintao.com/2021/01/01/React%E8%87%AA%E5%AE%9A%E4%B9%89Hook%E8%AE%A9%E9%80%BB%E8%BE%91%E5%A4%8D%E7%94%A8/</id>
    <published>2021-01-01T04:00:00.000Z</published>
    <updated>2025-09-25T02:26:30.320Z</updated>
    
    <content type="html"><![CDATA[<p>你是不是经常在多个组件里写同样的逻辑？比如监听窗口大小变化，或者跟踪鼠标位置？每次都要写一遍useEffect添加监听，还要在卸载时清理事件… 这样的重复代码不仅浪费时间，还容易出错。今天我要分享的React自定义Hook，就是解决这个痛点的神器！它能让你像搭积木一样封装和复用组件逻辑，代码整洁度直接提升一个level！</p><span id="more"></span><h2 id="什么是React自定义Hook？"><a href="#什么是React自定义Hook？" class="headerlink" title="什么是React自定义Hook？"></a>什么是React自定义Hook？</h2><p>先看一个实际例子：<br>让我直接用一个获取窗口大小的例子来展示自定义Hook的魅力。没有自定义Hook之前，你可能这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span><span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [windowSize, setWindowSize] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleResize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setWindowSize</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清理函数：组件卸载时移除监听</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">// 空依赖数组表示只在组件挂载时执行一次</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      当前窗口大小：&#123;windowSize.width&#125; x &#123;windowSize.height&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写没问题，但如果另一个组件也需要窗口大小呢？难道要复制粘贴一遍？使用自定义Hook后，代码变得超简洁：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span><span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义Hook：useWindowSize</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useWindowSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [windowSize, setWindowSize] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleResize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setWindowSize</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> windowSize; <span class="comment">// 返回窗口大小状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件中使用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> windowSize = <span class="title function_">useWindowSize</span>(); <span class="comment">// 一行代码搞定！</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      当前窗口大小：&#123;windowSize.width&#125; x &#123;windowSize.height&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到差别了吗？自定义Hook把复杂的逻辑封装起来，使用时只需要一行代码！这才是真正的”写一次，到处用”。</p><h2 id="再来看一个跟踪鼠标位置的自定义Hook"><a href="#再来看一个跟踪鼠标位置的自定义Hook" class="headerlink" title="再来看一个跟踪鼠标位置的自定义Hook"></a>再来看一个跟踪鼠标位置的自定义Hook</h2><p>鼠标位置跟踪是另一个常见需求，比如实现拖拽效果、鼠标悬停提示等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span><span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义Hook：useMousePosition</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useMousePosition</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [position, setPosition] = <span class="title function_">useState</span>(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleMouseMove</span> = (<span class="params">event</span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setPosition</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>: event.<span class="property">clientX</span>,</span><br><span class="line">        <span class="attr">y</span>: event.<span class="property">clientY</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听鼠标移动事件</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, handleMouseMove);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, handleMouseMove);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []); <span class="comment">// 空依赖数组确保effect只运行一次</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> position; <span class="comment">// 返回鼠标位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CursorTracker</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> mousePos = <span class="title function_">useMousePosition</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      鼠标当前位置：(&#123;mousePos.x&#125;, &#123;mousePos.y&#125;)</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个组件也可以复用同样的逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Tooltip</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; x, y &#125; = <span class="title function_">useMousePosition</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">position:</span> &#x27;<span class="attr">absolute</span>&#x27;, <span class="attr">left:</span> <span class="attr">x</span> + <span class="attr">10</span>, <span class="attr">top:</span> <span class="attr">y</span> + <span class="attr">10</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是跟随鼠标的提示框！</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个例子展示了自定义Hook的核心价值：把状态逻辑从组件中提取出来，实现真正的逻辑复用。</p><h2 id="自定义Hook的命名约定：为什么一定要用use开头？"><a href="#自定义Hook的命名约定：为什么一定要用use开头？" class="headerlink" title="自定义Hook的命名约定：为什么一定要用use开头？"></a>自定义Hook的命名约定：为什么一定要用use开头？</h2><p>你可能注意到了，所有自定义Hook都以use开头，比如useWindowSize、useMousePosition。这可不是随便起的名字，而是React官方强制要求的约定！原因有三：让React工具能识别HookReact DevTools等调试工具依赖use前缀来识别哪些函数是Hook，这样在调试时能正确显示Hook的状态和调用顺序。避免违反Hook规则ESLint的React Hook插件会检查以use开头的函数，确保它们遵守Hook的规则。如果你不用use开头，这些重要的静态检查就失效了。提高代码可读性看到use开头，其他开发者（包括未来的你）立即知道这是一个自定义Hook，而不是普通函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ 正确：use开头，明确这是自定义Hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useLocalStorage</span>(<span class="params">key, initialValue</span>) &#123;</span><br><span class="line">  <span class="comment">// ... Hook逻辑</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ❌ 错误：没有use前缀，React工具无法识别</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLocalStorage</span>(<span class="params">key, initialValue</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里如果用了useState等Hook，ESLint会报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记住这个简单的规则：自定义Hook的名字必须以use开头，后面跟描述性的名称，使用驼峰命名法。</p><h2 id="实战：组合多个自定义Hook实现复杂功能"><a href="#实战：组合多个自定义Hook实现复杂功能" class="headerlink" title="实战：组合多个自定义Hook实现复杂功能"></a>实战：组合多个自定义Hook实现复杂功能</h2><p>真正的威力在于，你可以像搭积木一样组合多个自定义Hook！比如，我们要实现一个响应式的组件，在桌面端显示详细内容，在移动端显示简化版，并且根据鼠标位置改变样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合使用之前定义的两个Hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ResponsiveComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> windowSize = <span class="title function_">useWindowSize</span>();</span><br><span class="line">  <span class="keyword">const</span> mousePosition = <span class="title function_">useMousePosition</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isMobile = windowSize.<span class="property">width</span> &lt; <span class="number">768</span>;</span><br><span class="line">  <span class="keyword">const</span> isNearTop = mousePosition.<span class="property">y</span> &lt; <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">background:</span> <span class="attr">isNearTop</span> ? &#x27;#<span class="attr">f0f0f0</span>&#x27; <span class="attr">:</span> &#x27;#<span class="attr">ffffff</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">padding:</span> <span class="attr">isMobile</span> ? &#x27;<span class="attr">10px</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">20px</span>&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isMobile ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>移动端简化版<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h1</span>&gt;</span>桌面端详细内容<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>鼠标位置：(&#123;mousePosition.x&#125;, &#123;mousePosition.y&#125;)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>窗口大小：&#123;windowSize.width&#125; x &#123;windowSize.height&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种组合能力让代码既简洁又强大，每个Hook专注做好一件事，组件只关心如何组合这些功能。</p><h2 id="必须避开的坑：Hook的三大规则"><a href="#必须避开的坑：Hook的三大规则" class="headerlink" title="必须避开的坑：Hook的三大规则"></a>必须避开的坑：Hook的三大规则</h2><p>自定义Hook虽然强大，但必须遵守React Hook的基本规则，否则会掉进各种坑里。</p><h3 id="规则1：只在最顶层调用Hook不要在循环、条件或嵌套函数中调用Hook"><a href="#规则1：只在最顶层调用Hook不要在循环、条件或嵌套函数中调用Hook" class="headerlink" title="规则1：只在最顶层调用Hook不要在循环、条件或嵌套函数中调用Hook"></a>规则1：只在最顶层调用Hook不要在循环、条件或嵌套函数中调用Hook</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误示例：在条件语句中调用Hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BadComponent</span>(<span class="params">&#123; shouldTrack &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldTrack) &#123;</span><br><span class="line">    <span class="keyword">const</span> position = <span class="title function_">useMousePosition</span>(); <span class="comment">// 这样写会出错！</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>错误示例<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确写法：无条件调用，在effect中控制逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GoodComponent</span>(<span class="params">&#123; shouldTrack &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> position = <span class="title function_">useMousePosition</span>(); <span class="comment">// 始终调用</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldTrack) &#123;</span><br><span class="line">      <span class="comment">// 在这里使用position做某些事情</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;跟踪位置:&#x27;</span>, position);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [shouldTrack, position]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>正确示例<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么有这个规则？React依赖Hook的调用顺序来正确管理状态。如果条件不同导致Hook调用顺序变化，状态就会乱套。</p><h3 id="规则2：只在React函数中调用Hook"><a href="#规则2：只在React函数中调用Hook" class="headerlink" title="规则2：只在React函数中调用Hook"></a>规则2：只在React函数中调用Hook</h3><p>在React函数组件或自定义Hook中调用，不要在普通JavaScript函数中调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 错误：在普通函数中调用Hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">regularFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 报错！</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 正确：在组件或自定义Hook中调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useCustomHook</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 正确（自定义Hook也是Hook）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="规则3：自定义Hook必须返回需要的内容"><a href="#规则3：自定义Hook必须返回需要的内容" class="headerlink" title="规则3：自定义Hook必须返回需要的内容"></a>规则3：自定义Hook必须返回需要的内容</h3><p>根据需要返回状态、函数或其他值，保持接口清晰</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ✅ 好的设计：返回需要的状态和操作方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useToggle</span>(<span class="params">initialValue = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(initialValue);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggle</span> = (<span class="params"></span>) =&gt; <span class="title function_">setValue</span>(!value);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setTrue</span> = (<span class="params"></span>) =&gt; <span class="title function_">setValue</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setFalse</span> = (<span class="params"></span>) =&gt; <span class="title function_">setValue</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [value, toggle, setTrue, setFalse]; <span class="comment">// 返回数组方便重命名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时的灵活性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isOpen, toggleOpen, open, close] = <span class="title function_">useToggle</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleOpen&#125;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;open&#125;</span>&gt;</span>打开<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;close&#125;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isOpen &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进阶技巧：带参数的自定义Hook"><a href="#进阶技巧：带参数的自定义Hook" class="headerlink" title="进阶技巧：带参数的自定义Hook"></a>进阶技巧：带参数的自定义Hook</h2><p>自定义Hook可以接受参数，根据参数不同返回不同的逻辑。比如，一个增强版的localStorage Hook：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useLocalStorage</span>(<span class="params">key, initialValue</span>) &#123;</span><br><span class="line">  <span class="comment">// 从localStorage读取初始值</span></span><br><span class="line">  <span class="keyword">const</span> [storedValue, setStoredValue] = <span class="title function_">useState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> item = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line">      <span class="keyword">return</span> item ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(item) : initialValue;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">      <span class="keyword">return</span> initialValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回的setter函数会同时更新状态和localStorage</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setValue</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 允许value是函数，就像useState一样</span></span><br><span class="line">      <span class="keyword">const</span> valueToStore = value instanceofFunction ? <span class="title function_">value</span>(storedValue) : value;</span><br><span class="line">      <span class="title function_">setStoredValue</span>(valueToStore);</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(key, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(valueToStore));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [storedValue, setValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserSettings</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 不同的key创建不同的存储空间</span></span><br><span class="line">  <span class="keyword">const</span> [username, setUsername] = <span class="title function_">useLocalStorage</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [theme, setTheme] = <span class="title function_">useLocalStorage</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;username&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setUsername(e.target.value)&#125; </span></span><br><span class="line"><span class="language-xml">        placeholder=&quot;输入用户名&quot;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;theme&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;e</span> =&gt;</span> setTheme(e.target.value)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;light&quot;</span>&gt;</span>浅色<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;dark&quot;</span>&gt;</span>深色<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="真实场景：封装数据获取逻辑"><a href="#真实场景：封装数据获取逻辑" class="headerlink" title="真实场景：封装数据获取逻辑"></a>真实场景：封装数据获取逻辑</h2><p>数据获取是自定义Hook的经典应用场景。看看如何封装一个通用的数据获取Hook：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useApi</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> [loading, setLoading] = <span class="title function_">useState</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [error, setError] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchData</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">true</span>);</span><br><span class="line">        <span class="title function_">setError</span>(<span class="literal">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">          <span class="title function_">thrownewError</span>(<span class="string">`HTTP错误: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="title function_">setData</span>(result);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="title function_">setError</span>(err.<span class="property">message</span>);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="title function_">setLoading</span>(<span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fetchData</span>();</span><br><span class="line">  &#125;, [url]); <span class="comment">// url变化时重新获取</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; data, loading, error &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UserProfile</span>(<span class="params">&#123; userId &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: user, loading, error &#125; = <span class="title function_">useApi</span>(<span class="string">`/api/users/<span class="subst">$&#123;userId&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (loading) <span class="keyword">return</span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">return</span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>错误: &#123;error&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  <span class="keyword">if</span> (!user) <span class="keyword">return</span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>用户不存在<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;user.email&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个useApi Hook处理了加载状态、错误处理、数据缓存等繁琐细节，让组件代码变得异常简洁。</p><h2 id="性能优化：避免不必要的重新渲染"><a href="#性能优化：避免不必要的重新渲染" class="headerlink" title="性能优化：避免不必要的重新渲染"></a>性能优化：避免不必要的重新渲染</h2><p>自定义Hook也可能引入性能问题，特别是当返回对象或数组时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ❌ 可能引起性能问题：每次渲染都返回新对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useUserInfo</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次渲染都返回新对象，即使user没变</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    user,</span><br><span class="line">    <span class="attr">isAdmin</span>: user?.<span class="property">role</span> === <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">canEdit</span>: user?.<span class="property">permissions</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ✅ 优化版本：使用useMemo缓存计算结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useUserInfoOptimized</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [user, setUser] = <span class="title function_">useState</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> userInfo = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    user,</span><br><span class="line">    <span class="attr">isAdmin</span>: user?.<span class="property">role</span> === <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="attr">canEdit</span>: user?.<span class="property">permissions</span>?.<span class="title function_">includes</span>(<span class="string">&#x27;edit&#x27;</span>)</span><br><span class="line">  &#125;), [user]); <span class="comment">// 只有user变化时才重新计算</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试自定义Hook：确保可靠性"><a href="#测试自定义Hook：确保可靠性" class="headerlink" title="测试自定义Hook：确保可靠性"></a>测试自定义Hook：确保可靠性</h2><p>自定义Hook也需要测试！推荐使用@testing-library&#x2F;react-hooks：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; renderHook, act &#125; <span class="keyword">from</span><span class="string">&#x27;@testing-library/react-hooks&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounter &#125; <span class="keyword">from</span><span class="string">&#x27;./useCounter&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;useCounter应该正确增加计数&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; result &#125; = <span class="title function_">renderHook</span>(<span class="function">() =&gt;</span> <span class="title function_">useCounter</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始值应该是0</span></span><br><span class="line">  <span class="title function_">expect</span>(result.<span class="property">current</span>.<span class="property">count</span>).<span class="title function_">toBe</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 测试increment</span></span><br><span class="line">  <span class="title function_">act</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    result.<span class="property">current</span>.<span class="title function_">increment</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(result.<span class="property">current</span>.<span class="property">count</span>).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结：什么时候该用自定义Hook？"><a href="#总结：什么时候该用自定义Hook？" class="headerlink" title="总结：什么时候该用自定义Hook？"></a>总结：什么时候该用自定义Hook？</h2><p>经过这么多例子，你可能想问：到底什么时候应该创建自定义Hook？<br>适合使用自定义Hook的场景：<br>多个组件共享相同的状态逻辑<br>复杂的useEffect逻辑需要封装<br>想要分离关注点，让组件更专注于UI<br>需要复用数据获取、事件监听等副作用逻辑</p><p>不适合的情况：<br>逻辑只在一个组件中使用，且不太可能复用<br>逻辑非常简单，封装反而增加复杂度<br>只是简单的工具函数，不涉及React状态或生命周期</p><p>自定义Hook是React函数组件的终极武器，它让逻辑复用变得前所未有的简单。从今天开始，试着把你项目中的重复逻辑提取成自定义Hook吧！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;你是不是经常在多个组件里写同样的逻辑？比如监听窗口大小变化，或者跟踪鼠标位置？每次都要写一遍useEffect添加监听，还要在卸载时清理事件… 这样的重复代码不仅浪费时间，还容易出错。今天我要分享的React自定义Hook，就是解决这个痛点的神器！它能让你像搭积木一样封装和复用组件逻辑，代码整洁度直接提升一个level！&lt;/p&gt;</summary>
    
    
    
    <category term="react" scheme="http://blog.ypintao.com/categories/react/"/>
    
    
    <category term="react" scheme="http://blog.ypintao.com/tags/react/"/>
    
  </entry>
  
</feed>
