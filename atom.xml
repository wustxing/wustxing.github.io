<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wustxing</title>
  <subtitle>wustxing技术栈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ypintao.com/"/>
  <updated>2017-07-16T10:28:19.987Z</updated>
  <id>http://blog.ypintao.com/</id>
  
  <author>
    <name>wustxing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>混合开发注意事项</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html"/>
    <id>http://blog.ypintao.com/技术/web前端/混合开发/混合开发注意事项.html</id>
    <published>2017-07-14T16:00:00.000Z</published>
    <updated>2017-07-16T10:28:19.987Z</updated>
    
    <content type="html"><![CDATA[<p>开个标题<br><strong>安卓调用js传参数</strong></p>
<h2 id="单个参数"><a href="#单个参数" class="headerlink" title="单个参数"></a>单个参数</h2><h2 id="多个参数"><a href="#多个参数" class="headerlink" title="多个参数"></a>多个参数<a id="more"></a></h2><h2 id="传对象"><a href="#传对象" class="headerlink" title="传对象"></a>传对象</h2><h2 id="传list"><a href="#传list" class="headerlink" title="传list"></a>传list</h2><p><strong>js调用安卓传参数</strong></p>
<h2 id="单个参数-1"><a href="#单个参数-1" class="headerlink" title="单个参数"></a>单个参数</h2><h2 id="多个参数-1"><a href="#多个参数-1" class="headerlink" title="多个参数"></a>多个参数</h2><h2 id="传对象-1"><a href="#传对象-1" class="headerlink" title="传对象"></a>传对象</h2><h2 id="传list-1"><a href="#传list-1" class="headerlink" title="传list"></a>传list</h2><p>优化相关 jj<br>1、看看能不能把html代码放在应用里面，当没有网络的时候 这样就可以和原生的一样了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开个标题&lt;br&gt;&lt;strong&gt;安卓调用js传参数&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;单个参数&quot;&gt;&lt;a href=&quot;#单个参数&quot; class=&quot;headerlink&quot; title=&quot;单个参数&quot;&gt;&lt;/a&gt;单个参数&lt;/h2&gt;&lt;h2 id=&quot;多个参数&quot;&gt;&lt;a href=&quot;#多个参数&quot; class=&quot;headerlink&quot; title=&quot;多个参数&quot;&gt;&lt;/a&gt;多个参数
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="混合开发" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="CSS" scheme="http://blog.ypintao.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>媒体查询</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/CSS/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2.html"/>
    <id>http://blog.ypintao.com/技术/web前端/CSS/媒体查询.html</id>
    <published>2017-04-25T16:00:00.000Z</published>
    <updated>2017-04-26T14:36:36.667Z</updated>
    
    <content type="html"><![CDATA[<p>转眼一个月过去了。休假也休完了。回来认真的学习了。<br>又有了一些idea，比如微信服务号，比如淘宝抓取数据应用。然后下面我们将要讲解的是一个小知识点<br>媒体查询，或许大伙都已经很熟悉了，也就是前几天认认真真的复习了一遍，处于做什么事都要有一个结果的心态，做个记录吧。<a id="more"></a></p>
<p>首先我们需要知道移动设备优先，html结构</p>
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

<p>width = device-width：宽度等于当前设备的宽度<br>initial-scale： 初始的缩放比例（默认设置为1.0）<br>minimum-scale：允许用户缩放到的最小比例（默认设置为1.0）<br>maximum-scale：允许用户缩放到的最大比例（默认设置为1.0）<br>user-scalable：用户是否可以手动缩放（默认设置为no，因为我们不希望用户放大缩小页面）</p>
<p><meta http-equiv="X-UA-Compatible" ;content="IE=edge, chrome=1"><br>如果有的用户电脑里面装了这个chrome的插件，<br>就可以让电脑里面的IE不管是哪个版本的都可以使用Webkit引擎及V8引擎进行排版及运算</p>
<p>如果用户没装这个插件，那这段代码就会<br>让IE以最高的文档模式展现效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">@media (max-width:750px)&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and ;(orientation:portrait)&quot; ;href=&quot;style.css&quot;&gt;</div><div class="line">移动设备是不是纵向放置的显示屏</div><div class="line"></div><div class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; media=&quot;screen and (max-width:960px)&quot; href=&quot;style.css&quot;&gt;</div><div class="line">让页面宽度小于960的执行指定的样式文件</div></pre></td></tr></table></figure>
<h3 id="Media所有参数汇总"><a href="#Media所有参数汇总" class="headerlink" title="Media所有参数汇总"></a>Media所有参数汇总</h3><p>以上就是我们最常需要用到的媒体查询器的三个特性，大于，等于，小于的写法。媒体查询器的全部功能肯定不止这三个功能，下面是我总结的它的一些参数用法解释：<br>width:浏览器可视宽度。<br>height:浏览器可视高度。<br>device-width:设备屏幕的宽度。<br>device-height:设备屏幕的高度。<br>orientation:检测设备目前处于横向还是纵向状态。<br>aspect-ratio:检测浏览器可视宽度和高度的比例。(例如：aspect-ratio:16/9)<br>device-aspect-ratio:检测设备的宽度和高度的比例。<br>color:检测颜色的位数。（例如：min-color:32就会检测设备是否拥有32位颜色）<br>color-index:检查设备颜色索引表中的颜色，他的值不能是负数。<br>monochrome:检测单色楨缓冲区域中的每个像素的位数。（这个太高级，估计咱很少会用的到）<br>resolution:检测屏幕或打印机的分辨率。(例如：min-resolution:300dpi或min-resolution:118dpcm)。<br>grid:检测输出的设备是网格的还是位图设备。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转眼一个月过去了。休假也休完了。回来认真的学习了。&lt;br&gt;又有了一些idea，比如微信服务号，比如淘宝抓取数据应用。然后下面我们将要讲解的是一个小知识点&lt;br&gt;媒体查询，或许大伙都已经很熟悉了，也就是前几天认认真真的复习了一遍，处于做什么事都要有一个结果的心态，做个记录吧。
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="CSS" scheme="http://blog.ypintao.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Angular1最佳实践</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/AngularJS/AngularJS%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html"/>
    <id>http://blog.ypintao.com/技术/web前端/AngularJS/AngularJS最佳实践.html</id>
    <published>2017-04-01T16:00:00.000Z</published>
    <updated>2017-04-26T14:39:21.280Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/wustxing/angular1-demo.git" target="_blank" rel="external">https://github.com/wustxing/angular1-demo.git</a></p>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/wustxing/angular1-demo.git&quot;&gt;https://github.com/wustxing/angular1-demo.git&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="AngularJS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://blog.ypintao.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>SASS在webstrom下的安装</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/SASS/SASS%E5%9C%A8webstrom%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85.html"/>
    <id>http://blog.ypintao.com/技术/web前端/SASS/SASS在webstrom下的安装.html</id>
    <published>2017-03-29T16:00:00.000Z</published>
    <updated>2017-04-26T14:40:05.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sass在webstrom下的安装步骤"><a href="#sass在webstrom下的安装步骤" class="headerlink" title="sass在webstrom下的安装步骤"></a>sass在webstrom下的安装步骤</h2><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sass在webstrom下的安装步骤&quot;&gt;&lt;a href=&quot;#sass在webstrom下的安装步骤&quot; class=&quot;headerlink&quot; title=&quot;sass在webstrom下的安装步骤&quot;&gt;&lt;/a&gt;sass在webstrom下的安装步骤&lt;/h2&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="SASS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/SASS/"/>
    
    
      <category term="SASS" scheme="http://blog.ypintao.com/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>关于angularjs用到的技术总结</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/AngularJS/AngularJS%E6%80%BB%E7%BB%93.html"/>
    <id>http://blog.ypintao.com/技术/web前端/AngularJS/AngularJS总结.html</id>
    <published>2017-03-29T16:00:00.000Z</published>
    <updated>2017-04-26T14:38:07.410Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>1、bootstrap</li>
<li>2、ui-root</li>
<li>3、angularjs</li>
<li>4、jquery</li>
<li>5、requirejs</li>
<li>6、nginx作为代理</li>
<li>7、<a id="more"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;1、bootstrap&lt;/li&gt;
&lt;li&gt;2、ui-root&lt;/li&gt;
&lt;li&gt;3、angularjs&lt;/li&gt;
&lt;li&gt;4、jquery&lt;/li&gt;
&lt;li&gt;5、requirejs&lt;/li&gt;
&lt;li&gt;6、nginx作为代理&lt;/li&gt;
&lt;li&gt;7、
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="AngularJS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/AngularJS/"/>
    
    
      <category term="AngularJS" scheme="http://blog.ypintao.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>ionic的app目录约定</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/IONIC/ionic%E7%9A%84app%E7%9B%AE%E5%BD%95%E7%BA%A6%E5%AE%9A.html"/>
    <id>http://blog.ypintao.com/技术/web前端/IONIC/ionic的app目录约定.html</id>
    <published>2017-03-29T16:00:00.000Z</published>
    <updated>2017-04-26T14:46:24.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="IONIC-的目录约定以及一些基本用法"><a href="#IONIC-的目录约定以及一些基本用法" class="headerlink" title="IONIC 的目录约定以及一些基本用法"></a>IONIC 的目录约定以及一些基本用法</h3><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;IONIC-的目录约定以及一些基本用法&quot;&gt;&lt;a href=&quot;#IONIC-的目录约定以及一些基本用法&quot; class=&quot;headerlink&quot; title=&quot;IONIC 的目录约定以及一些基本用法&quot;&gt;&lt;/a&gt;IONIC 的目录约定以及一些基本用法&lt;/h3&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="IONIC" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/IONIC/"/>
    
    
      <category term="IONIC" scheme="http://blog.ypintao.com/tags/IONIC/"/>
    
  </entry>
  
  <entry>
    <title>RequireJS的使用结合angular</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/RequireJS/RequireJS%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%93%E5%90%88angular.html"/>
    <id>http://blog.ypintao.com/技术/web前端/RequireJS/RequireJS的使用结合angular.html</id>
    <published>2017-03-29T16:00:00.000Z</published>
    <updated>2017-04-26T14:39:53.251Z</updated>
    
    <content type="html"><![CDATA[<p>###Requirejs结合angular的使用<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###Requirejs结合angular的使用&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="RequireJS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/RequireJS/"/>
    
    
      <category term="RequireJS" scheme="http://blog.ypintao.com/tags/RequireJS/"/>
    
  </entry>
  
  <entry>
    <title>js作用域</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/JS/js%E4%BD%9C%E7%94%A8%E5%9F%9F.html"/>
    <id>http://blog.ypintao.com/技术/web前端/JS/js作用域.html</id>
    <published>2017-03-26T16:00:00.000Z</published>
    <updated>2017-04-26T14:46:19.523Z</updated>
    
    <content type="html"><![CDATA[<p>有很多人问js闭包是什么，有的说是函数作用域，有的说是函数内部能够访问函数外部，反正我是不知道怎么描述<br>下面就来看看我们的例子。<a id="more"></a></p>
<p>1、一个简单的例子,怎么区分普通对象和函数对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function a1()&#123;&#125;;</div><div class="line">var a2 = function()&#123;&#125;;</div><div class="line">var a3 = new Function(&apos;str&apos;,&apos;console.log(str)&apos;);</div><div class="line"></div><div class="line">var b1 = &#123;&#125;;</div><div class="line">var b2 = new Object();</div><div class="line">var b3 = new a1();</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有很多人问js闭包是什么，有的说是函数作用域，有的说是函数内部能够访问函数外部，反正我是不知道怎么描述&lt;br&gt;下面就来看看我们的例子。
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/JS/"/>
    
    
      <category term="JS" scheme="http://blog.ypintao.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>css3的一些新用法</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/CSS/css3%E5%B1%9E%E6%80%A7%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95.html"/>
    <id>http://blog.ypintao.com/技术/web前端/CSS/css3属性一些用法.html</id>
    <published>2017-03-25T16:00:00.000Z</published>
    <updated>2017-03-25T16:32:39.230Z</updated>
    
    <content type="html"><![CDATA[<p>直接上例子了。</p>
<ul>
<li><h3 id="after实现画图"><a href="#after实现画图" class="headerlink" title="::after实现画图"></a>::after实现画图</h3></li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">  <span class="attribute">border-radius</span>:<span class="number">50%</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#333</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">''</span>,</div><div class="line">  display:block;</div><div class="line">  <span class="attribute">width</span>:<span class="number">8px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">60px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">right</span>: -<span class="number">22</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">38</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h3 id="attr和content实现悬浮提示"><a href="#attr和content实现悬浮提示" class="headerlink" title="attr和content实现悬浮提示"></a>attr和content实现悬浮提示</h3><blockquote>
<p>attr：能够在css中获取到元素的某个属性值，然后插入到伪元素的content中去。</p>
</blockquote>
</li>
</ul>
<p>html代码如下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-title</span>=<span class="string">"hello, world"</span>&gt;</span>hello...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>下面看看如何实现悬浮提示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">div &#123;</div><div class="line">    position: relative;</div><div class="line">&#125;</div><div class="line">div:hover::after &#123;</div><div class="line">    content: attr(data-title);    //取到data-title属性的值</div><div class="line">    display: inline-block;</div><div class="line">    padding: 10px 14px;</div><div class="line">    border: 1px solid #ddd;</div><div class="line">    border-radius: 5px;</div><div class="line">    position: absolute;</div><div class="line">    top: -50px;</div><div class="line">    left: -30px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3>在标准盒子模型中，元素的总宽＝content + padding + border + margin。</li>
</ul>
<p>box-sizing属性就是用来重定义这个计算方式的，它有三个取值，分别是：content-box（默认）、border-box、padding-box</p>
<p>一般来说，假如我们需要有一个占宽200px、padding10px、border5px的div，经过计算，要这么定义样式。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line"><span class="comment">/*这里的宽度要使用200-10*2-5*2 = 170得到。*/</span></div><div class="line">    <span class="attribute">width</span>: <span class="number">170px</span>;   </div><div class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果使用box-sizing</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line"><span class="comment">/*这里的宽度就是元素所占总宽度，不需要计算*/</span>  </div><div class="line">    <span class="attribute">box-sizing</span>: border-box; </div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;  </div><div class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="linear-gradient-线性渐变"><a href="#linear-gradient-线性渐变" class="headerlink" title="linear-gradient 线性渐变"></a>linear-gradient 线性渐变</h3></li>
</ul>
<p>做活动页面的时候我们经常会遇到这样的需求：</p>
<p>顶部的中间一张大banner图片，然后整个区域的背景色要根据图片背景色渐变。就可以使用这个属性了。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, yellow, black, green);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有repeating-linear-gradient也可以试试效果</p>
<ul>
<li><h3 id="radial-gradient-经向渐变"><a href="#radial-gradient-经向渐变" class="headerlink" title="radial-gradient 经向渐变"></a>radial-gradient 经向渐变</h3></li>
<li><h3 id="box-shadow-阴影效果"><a href="#box-shadow-阴影效果" class="headerlink" title="box-shadow 阴影效果"></a>box-shadow 阴影效果</h3>box-shadow: [x偏移] [y偏移] [阴影模糊宽度] [阴影宽度] [颜色]，并且还能添加多个阴影，使用逗号隔开。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直接上例子了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;after实现画图&quot;&gt;&lt;a href=&quot;#after实现画图&quot; class=&quot;headerlink&quot; title=&quot;::after实现画图&quot;&gt;&lt;/a&gt;::after实现画图&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5px&lt;/span&gt; solid &lt;span class=&quot;number&quot;&gt;#333&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;::after&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  display:block;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;60px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#333&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;right&lt;/span&gt;: -&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;transform&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;rotate&lt;/span&gt;(-45deg);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="CSS" scheme="http://blog.ypintao.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>pomelo并非完全的游戏引擎</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/%E6%A1%86%E6%9E%B6demo/%E6%B8%B8%E6%88%8F%E6%A1%86%E6%9E%B6pomelo.html"/>
    <id>http://blog.ypintao.com/技术/框架demo/游戏框架pomelo.html</id>
    <published>2017-03-23T16:00:00.000Z</published>
    <updated>2017-03-24T15:26:30.894Z</updated>
    
    <content type="html"><![CDATA[<p>前几天有个朋友问，棋牌游戏js可以做不，由于对于游戏这一块基本算是空白，所以就稍微查了下资料，不想，有新的发现。<br>大名鼎鼎的pomelo 大家应该不陌生。<br>没想到他的文档还挺齐全的，它是基于nodejs的，下面介绍下pomelo的安装</p>
<ul>
<li><h4 id="Pomelo的设计动机"><a href="#Pomelo的设计动机" class="headerlink" title="Pomelo的设计动机"></a>Pomelo的设计动机</h4></li>
</ul>
<p>pomelo最初的设计初衷是为了游戏服务器， 不过在设计、开发完成后发现pomelo是个通用的分布式实时应用开发框架。下面将结合实际，从游戏服务器的需求，以及开发中面临的问题等方面阐述pomelo的设计动机。<a id="more"></a></p>
<ul>
<li><h4 id="游戏服务器概述"><a href="#游戏服务器概述" class="headerlink" title="游戏服务器概述"></a>游戏服务器概述</h4>没开发过游戏的人会觉得游戏服务器是很神秘的东西。但事实上它并不比web服务器复杂，无非是给客户端提供网络请求服务，本质上它只是基于长连接的socket服务器。当然在逻辑复杂性、消息量、实时性方面有更高的要求，下面从web服务器与游戏服务器的对比中来说明游戏服务器的一些特点：</li>
</ul>
<p>复杂的socket服务器</p>
<p>如果说web服务器的本质是http服务器，那么游戏服务器的本质就是socket服务器。 它利用socket通讯来实现服务器与客户端之间的交互。事实上有不少游戏是直接基于原生socket来开发的。 相对于简单的socket服务器，它承受着更加繁重的任务：</p>
<p>后端承载着极复杂的游戏逻辑。<br>网络流量与消息量巨大，且实时性要求高。<br>通常一台socket服务器无法支撑复杂的游戏逻辑，因此往往使用一个服务器集群来提供服务。<br>长连接和实时响应</p>
<p>web应用都是基于request/response的短连接模式,占用的资源要比一直hold长连接的游戏服务器要少很多，因此web应用可以使用基于http的短连接来达到最大的可扩展性，Web应用能使用短连接模式的原因如下：</p>
<p>通讯的单向性，普通web应用一般只有拉模式<br>响应的实时性要求不高，一般web应用的响应时间在3秒以内都算响应比较及时的。<br>而游戏应用只能使用长连接，原因如下：</p>
<p>通讯的双向性，游戏应用不仅仅是推拉模式，而且推送的数据量要远远大于拉的数据量<br>响应的实时性要求极高，一般游戏应用要求推送的消息实时反应，而实时响应的最大时间是100ms。<br>分区策略与负载均衡</p>
<p>普通的web应用在交互上没有相邻性的概念，所有用户之间的交互都是平等，交互频率也不受地域限制。 而游戏则不然，游戏交互跟玩家所在地图（场景）上的位置关系非常大，如两个玩家在相邻的地方可以互相PK或组队打怪。这种相邻的交互频率非常高，对实时性的要求也非常高，这就必须要求相邻玩家在分布在同一个进程里。于是就有了按场景分区的策略，如图所示：</p>
<p><img src="https://github.com/NetEase/pomelo/wiki/images/processArea.png" alt=""></p>
<p>一个进程里可以有一个场景，也可以有多个场景。这种实现带来了游戏的可伸缩性受到场景进程的限制，如果某个场景过于烦忙可能会把进程撑爆，也就把整个游戏撑爆。场景服务器是有状态的，每个用户请求必须发回原来的场景服务器。服务器的有状态带来一系列的问题：场景进程的可伸缩，高可用性等都比不上web服务器。目前只能通过游戏服务器的隔离来缓解这些问题。</p>
<p>web应用的分区可以根据负载均衡自由决定， 而游戏则是基于场景(area)的分区模式， 这使同场景的玩家跑在一个进程内， 以达到最少的跨进程调用。</p>
<p>可伸缩性与分布式开发</p>
<p>不管是web应用还是游戏服务器，可伸缩性始终是最重要的指标，也是最棘手的问题，它涉及到系统运行架构的搭建，各种优化策略。 只有把可伸缩性设计好了，游戏的规模、同时在线人数、响应时间等参数才能得到保证。最初的网络服务器是单进程的架构，所有的逻辑都在单台服务器内完成， 这对于同时在线要求不高的游戏是可以这么做的。由于同时在线人数的上升， 单服务器的可伸缩性必然受到挑战。随着网络游戏对可伸缩性要求的增加，分布式是必然的趋势的。 下面是一个web服务器和游戏服务器架构对比的示意图：</p>
<p><img src="https://github.com/NetEase/pomelo/wiki/images/webGameComp.png" alt="1"></p>
<p>可以看到由于web服务器的无状态性，只需要通过前端的负载均衡器可以导向任意一个进程，因此运行架构相对简单， 而且很少需要分布式开发。</p>
<p>而游戏服务器是蜘蛛网式的架构，每个进程都有各自的职责，这些进程的交织在一起共同完成一件任务。因此游戏服务器是一个标准的分布式开发架构。</p>
<ul>
<li><h4 id="pomelo的定位"><a href="#pomelo的定位" class="headerlink" title="pomelo的定位"></a>pomelo的定位</h4></li>
</ul>
<p>pomelo是一个轻量级的服务器框架，它最适合的应用领域是网页游戏、社交游戏、移动游戏的服务端，开发者会发现pomelo可以用如此少的代码达到强大的扩展性和伸缩性。当然还不仅仅是游戏，用pomelo开发高实时web应用也如此合适， 而且伸缩性比其它框架好。</p>
<p>不推荐将pomelo用于大型的MMORPG游戏开发，尤其是大型3D游戏， 还是需要象Bigworld这样的商用引擎来支撑。</p>
<ul>
<li><p>####安装条件<br>1、确保机器能够上网。<br>2、需要安装node，python2.5以上，以及c++的编译器。</p>
<ul>
<li>python(2.5&lt;version&lt;3.0)。</li>
<li>VC++ 编译器，包含在Visual Studio 2010中（VC++ 2010 Express亦可）。对于windows8的用户，需要安装Microsoft Visual Studio C++ 2012。</li>
</ul>
</li>
<li><p>####开始安装</p>
</li>
</ul>
<blockquote>
<p>npm install pomelo -g</p>
</blockquote>
<p>windows下安装一定用注意python的环境变量配置</p>
<ol>
<li>node,vs2010 和 python(2.5&lt;v&lt;3) 都是32位或者都是64位的。</li>
<li>配置  PYTHON=d:\Python27\python.exe(设置成你自己的路径)。注意不是path里面,而是和path同级的，直接在全局或者当前用户下配置。</li>
<li>保证环境变量path里面有 %SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;<br>注： 这三个环境变量中貌似只有%SystemRoot%\system32这个环境变量有用，没具体试（没有他会报CreateProcessW找不到的错误)。</li>
<li>如果在命令行界面安装pomelo失败，可以在Visual Studio的命令行界面安装。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天有个朋友问，棋牌游戏js可以做不，由于对于游戏这一块基本算是空白，所以就稍微查了下资料，不想，有新的发现。&lt;br&gt;大名鼎鼎的pomelo 大家应该不陌生。&lt;br&gt;没想到他的文档还挺齐全的，它是基于nodejs的，下面介绍下pomelo的安装&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Pomelo的设计动机&quot;&gt;&lt;a href=&quot;#Pomelo的设计动机&quot; class=&quot;headerlink&quot; title=&quot;Pomelo的设计动机&quot;&gt;&lt;/a&gt;Pomelo的设计动机&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;pomelo最初的设计初衷是为了游戏服务器， 不过在设计、开发完成后发现pomelo是个通用的分布式实时应用开发框架。下面将结合实际，从游戏服务器的需求，以及开发中面临的问题等方面阐述pomelo的设计动机。
    
    </summary>
    
      <category term="demo" scheme="http://blog.ypintao.com/categories/demo/"/>
    
    
      <category term="demo" scheme="http://blog.ypintao.com/tags/demo/"/>
    
  </entry>
  
  <entry>
    <title>二维码活码生成原理</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/IDEA/%E6%B4%BB%E7%A0%81%E7%94%9F%E6%88%90%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://blog.ypintao.com/技术/IDEA/活码生成实现.html</id>
    <published>2017-03-22T16:00:00.000Z</published>
    <updated>2017-03-23T12:38:34.804Z</updated>
    
    <content type="html"><![CDATA[<h3 id="二维码分类"><a href="#二维码分类" class="headerlink" title="二维码分类"></a>二维码分类</h3><p>二维码分类这里就直接套用草根二维码的原话了，总结的非常好。</p>
<h5 id="什么是二维码、静态码、活码？"><a href="#什么是二维码、静态码、活码？" class="headerlink" title="什么是二维码、静态码、活码？"></a>什么是二维码、静态码、活码？</h5><ul>
<li><strong>静态码</strong>：是直接对电话、地址、网址等信息进行编码（一般最多50个文字）， 所以无需联网也能扫描显示，缺点是生成的二维码图案非常复杂，不容易识别和打印，容错率低；而且印刷后内容无法变更，无法存储图片和文件。</li>
<li><strong>活码</strong>：是对一个分配的短网址进行编码，扫描后跳转到这个网址。这样将内容存储在云端，可以随时更新、可跟踪扫描统计，可存放图片视频、大量文字内容，同时图案简单易扫。 草料活码永久免费面向用户开放。草料经过近三年的积累，开发了活码管理系统，实现了活码的在线修改、后台管理等功能。<a id="more"></a></li>
</ul>
<h3 id="链接转二维码"><a href="#链接转二维码" class="headerlink" title="链接转二维码"></a>链接转二维码</h3><p>基于jquery-qrcode很好实现一个链接转二维码的例子，在这里就不过多讲解了。</p>
<h3 id="链接转活码"><a href="#链接转活码" class="headerlink" title="链接转活码"></a>链接转活码</h3><p><strong>链接转活码</strong>，采用 链接A—-&gt;生成guid并将链接和guid存储到数据库——&gt;生成一个服务器端的api的带有guid参数的二维码图片，这样不管多长的链接都能生成一个固定的短码图片了。</p>
<p>当用户扫描二维码的时候，访问的是服务器端api带有参数的的二维码，这个api获取参数以后去查询，找到之前生成的链接，然后重定向跳转到相应的链接。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;二维码分类&quot;&gt;&lt;a href=&quot;#二维码分类&quot; class=&quot;headerlink&quot; title=&quot;二维码分类&quot;&gt;&lt;/a&gt;二维码分类&lt;/h3&gt;&lt;p&gt;二维码分类这里就直接套用草根二维码的原话了，总结的非常好。&lt;/p&gt;
&lt;h5 id=&quot;什么是二维码、静态码、活码？&quot;&gt;&lt;a href=&quot;#什么是二维码、静态码、活码？&quot; class=&quot;headerlink&quot; title=&quot;什么是二维码、静态码、活码？&quot;&gt;&lt;/a&gt;什么是二维码、静态码、活码？&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态码&lt;/strong&gt;：是直接对电话、地址、网址等信息进行编码（一般最多50个文字）， 所以无需联网也能扫描显示，缺点是生成的二维码图案非常复杂，不容易识别和打印，容错率低；而且印刷后内容无法变更，无法存储图片和文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;活码&lt;/strong&gt;：是对一个分配的短网址进行编码，扫描后跳转到这个网址。这样将内容存储在云端，可以随时更新、可跟踪扫描统计，可存放图片视频、大量文字内容，同时图案简单易扫。 草料活码永久免费面向用户开放。草料经过近三年的积累，开发了活码管理系统，实现了活码的在线修改、后台管理等功能。
    
    </summary>
    
      <category term="IDEA" scheme="http://blog.ypintao.com/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="http://blog.ypintao.com/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>小总结</title>
    <link href="http://blog.ypintao.com/%E9%9A%8F%E7%AC%94/%E5%8D%9A%E5%AE%A2%E4%BB%8E%E6%96%B0%E8%B5%B7%E8%88%AA.html"/>
    <id>http://blog.ypintao.com/随笔/博客从新起航.html</id>
    <published>2017-03-20T16:00:00.000Z</published>
    <updated>2017-03-22T06:06:59.258Z</updated>
    
    <content type="html"><![CDATA[<p>最近家里一直断网来着，然后刚好在找工作，就写个总结，然后分个类别，把自己掌握的一些个东西写出来。所以有了这个，嘿嘿。其实，觉得有些东西还是记下来靠谱，至少学习得留下一些印记吧，不知不觉毕业5年了，在这5年里，技术的广度算是摸的差不多了，就像很多公司跻身于这大大互联网一样，我跻身于这浩浩荡荡的程序员的世界，写过桌面应用，做过paas平台，倒腾过数据库，慢慢的也算是见过一些场面了。<a id="more"></a></p>
<p>其实写下这篇文章的目的是为了先给自己总结下，然后分个类别。以后玩东西的时候也好往相应的类别下面丢东西。<br>目前熟练使用的东西大概有：</p>
<h3 id="后端："><a href="#后端：" class="headerlink" title="后端："></a>后端：</h3><pre><code>.Net MVC
Node Express
</code></pre><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><pre><code>angularjs
ionic
WPF
winform
</code></pre><h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><pre><code>gulp
requirejs
</code></pre><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><pre><code>jenkins
</code></pre><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><pre><code>git
</code></pre><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><pre><code>mysql
sqlserver
mongodb
</code></pre><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><pre><code>windos
linux
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近家里一直断网来着，然后刚好在找工作，就写个总结，然后分个类别，把自己掌握的一些个东西写出来。所以有了这个，嘿嘿。其实，觉得有些东西还是记下来靠谱，至少学习得留下一些印记吧，不知不觉毕业5年了，在这5年里，技术的广度算是摸的差不多了，就像很多公司跻身于这大大互联网一样，我跻身于这浩浩荡荡的程序员的世界，写过桌面应用，做过paas平台，倒腾过数据库，慢慢的也算是见过一些场面了。
    
    </summary>
    
      <category term="随笔" scheme="http://blog.ypintao.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="文章" scheme="http://blog.ypintao.com/categories/%E9%9A%8F%E7%AC%94/%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="心情" scheme="http://blog.ypintao.com/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>关于正则</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/JS/%E5%85%B3%E4%BA%8E%E6%AD%A3%E5%88%99.html"/>
    <id>http://blog.ypintao.com/技术/web前端/JS/关于正则.html</id>
    <published>2016-08-03T16:00:00.000Z</published>
    <updated>2017-03-22T06:56:58.963Z</updated>
    
    <content type="html"><![CDATA[<p>在这里我不统一讲解正则的具体用法<br>就讲解我们平常用的一些知识</p>
<ul>
<li>^ 匹配开始、</li>
<li>$匹配结束、</li>
<li><ul>
<li>匹配1个或多个、</li>
</ul>
</li>
<li>? 匹配0个或一个、</li>
<li>*匹配0个或多个、</li>
<li>g全局匹配、</li>
<li>\d 匹配所有数字、</li>
<li>\w 匹配所有字符、</li>
<li>\s 匹配所有空格<a id="more"></a></li>
</ul>
<p>用正则写出trim函数<br>trim函数主要是去除头尾空格<br>str.replace(/^\s|\s$/g,””);</p>
<p>邮箱匹配</p>
<ul>
<li>/^\w*@\w{2,3}.[com|cn]/</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里我不统一讲解正则的具体用法&lt;br&gt;就讲解我们平常用的一些知识&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;^ 匹配开始、&lt;/li&gt;
&lt;li&gt;$匹配结束、&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;匹配1个或多个、&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;? 匹配0个或一个、&lt;/li&gt;
&lt;li&gt;*匹配0个或多个、&lt;/li&gt;
&lt;li&gt;g全局匹配、&lt;/li&gt;
&lt;li&gt;\d 匹配所有数字、&lt;/li&gt;
&lt;li&gt;\w 匹配所有字符、&lt;/li&gt;
&lt;li&gt;\s 匹配所有空格
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/JS/"/>
    
    
      <category term="JS" scheme="http://blog.ypintao.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>关于前端漏洞</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/JS/%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E6%BC%8F%E6%B4%9E.html"/>
    <id>http://blog.ypintao.com/技术/web前端/JS/关于前端漏洞.html</id>
    <published>2016-07-10T16:00:00.000Z</published>
    <updated>2017-03-22T07:09:16.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xss，csrf（Cross-site-request-forgery）跨站点请求伪造"><a href="#xss，csrf（Cross-site-request-forgery）跨站点请求伪造" class="headerlink" title="xss，csrf（Cross-site request forgery）跨站点请求伪造"></a>xss，csrf（Cross-site request forgery）跨站点请求伪造</h2><p>####xss :  xss就是在页面执行你想要的js</p>
<h5 id="XSS-防御技巧"><a href="#XSS-防御技巧" class="headerlink" title="XSS 防御技巧"></a>XSS 防御技巧</h5><p>XSS 防御技巧</p>
<p>HttpOnly</p>
<p>服务器端在设置安全级别高的Cookie时，带上HttpOnly的属性，就能防止JavaScript获取。<a id="more"></a><br>PHP设置HttpOnly：<br>1 &lt;?2 header(“Set-Cookie: a=1;”, false);3 header(“Set-Cookie: b=1;httponly”, false);4 setcookie(“c”, “1”, NULL, NULL, NULL, NULL, ture);</p>
<p>输入检查</p>
<p>任何用户输入的数据，都是“不可信”的。<br>输入检查，一般是用于输入格式检查，例如：邮箱、电话号码、用户名这些…<br>都要按照规定的格式输入：电话号码必须纯是数字和规定长度；用户名除 中英文数字 外，仅允许输入几个安全的符号。<br>输入过滤不能完全交由前端负责，前端的输入过滤只是为了避免普通用户的错误输入，减轻服务器的负担。<br>因为攻击者完全可以绕过正常输入流程，直接利用相关接口向服务器发送设置。<br>所以，前端和后端要做相同的过滤检查。</p>
<p>输出检查</p>
<p>相比输入检查，前端更适合做输出检查。<br>可以看到，HttpOnly和前端没直接关系，输入检查的关键点也不在于前端。<br>那XSS的防御就和前端没关系了?<br>当然不是，随着移动端web开发发展起来了，Ajax的使用越来越普遍，越来越多的操作都交给前端来处理。<br>前端也需要做好XSS防御。<br>JavaScript直接通过Ajax向服务器请求数据，接口把数据以JSON格式返回。前端整合处理数据后，输出页面。<br>所以，前端的XSS防御点，在于输出检查。</p>
<p>但也要结合XSS可能发生的场景。</p>
<p>XSS注意场景</p>
<p>在HTML标签中输出<br>如：{$var}<br>风险：{$var} 为 <img src="#" onerror="/xss/"><br>防御手段：变量HtmlEncode后输出</p>
<p>在HTML属性中输出<br>如：<div data-num="{$var}"></div><br>风险：{$var} 为 “ onclick=”/xss/<br>防御手段：变量HtmlEncode后输出</p>
<p>在<script>标签中输出<br>如：<script>var num = {$var};</script><br>风险：{$var} 为 1; alert(/xss/)<br>防御手段：确保输出变量在引号里面，再让变量JavaScriptEncode后输出。</p>
<p>在事件中输出<br>如：<span onclick="fun({$var})">hello!click me!</span><br>风险：{$var} 为 ); alert(/xss/); //<br>防御手段：确保输出变量在引号里面，再让变量JavaScriptEncode后输出。</p>
<p>在CSS中输出<br>一般来说，尽量禁止用户可控制的变量在<style>标签和style属性中输出。</p>
<p>#####HtmlEncode</p>
<p>对下列字符实现编码</p>
<ul>
<li>&amp; ——》 &amp;</li>
<li>&lt; ——》 &lt;</li>
<li>——》 &gt;</li>
<li>“ ——》 “</li>
<li>‘ ——》 ‘ （IE不支持’）</li>
<li>/ ——》 /</li>
</ul>
<p>######JavaScriptEncode</p>
<p>对下列字符加上反斜杠</p>
<ul>
<li>“ ——》 \”</li>
<li>‘ ——》 \’</li>
<li>\ ——》 \</li>
<li>\n ——》 \n</li>
<li>\r ——》 \r (Windows下的换行符)</li>
</ul>
<p>例子： “\”.replace(/\/g, “\“); //return \<br>URLEncode<br>使用以下JS原生方法进行URI编码和解码：<br>encodeURI<br>decodeURI<br>decodeURIComponent<br>encodeURIComponent</p>
<h4 id="CSRF（Cross-site-request-forgery）"><a href="#CSRF（Cross-site-request-forgery）" class="headerlink" title="CSRF（Cross-site request forgery）"></a>CSRF（Cross-site request forgery）</h4><p>CSRF 即：跨站点请求伪造<br>网站A ：为恶意网站。<br>网站B ：用户已登录的网站。<br>当用户访问 A站 时，A站 私自访问 B站 的操作链接，模拟用户操作。<br>假设B站有一个删除评论的链接：<a href="http://b.com/comment/?type=delete&amp;id=81723">http://b.com/comment/?type=delete&amp;id=81723</a><br>A站 直接访问该链接，就能删除用户在 B站 的评论。</p>
<p>CSRF 的攻击策略</p>
<p>因为浏览器访问 B站 相关链接时，会向其服务器发送 B站 保存在本地的Cookie，以判断用户是否登陆。所以通过 A站 访问的链接，也能顺利执行。</p>
<h4 id="CSRF-防御技巧"><a href="#CSRF-防御技巧" class="headerlink" title="CSRF 防御技巧"></a>CSRF 防御技巧</h4><h5 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h5><p>几乎所有人都知道验证码，但验证码不单单用来防止注册机的暴力破解，还可以有效防止CSRF的攻击。<br>验证码算是对抗CSRF攻击最简洁有效的方法。<br>但使用验证码的问题在于，不可能在用户的所有操作上都需要输入验证码。<br>只有一些关键的操作，才能要求输入验证码。<br>不过随着HTML5的发展。<br>利用canvas标签，前端也能识别验证码的字符，让CSRF生效。</p>
<h5 id="Referer-Check"><a href="#Referer-Check" class="headerlink" title="Referer Check"></a>Referer Check</h5><p>Referer Check即来源检测。<br>HTTP Referer 是 Request Headers 的一部分，当浏览器向web服务器发出请求的时候，一般会带上Referer，告诉服务器用户从哪个站点链接过来的。<br>服务器通过判断请求头中的referer，也能避免CSRF的攻击。</p>
<h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><p>CSRF能攻击成功，根本原因是：操作所带的参数均被攻击者猜测到。<br>既然知道根本原因，我们就对症下药，利用Token。<br>当向服务器传参数时，带上Token。这个Token是一个随机值，并且由服务器和用户同时持有。<br>Token可以存放在用户浏览器的Cookie中，<br>当用户提交表单时带上Token值，服务器就能验证表单和Cookie中的Token是否一致。<br>（前提，网站没有XSS漏洞，攻击者不能通过脚本获取用户的Cookie）</p>
</style></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;xss，csrf（Cross-site-request-forgery）跨站点请求伪造&quot;&gt;&lt;a href=&quot;#xss，csrf（Cross-site-request-forgery）跨站点请求伪造&quot; class=&quot;headerlink&quot; title=&quot;xss，csrf（Cross-site request forgery）跨站点请求伪造&quot;&gt;&lt;/a&gt;xss，csrf（Cross-site request forgery）跨站点请求伪造&lt;/h2&gt;&lt;p&gt;####xss :  xss就是在页面执行你想要的js&lt;/p&gt;
&lt;h5 id=&quot;XSS-防御技巧&quot;&gt;&lt;a href=&quot;#XSS-防御技巧&quot; class=&quot;headerlink&quot; title=&quot;XSS 防御技巧&quot;&gt;&lt;/a&gt;XSS 防御技巧&lt;/h5&gt;&lt;p&gt;XSS 防御技巧&lt;/p&gt;
&lt;p&gt;HttpOnly&lt;/p&gt;
&lt;p&gt;服务器端在设置安全级别高的Cookie时，带上HttpOnly的属性，就能防止JavaScript获取。
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/JS/"/>
    
    
      <category term="JS" scheme="http://blog.ypintao.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JS问题汇总</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/JS/JS%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"/>
    <id>http://blog.ypintao.com/技术/web前端/JS/JS问题汇总.html</id>
    <published>2016-06-30T16:00:00.000Z</published>
    <updated>2017-03-22T06:57:06.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、如何解决跨域问题"><a href="#1、如何解决跨域问题" class="headerlink" title="1、如何解决跨域问题"></a>1、如何解决跨域问题</h3><p>  nginx代理，或后端设置，</p>
<h3 id="2、移动端的点击事件有延迟，时间是多久，为什么会有，怎么解决这个延时（click有300ms延迟，为了实现Safari的双击时间的设计，浏览器要知道你是不是双击操作。）"><a href="#2、移动端的点击事件有延迟，时间是多久，为什么会有，怎么解决这个延时（click有300ms延迟，为了实现Safari的双击时间的设计，浏览器要知道你是不是双击操作。）" class="headerlink" title="2、移动端的点击事件有延迟，时间是多久，为什么会有，怎么解决这个延时（click有300ms延迟，为了实现Safari的双击时间的设计，浏览器要知道你是不是双击操作。）"></a>2、移动端的点击事件有延迟，时间是多久，为什么会有，怎么解决这个延时（click有300ms延迟，为了实现Safari的双击时间的设计，浏览器要知道你是不是双击操作。）</h3><a id="more"></a>
<h3 id="3、异步加载的方式有哪些"><a href="#3、异步加载的方式有哪些" class="headerlink" title="3、异步加载的方式有哪些"></a>3、异步加载的方式有哪些</h3><ul>
<li>1、js动态加载dom元素</li>
<li>2、onload异步加载</li>
<li>3、使用requerjs这种，是属于异步加载。</li>
</ul>
<h3 id="4、javascript原型，原型链，？有什么特点？"><a href="#4、javascript原型，原型链，？有什么特点？" class="headerlink" title="4、javascript原型，原型链，？有什么特点？"></a>4、javascript原型，原型链，？有什么特点？</h3><p>*每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念。<br>关系：instance.constructor.prototype = instance.__proto<em>\</em></p>
<h3 id="5、Javascript作用链域"><a href="#5、Javascript作用链域" class="headerlink" title="5、Javascript作用链域?"></a>5、Javascript作用链域?</h3><ul>
<li>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。 当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链。</li>
</ul>
<h3 id="6、用原生javascript的实现过说明功能。"><a href="#6、用原生javascript的实现过说明功能。" class="headerlink" title="6、用原生javascript的实现过说明功能。"></a>6、用原生javascript的实现过说明功能。</h3><ul>
<li>（如果会用node）知道route，middleware，cluster，nodemon,pm2,server-side rendering么解释一下backbone的mvc实现方式。</li>
</ul>
<h3 id="7、javascript对象的几种创建方式"><a href="#7、javascript对象的几种创建方式" class="headerlink" title="7、javascript对象的几种创建方式"></a>7、javascript对象的几种创建方式</h3><ul>
<li>javascript创建对象简单的说,<br>无非就是使用内置对象或各种自定义对象，当然还可以用JSON；<br>但写法有很多种，也能混合使用。</li>
<li><p>1、对象字面量的方式  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person=&#123;firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>2、用function来模拟无参的构造函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person();<span class="comment">//定义一个function，如果使用new"实例化",该function可以看作是一个Class</span></div><div class="line">person.name=<span class="string">"Mark"</span>;</div><div class="line">person.age=<span class="string">"25"</span>;</div><div class="line">person.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(person.name+<span class="string">" hello..."</span>);</div><div class="line"> &#125;</div><div class="line">person.work();</div></pre></td></tr></table></figure>
</li>
<li><p>3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function Pet(name,age,hobby)&#123;</div><div class="line">   this.name=name;//this作用域：当前对象</div><div class="line">   this.age=age;</div><div class="line">   this.hobby=hobby;</div><div class="line">   this.eat=function()&#123;</div><div class="line">      alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">var maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象</div><div class="line">maidou.eat();//调用eat方法</div></pre></td></tr></table></figure>
</li>
<li><p>4、用工厂方式来创建（内置对象）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var wcDog =new Object();</div><div class="line">wcDog.name=&quot;旺财&quot;;</div><div class="line">wcDog.age=3;</div><div class="line">wcDog.work=function()&#123;</div><div class="line">  alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);</div><div class="line">&#125;</div><div class="line">wcDog.work();</div></pre></td></tr></table></figure>
</li>
<li><p>5、用原型方式来创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function Dog()&#123;</div><div class="line"> &#125;</div><div class="line"> Dog.prototype.name=&quot;旺财&quot;;</div><div class="line"> Dog.prototype.eat=function()&#123;</div><div class="line"> alert(this.name+&quot;是个吃货&quot;);</div><div class="line"> &#125;</div><div class="line"> var wangcai =new Dog();</div><div class="line"> wangcai.eat();</div></pre></td></tr></table></figure>
</li>
<li><p>6、用混合方式来创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">   function Car(name,price)&#123;</div><div class="line">     this.name=name;</div><div class="line">     this.price=price;</div><div class="line">    &#125;</div><div class="line">    Car.prototype.sell=function()&#123;</div><div class="line">      alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);</div><div class="line">     &#125;</div><div class="line">   var camry =new Car(&quot;凯美瑞&quot;,27);</div><div class="line">camry.sell();</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="8、documen-write和innerHTML的区别"><a href="#8、documen-write和innerHTML的区别" class="headerlink" title="8、documen.write和innerHTML的区别"></a>8、documen.write和innerHTML的区别</h3><h3 id="9、简述一下handlebars的基本用法"><a href="#9、简述一下handlebars的基本用法" class="headerlink" title="9、简述一下handlebars的基本用法"></a>9、简述一下handlebars的基本用法</h3><h3 id="10、jquery的源码看过吗？能不能简单的说下他的视线原理？"><a href="#10、jquery的源码看过吗？能不能简单的说下他的视线原理？" class="headerlink" title="10、jquery的源码看过吗？能不能简单的说下他的视线原理？"></a>10、jquery的源码看过吗？能不能简单的说下他的视线原理？</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、如何解决跨域问题&quot;&gt;&lt;a href=&quot;#1、如何解决跨域问题&quot; class=&quot;headerlink&quot; title=&quot;1、如何解决跨域问题&quot;&gt;&lt;/a&gt;1、如何解决跨域问题&lt;/h3&gt;&lt;p&gt;  nginx代理，或后端设置，&lt;/p&gt;
&lt;h3 id=&quot;2、移动端的点击事件有延迟，时间是多久，为什么会有，怎么解决这个延时（click有300ms延迟，为了实现Safari的双击时间的设计，浏览器要知道你是不是双击操作。）&quot;&gt;&lt;a href=&quot;#2、移动端的点击事件有延迟，时间是多久，为什么会有，怎么解决这个延时（click有300ms延迟，为了实现Safari的双击时间的设计，浏览器要知道你是不是双击操作。）&quot; class=&quot;headerlink&quot; title=&quot;2、移动端的点击事件有延迟，时间是多久，为什么会有，怎么解决这个延时（click有300ms延迟，为了实现Safari的双击时间的设计，浏览器要知道你是不是双击操作。）&quot;&gt;&lt;/a&gt;2、移动端的点击事件有延迟，时间是多久，为什么会有，怎么解决这个延时（click有300ms延迟，为了实现Safari的双击时间的设计，浏览器要知道你是不是双击操作。）&lt;/h3&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/JS/"/>
    
    
      <category term="JS" scheme="http://blog.ypintao.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>从输入url到浏览器显示页面发生了什么</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/JS/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%BE%E7%A4%BA%E9%A1%B5%E9%9D%A2%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88.html"/>
    <id>http://blog.ypintao.com/技术/web前端/JS/从输入url到浏览器显示页面发生了什么.html</id>
    <published>2016-06-30T16:00:00.000Z</published>
    <updated>2017-03-22T07:09:00.784Z</updated>
    
    <content type="html"><![CDATA[<p>#####这个过程大致分为两个部分：网络通信和页面渲染。</p>
<h6 id="1、网络通信"><a href="#1、网络通信" class="headerlink" title="1、网络通信"></a>1、网络通信</h6><p>互联网内各网络设备间的通信都遵循TCP/IP协议，利用TCP/IP协议进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层，传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层往上走：</p>
<p>如图</p>
<p>应用层——&gt;传输层——&gt;网络层——&gt;数据链路层</p>
<p>HTTP客户端——&gt;TCP—-&gt;IP——&gt;网络</p>
<ul>
<li><p>在浏览器输入url<a id="more"></a></p>
</li>
<li><p>应用层DNS解析域名</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">客户端先检查本地是否有对应的ip地址，</div><div class="line">若找到则返回响应的ip地址。</div><div class="line">若没有找到则请求上级DNS服务器，</div><div class="line">直至找到或到根节点。</div></pre></td></tr></table></figure>
<ul>
<li>应用层客户端发送HTTP请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HTTP请求包括请求报头和请求主体两个部分</div><div class="line">，其中请求报头包含至关重要的信息，</div><div class="line">包括请求的方法GET、POST,、目标url、遵循的协议（http，https，ftp），</div><div class="line">返回的信息是否需要缓存，以及客户端是否发送cookie等。</div></pre></td></tr></table></figure>
<ul>
<li>传输层TCP传输报文</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">位于传输层的TCP协议为传输报文提供可靠的字节流服务，他为了方便传</div><div class="line">输，将打款的数据分割成以报文段为单位的数据包进行管理，并为他们编</div><div class="line">号，方便服务器接收时能准确地还原报文信息，TCP协议通过三次握手等</div><div class="line">方法保证传输的安全可靠。</div><div class="line">  三次握手的过程是，发送端先发送一个带有SYN标志的数据包给接收</div><div class="line">端，以一定的延时时间内，等待接收的回复，接收端收到数据包后，传回</div><div class="line">一个带有SYN/ACK标志的数据包以表示传达确认信息，接收方收到后再发</div><div class="line">送一个带有ACK标志的数据包给接收端表示握手成功，在这个过程中，如</div><div class="line">果发送端在规定的延时时间内没有收到回复则默认接收方没有收到请求，</div><div class="line">而在次发送，知道收到回复为止</div></pre></td></tr></table></figure>
<ul>
<li>网络层IP协议查询MAC地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  IP协议的作用是把TCP分割好的各种数据包，传送给接收方。而要保证确</div><div class="line">实能够传到接收方还需要接收方的MAC地址，也就是物理地址，IP地址和</div><div class="line">MAC地址是一一对应的关系，一个网络设备的IP地址可以更换，但是MAC</div><div class="line">地址一般是固定不变的，Arp协议，可以将IP地址解析成对应的MAC地</div><div class="line">址，当通信的双方不再同一个局域网时，需要多次中转才能到达最终的目</div><div class="line">标，在中转的过程中，需要通过下一个中转站的MAC地址来搜索下一个中</div><div class="line">转目标。8135</div></pre></td></tr></table></figure>
<ul>
<li>数据到达数据链路层</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在找到对方的mac地址以后，就将数据发送到数据链路层传输，这时，客</div><div class="line">户端发送请求的阶段结束</div></pre></td></tr></table></figure>
<ul>
<li>服务器接收数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">接收端的服务器在链路层收到数据包，再层层向上直到应用层，这过程中</div><div class="line">包括在运输层通过TCP协议将分段的数据包重新组成原来的HTTP请求报</div><div class="line">文，</div></pre></td></tr></table></figure>
<ul>
<li>服务器响应请求</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">服务接收到客户端发送的HTTP请求后，查找客户端请求的资源，并返回</div><div class="line">响应的报文，响应的报文中包括一个重要的信息------状态码。状态码由三</div><div class="line">位数字组成，其中比较常见的是200OK表示成功，301表示永久重定向。</div><div class="line">即请求的资源已经永久转移到新的位置。在返回301状态码的同事，响应</div><div class="line">报文也会附带重定向的url，客户端接收到后将http请求的url做相应的改变</div><div class="line">再重新发送。</div></pre></td></tr></table></figure>
<ul>
<li>服务器返回相应文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">请求成功后，服务器会返回相应的HTML文件，接下来就到了页面的渲染</div><div class="line">阶段。</div></pre></td></tr></table></figure>
<h6 id="2、页面渲染"><a href="#2、页面渲染" class="headerlink" title="2、页面渲染"></a>2、页面渲染</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">浏览器渲染页面的过程是这样的：</div><div class="line">解析HTML以构建DOM树----&gt;构建渲染树----&gt;布局渲染树----&gt;绘制渲染</div><div class="line">树。</div><div class="line">DOM树是由HTML文件中的标签排列组成，渲染树是在DOM树种加入css</div><div class="line">或者html种的style样式而形成的。渲染树只包含需要显示在页面中的DOM</div><div class="line">元素，像&lt;head&gt;元素或display属性值为none的元素都不在渲染树中。</div><div class="line">在浏览器还没有接收到完整的html文件时，他就开始渲染页面了。在遇到</div><div class="line">外部链入的脚本标签或样式标签或图片时，会再次发送HTTP请求重复上</div><div class="line">述步骤，在收到css文件后会对已经渲染的页面重新渲染，加入他们应有的</div><div class="line">样式，图片文件加载完立刻显示在相应位置。在这一过程中可能会触发页</div><div class="line">面的重绘或重排。</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#####这个过程大致分为两个部分：网络通信和页面渲染。&lt;/p&gt;
&lt;h6 id=&quot;1、网络通信&quot;&gt;&lt;a href=&quot;#1、网络通信&quot; class=&quot;headerlink&quot; title=&quot;1、网络通信&quot;&gt;&lt;/a&gt;1、网络通信&lt;/h6&gt;&lt;p&gt;互联网内各网络设备间的通信都遵循TCP/IP协议，利用TCP/IP协议进行网络通信时，会通过分层顺序与对方进行通信。分层由高到低分别为：应用层，传输层、网络层、数据链路层。发送端从应用层往下走，接收端从数据链路层往上走：&lt;/p&gt;
&lt;p&gt;如图&lt;/p&gt;
&lt;p&gt;应用层——&amp;gt;传输层——&amp;gt;网络层——&amp;gt;数据链路层&lt;/p&gt;
&lt;p&gt;HTTP客户端——&amp;gt;TCP—-&amp;gt;IP——&amp;gt;网络&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在浏览器输入url
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/JS/"/>
    
    
      <category term="JS" scheme="http://blog.ypintao.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>关于单位px,rem,em</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/JS/%E5%85%B3%E4%BA%8E%E5%8D%95%E4%BD%8Dpx,rem,em.html"/>
    <id>http://blog.ypintao.com/技术/web前端/JS/关于单位px,rem,em.html</id>
    <published>2016-06-10T16:00:00.000Z</published>
    <updated>2017-03-22T07:09:09.396Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>px(像素)，相对长度单位，像素px是相对于显示器屏幕分辨率而言的，</p>
</li>
<li><p>em 相对长度单位，相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸<br>未被人为设置，则相对于浏览器的默认字体尺寸。<a id="more"></a></p>
</li>
<li><p>rem也是相对长度单位，但相对的知识html根元素。</p>
</li>
<li><p>vw代表视窗（viewport）的宽度为1%,如果视窗的宽度为1000px，那么50vw =500px</p>
</li>
<li><p>vh代表窗口高度的百分，如果视窗的高度为800px,那么50vh = 400px</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;px(像素)，相对长度单位，像素px是相对于显示器屏幕分辨率而言的，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;em 相对长度单位，相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸&lt;br&gt;未被人为设置，则相对于浏览器的默认字体尺寸。
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/JS/"/>
    
    
      <category term="JS" scheme="http://blog.ypintao.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>CSS问题汇总</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/CSS/CSS%E7%9A%84%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"/>
    <id>http://blog.ypintao.com/技术/web前端/CSS/CSS的问题汇总.html</id>
    <published>2016-04-30T16:00:00.000Z</published>
    <updated>2017-03-22T06:57:15.640Z</updated>
    
    <content type="html"><![CDATA[<p>###浏览器是怎样解析css选择器的？</p>
<ul>
<li>按照从上到下,从右到左的顺序解析</li>
</ul>
<p>###css优先级算法如何计算（ICE法则）<a id="more"></a></p>
<ul>
<li>css优化、提高性能的方法有哪些？</li>
</ul>
<p>###设置元素浮动后，该元素的display值是多少？（自动变成display：block）</p>
<p>###为什么要初始化css样式。</p>
<ul>
<li>统一去掉浏览器的默认样式</li>
</ul>
<p>###对BFC规范（块级格式化上下文）的理解</p>
<p>###让页面里的字体变清晰，变细用css怎么做？（-webkit-font-smoothing:antialiased;）</p>
<p>###使用css预处理器吗？喜欢哪个？</p>
<p>###经常遇到的浏览器的兼容性问题有哪些？原因，解决方法是什么，常用hack的技巧，</p>
<p>###display有哪些值？说明他们的作用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  display:none 隐藏</div><div class="line">  </div><div class="line">display:block 块级元素</div><div class="line"></div><div class="line">display:inline  默认</div><div class="line"></div><div class="line">display:inline-block</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###浏览器是怎样解析css选择器的？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按照从上到下,从右到左的顺序解析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###css优先级算法如何计算（ICE法则）
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/CSS/"/>
    
    
      <category term="CSS" scheme="http://blog.ypintao.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML5问题汇总</title>
    <link href="http://blog.ypintao.com/%E6%8A%80%E6%9C%AF/web%E5%89%8D%E7%AB%AF/HTML5/HTML5%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.html"/>
    <id>http://blog.ypintao.com/技术/web前端/HTML5/HTML5问题汇总.html</id>
    <published>2016-04-30T16:00:00.000Z</published>
    <updated>2017-03-22T06:57:12.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简述一下你对html语义化的理解"><a href="#简述一下你对html语义化的理解" class="headerlink" title="简述一下你对html语义化的理解"></a>简述一下你对html语义化的理解</h3><p>网页验证码是干嘛的，是为了解决什么安全问题<br>html5有哪些新特性，移除了哪些元素，如何处理html5新标签的浏览器兼容问题，如何区分html和html5，</p>
<h3 id="浏览器是怎么对html5的离线存储资源进行管理和加载的呢"><a href="#浏览器是怎么对html5的离线存储资源进行管理和加载的呢" class="headerlink" title="浏览器是怎么对html5的离线存储资源进行管理和加载的呢"></a>浏览器是怎么对html5的离线存储资源进行管理和加载的呢</h3><h3 id="介绍下你对浏览器内核的理解"><a href="#介绍下你对浏览器内核的理解" class="headerlink" title="介绍下你对浏览器内核的理解"></a>介绍下你对浏览器内核的理解<a id="more"></a></h3><p>主要分成两部分：</p>
<ul>
<li>渲染引擎（layout engineer或rendering）和JS引擎<br>渲染引擎：负责取得网页的内容（html好，xml，图像等等）、整理讯息（例如加入css等），以及计算网页的显示方式，然后会输出至显示器，浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同，所有网页浏览器，电子邮件客户端以及其他需要编辑显示网络内容的应用程序。</li>
<li>js引擎则：解析和执行javascript来实现网页的动态效果，最开始渲染引擎和js引擎并没有区分的很明确，后来js引擎越来越独立，内核就倾向于指渲染引擎。</li>
</ul>
<h3 id="html5为什么只需要些-lt-DOCTYPE-HTML-gt"><a href="#html5为什么只需要些-lt-DOCTYPE-HTML-gt" class="headerlink" title="html5为什么只需要些&lt;!DOCTYPE HTML&gt;"></a>html5为什么只需要些&lt;!DOCTYPE HTML&gt;</h3><ul>
<li>HTML5不是基于SGML 因此不需要对DTD进行引用，但是余姚doctype来规范浏览器的行为（让牛栏器按照他们应该的方式运行，）而HTML4.01基于SGML，所以需要对DTD进行引用，才能告知浏览器文档所使用的的文档类型；</li>
</ul>
<h3 id="webSocket如何兼容低浏览器？（阿里）"><a href="#webSocket如何兼容低浏览器？（阿里）" class="headerlink" title="webSocket如何兼容低浏览器？（阿里）"></a>webSocket如何兼容低浏览器？（阿里）</h3><h3 id="label的作用是什么？是怎么用的（加for或包裹）"><a href="#label的作用是什么？是怎么用的（加for或包裹）" class="headerlink" title="label的作用是什么？是怎么用的（加for或包裹）"></a>label的作用是什么？是怎么用的（加for或包裹）</h3><h3 id="iframe有哪些缺点？"><a href="#iframe有哪些缺点？" class="headerlink" title="iframe有哪些缺点？"></a>iframe有哪些缺点？</h3><h3 id="实现不适用border画出1px高的线，在不同的浏览器的怪异模式下都能保持统一效果"><a href="#实现不适用border画出1px高的线，在不同的浏览器的怪异模式下都能保持统一效果" class="headerlink" title="实现不适用border画出1px高的线，在不同的浏览器的怪异模式下都能保持统一效果"></a>实现不适用border画出1px高的线，在不同的浏览器的怪异模式下都能保持统一效果</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简述一下你对html语义化的理解&quot;&gt;&lt;a href=&quot;#简述一下你对html语义化的理解&quot; class=&quot;headerlink&quot; title=&quot;简述一下你对html语义化的理解&quot;&gt;&lt;/a&gt;简述一下你对html语义化的理解&lt;/h3&gt;&lt;p&gt;网页验证码是干嘛的，是为了解决什么安全问题&lt;br&gt;html5有哪些新特性，移除了哪些元素，如何处理html5新标签的浏览器兼容问题，如何区分html和html5，&lt;/p&gt;
&lt;h3 id=&quot;浏览器是怎么对html5的离线存储资源进行管理和加载的呢&quot;&gt;&lt;a href=&quot;#浏览器是怎么对html5的离线存储资源进行管理和加载的呢&quot; class=&quot;headerlink&quot; title=&quot;浏览器是怎么对html5的离线存储资源进行管理和加载的呢&quot;&gt;&lt;/a&gt;浏览器是怎么对html5的离线存储资源进行管理和加载的呢&lt;/h3&gt;&lt;h3 id=&quot;介绍下你对浏览器内核的理解&quot;&gt;&lt;a href=&quot;#介绍下你对浏览器内核的理解&quot; class=&quot;headerlink&quot; title=&quot;介绍下你对浏览器内核的理解&quot;&gt;&lt;/a&gt;介绍下你对浏览器内核的理解
    
    </summary>
    
      <category term="web前端" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML5" scheme="http://blog.ypintao.com/categories/web%E5%89%8D%E7%AB%AF/HTML5/"/>
    
    
      <category term="HTML5" scheme="http://blog.ypintao.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>图表测试</title>
    <link href="http://blog.ypintao.com/hexo%E6%B5%8B%E8%AF%95/%E5%9B%BE%E8%A1%A8%E6%B5%8B%E8%AF%95.html"/>
    <id>http://blog.ypintao.com/hexo测试/图表测试.html</id>
    <published>2016-03-02T16:00:00.000Z</published>
    <updated>2017-03-24T10:24:10.052Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>SVN((SVN server))——表示这个节点形状是一个圆。</li>
<li>|read only|SVN——以这种方式添加节点之间的文本。</li>
<li>graph TD，从上至下</li>
<li>BT</li>
<li>RL</li>
<li>LR<a id="more"></a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">graph LR</div><div class="line">    client1--&gt;|read / write|SVN(SVN server)</div><div class="line">    client2--&gt;|read only|SVN</div><div class="line">    client3--&gt;|read / write|SVN</div><div class="line">    client4--&gt;|read only|SVN</div><div class="line">    client5(...)--&gt;SVN</div><div class="line">    SVN---|store the data|sharedrive</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">graph TD</div><div class="line">    client1--&gt;|read / write|SVN(SVN server)</div><div class="line">    client2--&gt;|read only|SVN</div><div class="line">    client3--&gt;|read / write|SVN</div><div class="line">    client4--&gt;|read only|SVN</div><div class="line">    client5(...)--&gt;SVN</div><div class="line">    SVN---|store the data|sharedrive</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">graph TD</div><div class="line">    subgraph SVN Architecture</div><div class="line">    client1--&gt;|read / write|SVN((SVN server))</div><div class="line">    client2--&gt;|read only|SVN</div><div class="line">    client3--&gt;|read / write|SVN</div><div class="line">    client4--&gt;|read only|SVN</div><div class="line">    client5(...)--&gt;SVN</div><div class="line">    SVN---|store the data|sharedrive</div><div class="line">    end</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;SVN((SVN server))——表示这个节点形状是一个圆。&lt;/li&gt;
&lt;li&gt;|read only|SVN——以这种方式添加节点之间的文本。&lt;/li&gt;
&lt;li&gt;graph TD，从上至下&lt;/li&gt;
&lt;li&gt;BT&lt;/li&gt;
&lt;li&gt;RL&lt;/li&gt;
&lt;li&gt;LR
    
    </summary>
    
      <category term="test" scheme="http://blog.ypintao.com/categories/test/"/>
    
    
      <category term="test" scheme="http://blog.ypintao.com/tags/test/"/>
    
  </entry>
  
</feed>
